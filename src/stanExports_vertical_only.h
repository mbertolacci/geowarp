// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_vertical_only_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
#include <stan_meta_header_before.hpp>
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 307> locations_array__ =
  {" (found before start of program)",
  " (in 'vertical_only', line 365, column 0 to column 38)",
  " (in 'vertical_only', line 366, column 0 to column 35)",
  " (in 'vertical_only', line 368, column 0 to column 40)",
  " (in 'vertical_only', line 369, column 0 to column 42)",
  " (in 'vertical_only', line 371, column 0 to column 35)",
  " (in 'vertical_only', line 372, column 0 to column 43)",
  " (in 'vertical_only', line 373, column 2 to line 376, column 50)",
  " (in 'vertical_only', line 380, column 0 to column 36)",
  " (in 'vertical_only', line 381, column 0 to column 18)",
  " (in 'vertical_only', line 383, column 27 to column 28)",
  " (in 'vertical_only', line 383, column 4 to column 30)",
  " (in 'vertical_only', line 385, column 0 to column 17)",
  " (in 'vertical_only', line 386, column 0 to column 28)",
  " (in 'vertical_only', line 387, column 7 to column 19)",
  " (in 'vertical_only', line 387, column 21 to column 33)",
  " (in 'vertical_only', line 387, column 0 to column 86)",
  " (in 'vertical_only', line 388, column 7 to column 19)",
  " (in 'vertical_only', line 388, column 0 to column 58)",
  " (in 'vertical_only', line 389, column 7 to column 19)",
  " (in 'vertical_only', line 389, column 0 to column 64)",
  " (in 'vertical_only', line 390, column 7 to column 19)",
  " (in 'vertical_only', line 390, column 21 to column 33)",
  " (in 'vertical_only', line 390, column 0 to column 106)",
  " (in 'vertical_only', line 391, column 7 to column 19)",
  " (in 'vertical_only', line 391, column 21 to column 33)",
  " (in 'vertical_only', line 391, column 0 to column 58)",
  " (in 'vertical_only', line 392, column 7 to column 19)",
  " (in 'vertical_only', line 392, column 21 to column 33)",
  " (in 'vertical_only', line 392, column 0 to column 64)",
  " (in 'vertical_only', line 393, column 7 to column 19)",
  " (in 'vertical_only', line 393, column 21 to column 33)",
  " (in 'vertical_only', line 393, column 0 to column 56)",
  " (in 'vertical_only', line 394, column 7 to column 19)",
  " (in 'vertical_only', line 394, column 0 to column 36)",
  " (in 'vertical_only', line 396, column 7 to column 8)",
  " (in 'vertical_only', line 396, column 0 to column 33)",
  " (in 'vertical_only', line 397, column 7 to column 8)",
  " (in 'vertical_only', line 397, column 0 to column 23)",
  " (in 'vertical_only', line 399, column 2 to column 52)",
  " (in 'vertical_only', line 398, column 0 to line 400, column 13)",
  " (in 'vertical_only', line 402, column 0 to column 59)",
  " (in 'vertical_only', line 404, column 2 to column 64)",
  " (in 'vertical_only', line 403, column 28 to line 405, column 1)",
  " (in 'vertical_only', line 403, column 0 to line 405, column 1)",
  " (in 'vertical_only', line 406, column 0 to column 49)",
  " (in 'vertical_only', line 408, column 6 to column 98)",
  " (in 'vertical_only', line 407, column 19 to line 409, column 5)",
  " (in 'vertical_only', line 407, column 4 to line 409, column 5)",
  " (in 'vertical_only', line 430, column 6 to line 446, column 8)",
  " (in 'vertical_only', line 429, column 11 to line 447, column 5)",
  " (in 'vertical_only', line 411, column 6 to line 428, column 8)",
  " (in 'vertical_only', line 410, column 26 to line 429, column 5)",
  " (in 'vertical_only', line 410, column 4 to line 447, column 5)",
  " (in 'vertical_only', line 449, column 0 to column 24)",
  " (in 'vertical_only', line 450, column 0 to column 35)",
  " (in 'vertical_only', line 451, column 0 to line 455, column 2)",
  " (in 'vertical_only', line 456, column 0 to line 460, column 2)",
  " (in 'vertical_only', line 461, column 0 to line 463, column 2)",
  " (in 'vertical_only', line 465, column 0 to column 75)",
  " (in 'vertical_only', line 467, column 2 to line 473, column 4)",
  " (in 'vertical_only', line 466, column 33 to line 474, column 1)",
  " (in 'vertical_only', line 466, column 0 to line 474, column 1)",
  " (in 'vertical_only', line 476, column 0 to column 59)",
  " (in 'vertical_only', line 478, column 0 to column 78)",
  " (in 'vertical_only', line 479, column 0 to column 66)",
  " (in 'vertical_only', line 480, column 0 to column 37)",
  " (in 'vertical_only', line 481, column 0 to column 72)",
  " (in 'vertical_only', line 484, column 0 to line 493, column 2)",
  " (in 'vertical_only', line 382, column 2 to line 494, column 3)",
  " (in 'vertical_only', line 498, column 0 to column 23)",
  " (in 'vertical_only', line 503, column 2 to column 42)",
  " (in 'vertical_only', line 502, column 7 to line 504, column 1)",
  " (in 'vertical_only', line 501, column 2 to column 92)",
  " (in 'vertical_only', line 500, column 35 to line 502, column 1)",
  " (in 'vertical_only', line 500, column 0 to line 504, column 1)",
  " (in 'vertical_only', line 509, column 2 to column 39)",
  " (in 'vertical_only', line 508, column 7 to line 510, column 1)",
  " (in 'vertical_only', line 507, column 2 to column 83)",
  " (in 'vertical_only', line 506, column 32 to line 508, column 1)",
  " (in 'vertical_only', line 506, column 0 to line 510, column 1)",
  " (in 'vertical_only', line 512, column 0 to column 79)",
  " (in 'vertical_only', line 515, column 2 to line 523, column 4)",
  " (in 'vertical_only', line 514, column 28 to line 524, column 1)",
  " (in 'vertical_only', line 514, column 0 to line 524, column 1)",
  " (in 'vertical_only', line 527, column 2 to column 63)",
  " (in 'vertical_only', line 526, column 36 to line 528, column 1)",
  " (in 'vertical_only', line 526, column 0 to line 528, column 1)",
  " (in 'vertical_only', line 533, column 2 to column 47)",
  " (in 'vertical_only', line 532, column 7 to line 534, column 1)",
  " (in 'vertical_only', line 531, column 2 to column 107)",
  " (in 'vertical_only', line 530, column 40 to line 532, column 1)",
  " (in 'vertical_only', line 530, column 0 to line 534, column 1)",
  " (in 'vertical_only', line 541, column 4 to column 85)",
  " (in 'vertical_only', line 540, column 9 to line 542, column 3)",
  " (in 'vertical_only', line 539, column 4 to column 56)",
  " (in 'vertical_only', line 537, column 46 to line 540, column 3)",
  " (in 'vertical_only', line 537, column 9 to line 542, column 3)",
  " (in 'vertical_only', line 536, column 4 to column 75)",
  " (in 'vertical_only', line 535, column 39 to line 537, column 3)",
  " (in 'vertical_only', line 535, column 2 to line 542, column 3)",
  " (in 'vertical_only', line 282, column 0 to column 15)",
  " (in 'vertical_only', line 283, column 0 to column 15)",
  " (in 'vertical_only', line 284, column 12 to column 13)",
  " (in 'vertical_only', line 284, column 7 to column 8)",
  " (in 'vertical_only', line 284, column 0 to column 15)",
  " (in 'vertical_only', line 285, column 7 to column 8)",
  " (in 'vertical_only', line 285, column 0 to column 12)",
  " (in 'vertical_only', line 286, column 7 to column 8)",
  " (in 'vertical_only', line 286, column 0 to column 18)",
  " (in 'vertical_only', line 288, column 0 to column 26)",
  " (in 'vertical_only', line 289, column 7 to column 8)",
  " (in 'vertical_only', line 289, column 10 to column 22)",
  " (in 'vertical_only', line 289, column 0 to column 37)",
  " (in 'vertical_only', line 290, column 7 to column 19)",
  " (in 'vertical_only', line 290, column 0 to column 32)",
  " (in 'vertical_only', line 291, column 7 to column 19)",
  " (in 'vertical_only', line 291, column 21 to column 33)",
  " (in 'vertical_only', line 291, column 0 to column 51)",
  " (in 'vertical_only', line 293, column 0 to column 27)",
  " (in 'vertical_only', line 294, column 7 to column 8)",
  " (in 'vertical_only', line 294, column 10 to column 23)",
  " (in 'vertical_only', line 294, column 0 to column 39)",
  " (in 'vertical_only', line 295, column 0 to column 40)",
  " (in 'vertical_only', line 296, column 0 to column 40)",
  " (in 'vertical_only', line 298, column 0 to column 37)",
  " (in 'vertical_only', line 299, column 0 to column 37)",
  " (in 'vertical_only', line 301, column 0 to column 25)",
  " (in 'vertical_only', line 302, column 0 to column 33)",
  " (in 'vertical_only', line 303, column 7 to column 8)",
  " (in 'vertical_only', line 303, column 10 to column 29)",
  " (in 'vertical_only', line 303, column 0 to column 51)",
  " (in 'vertical_only', line 305, column 0 to column 31)",
  " (in 'vertical_only', line 306, column 7 to column 8)",
  " (in 'vertical_only', line 306, column 10 to column 27)",
  " (in 'vertical_only', line 306, column 0 to column 47)",
  " (in 'vertical_only', line 307, column 7 to column 24)",
  " (in 'vertical_only', line 307, column 0 to column 45)",
  " (in 'vertical_only', line 308, column 11 to column 28)",
  " (in 'vertical_only', line 308, column 0 to column 54)",
  " (in 'vertical_only', line 310, column 0 to column 32)",
  " (in 'vertical_only', line 311, column 7 to column 8)",
  " (in 'vertical_only', line 311, column 10 to column 28)",
  " (in 'vertical_only', line 311, column 0 to column 49)",
  " (in 'vertical_only', line 312, column 0 to column 37)",
  " (in 'vertical_only', line 313, column 0 to column 41)",
  " (in 'vertical_only', line 314, column 0 to column 45)",
  " (in 'vertical_only', line 315, column 0 to column 45)",
  " (in 'vertical_only', line 316, column 2 to column 25)",
  " (in 'vertical_only', line 317, column 2 to column 24)",
  " (in 'vertical_only', line 318, column 20 to column 29)",
  " (in 'vertical_only', line 318, column 2 to column 31)",
  " (in 'vertical_only', line 319, column 23 to column 31)",
  " (in 'vertical_only', line 319, column 2 to column 33)",
  " (in 'vertical_only', line 320, column 24 to column 32)",
  " (in 'vertical_only', line 320, column 2 to column 34)",
  " (in 'vertical_only', line 321, column 2 to column 33)",
  " (in 'vertical_only', line 322, column 2 to column 38)",
  " (in 'vertical_only', line 323, column 2 to column 38)",
  " (in 'vertical_only', line 324, column 2 to column 34)",
  " (in 'vertical_only', line 325, column 2 to column 34)",
  " (in 'vertical_only', line 326, column 2 to column 19)",
  " (in 'vertical_only', line 327, column 2 to column 26)",
  " (in 'vertical_only', line 332, column 0 to column 48)",
  " (in 'vertical_only', line 333, column 7 to column 8)",
  " (in 'vertical_only', line 333, column 10 to column 22)",
  " (in 'vertical_only', line 333, column 0 to column 73)",
  " (in 'vertical_only', line 334, column 7 to column 19)",
  " (in 'vertical_only', line 334, column 0 to column 62)",
  " (in 'vertical_only', line 335, column 7 to column 8)",
  " (in 'vertical_only', line 335, column 0 to column 50)",
  " (in 'vertical_only', line 337, column 0 to column 52)",
  " (in 'vertical_only', line 338, column 28 to column 40)",
  " (in 'vertical_only', line 338, column 42 to column 50)",
  " (in 'vertical_only', line 338, column 0 to column 52)",
  " (in 'vertical_only', line 339, column 22 to column 30)",
  " (in 'vertical_only', line 339, column 0 to column 32)",
  " (in 'vertical_only', line 340, column 0 to column 30)",
  " (in 'vertical_only', line 343, column 0 to column 58)",
  " (in 'vertical_only', line 346, column 2 to column 72)",
  " (in 'vertical_only', line 347, column 28 to column 39)",
  " (in 'vertical_only', line 347, column 2 to column 41)",
  " (in 'vertical_only', line 349, column 2 to line 351, column 4)",
  " (in 'vertical_only', line 352, column 2 to column 27)",
  " (in 'vertical_only', line 355, column 6 to column 32)",
  " (in 'vertical_only', line 356, column 6 to column 59)",
  " (in 'vertical_only', line 354, column 76 to line 357, column 5)",
  " (in 'vertical_only', line 354, column 4 to line 357, column 5)",
  " (in 'vertical_only', line 353, column 28 to line 358, column 3)",
  " (in 'vertical_only', line 353, column 2 to line 358, column 3)",
  " (in 'vertical_only', line 360, column 2 to column 50)",
  " (in 'vertical_only', line 345, column 22 to line 361, column 1)",
  " (in 'vertical_only', line 345, column 0 to line 361, column 1)",
  " (in 'vertical_only', line 368, column 7 to column 24)",
  " (in 'vertical_only', line 369, column 7 to column 25)",
  " (in 'vertical_only', line 376, column 4 to column 23)",
  " (in 'vertical_only', line 380, column 7 to column 19)",
  " (in 'vertical_only', line 80, column 9 to column 10)",
  " (in 'vertical_only', line 80, column 12 to column 13)",
  " (in 'vertical_only', line 80, column 2 to column 54)",
  " (in 'vertical_only', line 82, column 4 to column 18)",
  " (in 'vertical_only', line 81, column 14 to line 83, column 3)",
  " (in 'vertical_only', line 81, column 2 to line 83, column 3)",
  " (in 'vertical_only', line 85, column 4 to column 26)",
  " (in 'vertical_only', line 86, column 4 to column 26)",
  " (in 'vertical_only', line 84, column 17 to line 87, column 3)",
  " (in 'vertical_only', line 84, column 2 to line 87, column 3)",
  " (in 'vertical_only', line 88, column 2 to column 19)",
  " (in 'vertical_only', line 89, column 2 to column 32)",
  " (in 'vertical_only', line 79, column 49 to line 90, column 1)",
  " (in 'vertical_only', line 109, column 9 to column 10)",
  " (in 'vertical_only', line 109, column 12 to column 13)",
  " (in 'vertical_only', line 109, column 2 to column 44)",
  " (in 'vertical_only', line 110, column 2 to column 20)",
  " (in 'vertical_only', line 111, column 2 to column 21)",
  " (in 'vertical_only', line 112, column 2 to column 15)",
  " (in 'vertical_only', line 113, column 2 to column 15)",
  " (in 'vertical_only', line 116, column 4 to column 37)",
  " (in 'vertical_only', line 115, column 14 to line 117, column 3)",
  " (in 'vertical_only', line 115, column 2 to line 117, column 3)",
  " (in 'vertical_only', line 119, column 4 to column 18)",
  " (in 'vertical_only', line 118, column 14 to line 120, column 3)",
  " (in 'vertical_only', line 118, column 2 to line 120, column 3)",
  " (in 'vertical_only', line 121, column 2 to column 35)",
  " (in 'vertical_only', line 122, column 2 to column 40)",
  " (in 'vertical_only', line 123, column 2 to column 48)",
  " (in 'vertical_only', line 124, column 2 to column 47)",
  " (in 'vertical_only', line 126, column 2 to column 29)",
  " (in 'vertical_only', line 128, column 4 to column 35)",
  " (in 'vertical_only', line 129, column 4 to column 32)",
  " (in 'vertical_only', line 130, column 4 to column 32)",
  " (in 'vertical_only', line 127, column 21 to line 131, column 3)",
  " (in 'vertical_only', line 127, column 2 to line 131, column 3)",
  " (in 'vertical_only', line 132, column 2 to column 30)",
  " (in 'vertical_only', line 133, column 2 to column 30)",
  " (in 'vertical_only', line 134, column 2 to column 29)",
  " (in 'vertical_only', line 135, column 2 to column 32)",
  " (in 'vertical_only', line 108, column 72 to line 136, column 1)",
  " (in 'vertical_only', line 143, column 2 to column 64)",
  " (in 'vertical_only', line 142, column 2 to line 144, column 1)",
  " (in 'vertical_only', line 150, column 4 to column 39)",
  " (in 'vertical_only', line 149, column 9 to line 151, column 3)",
  " (in 'vertical_only', line 148, column 4 to column 13)",
  " (in 'vertical_only', line 147, column 14 to line 149, column 3)",
  " (in 'vertical_only', line 147, column 2 to line 151, column 3)",
  " (in 'vertical_only', line 146, column 51 to line 152, column 1)",
  " (in 'vertical_only', line 155, column 2 to column 40)",
  " (in 'vertical_only', line 156, column 2 to column 32)",
  " (in 'vertical_only', line 157, column 2 to column 22)",
  " (in 'vertical_only', line 159, column 4 to column 68)",
  " (in 'vertical_only', line 161, column 6 to column 30)",
  " (in 'vertical_only', line 160, column 33 to line 162, column 5)",
  " (in 'vertical_only', line 160, column 4 to line 162, column 5)",
  " (in 'vertical_only', line 163, column 4 to column 52)",
  " (in 'vertical_only', line 158, column 24 to line 164, column 3)",
  " (in 'vertical_only', line 158, column 2 to line 164, column 3)",
  " (in 'vertical_only', line 165, column 2 to column 21)",
  " (in 'vertical_only', line 154, column 44 to line 166, column 1)",
  " (in 'vertical_only', line 203, column 0 to column 26)",
  " (in 'vertical_only', line 205, column 0 to column 17)",
  " (in 'vertical_only', line 206, column 0 to column 28)",
  " (in 'vertical_only', line 207, column 7 to column 13)",
  " (in 'vertical_only', line 207, column 15 to column 21)",
  " (in 'vertical_only', line 207, column 0 to column 62)",
  " (in 'vertical_only', line 208, column 7 to column 13)",
  " (in 'vertical_only', line 208, column 0 to column 46)",
  " (in 'vertical_only', line 209, column 7 to column 13)",
  " (in 'vertical_only', line 209, column 0 to column 52)",
  " (in 'vertical_only', line 212, column 2 to column 57)",
  " (in 'vertical_only', line 213, column 2 to column 62)",
  " (in 'vertical_only', line 214, column 9 to column 24)",
  " (in 'vertical_only', line 214, column 26 to column 41)",
  " (in 'vertical_only', line 214, column 2 to column 51)",
  " (in 'vertical_only', line 215, column 9 to column 24)",
  " (in 'vertical_only', line 215, column 26 to column 41)",
  " (in 'vertical_only', line 215, column 2 to column 51)",
  " (in 'vertical_only', line 216, column 9 to column 24)",
  " (in 'vertical_only', line 216, column 26 to column 46)",
  " (in 'vertical_only', line 216, column 2 to column 62)",
  " (in 'vertical_only', line 217, column 9 to column 24)",
  " (in 'vertical_only', line 217, column 2 to column 40)",
  " (in 'vertical_only', line 218, column 9 to column 24)",
  " (in 'vertical_only', line 218, column 2 to column 46)",
  " (in 'vertical_only', line 219, column 28 to column 43)",
  " (in 'vertical_only', line 219, column 2 to line 221, column 4)",
  " (in 'vertical_only', line 222, column 2 to column 71)",
  " (in 'vertical_only', line 223, column 2 to line 228, column 4)",
  " (in 'vertical_only', line 230, column 1 to column 39)",
  " (in 'vertical_only', line 231, column 2 to line 237, column 4)",
  " (in 'vertical_only', line 238, column 2 to line 241, column 4)",
  " (in 'vertical_only', line 242, column 2 to line 245, column 4)",
  " (in 'vertical_only', line 246, column 2 to line 251, column 4)",
  " (in 'vertical_only', line 252, column 2 to line 254, column 4)",
  " (in 'vertical_only', line 255, column 2 to line 258, column 4)",
  " (in 'vertical_only', line 259, column 2 to line 262, column 4)",
  " (in 'vertical_only', line 263, column 2 to line 268, column 4)",
  " (in 'vertical_only', line 211, column 21 to line 269, column 1)",
  " (in 'vertical_only', line 211, column 0 to line 269, column 1)",
  " (in 'vertical_only', line 271, column 7 to column 39)",
  " (in 'vertical_only', line 271, column 0 to column 48)",
  " (in 'vertical_only', line 272, column 0 to column 20)",
  " (in 'vertical_only', line 273, column 0 to column 31)",
  " (in 'vertical_only', line 274, column 0 to column 52)",
  " (in 'vertical_only', line 275, column 0 to column 81)",
  " (in 'vertical_only', line 276, column 0 to column 66)",
  " (in 'vertical_only', line 277, column 0 to column 14)",
  " (in 'vertical_only', line 201, column 2 to line 278, column 1)"};
template <typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__>,-1,-1>
rw1d_precision(const int& n, const T1__& sigma_squared, std::ostream*
               pstream__);
template <typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__>,-1,-1>
exp1d_precision(const int& n, const T1__& delta, const T2__& ell, const T3__&
                sigma_squared, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
chol_solve_L_b(const T0__& L_arg__, const T1__& b_arg__, std::ostream*
               pstream__);
int
get_block_start(const int& i, const std::vector<int>& block_last_index,
                std::ostream* pstream__);
int
get_N_block_max(const std::vector<int>& block_last_index, std::ostream*
                pstream__);
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__, T3__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
geowarp_vecchia_partial_sums_vertical_only(const int& start, const int& end,
                                           const std::vector<T2__>&
                                           x_vertical_warped, const T3__&
                                           sigma_squared_nugget, const T4__&
                                           deviation_sd_arg__, const T5__&
                                           y_arg__, const T6__&
                                           y_tilde_arg__, const T7__&
                                           X_mean_arg__,
                                           const std::vector<int>&
                                           block_indices,
                                           const std::vector<int>&
                                           block_last_index,
                                           const std::vector<int>&
                                           block_N_responses,
                                           const std::vector<
                                                   std::vector<int>>&
                                           indices_X_mean_non_zero,
                                           const std::vector<int>&
                                           P_X_mean_non_zero, const int&
                                           N_block_max, const double&
                                           smoothness, std::ostream*
                                           pstream__);
template <typename T1__, stan::require_all_t<stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T1__>,-1,-1>
rw1d_precision(const int& n, const T1__& sigma_squared, std::ostream*
               pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 197;
    stan::math::validate_non_negative_index("output", "n", n);
    current_statement__ = 198;
    stan::math::validate_non_negative_index("output", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,-1> output =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, n, DUMMY_VAR__);
    current_statement__ = 199;
    stan::model::assign(output,
      stan::math::diag_matrix(stan::math::rep_vector(2, n)),
      "assigning variable output");
    current_statement__ = 202;
    if (stan::math::logical_eq(n, 0)) {
      current_statement__ = 200;
      return output;
    }
    current_statement__ = 206;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 203;
      stan::model::assign(output, -1, "assigning variable output",
        stan::model::index_uni(i), stan::model::index_uni((i - 1)));
      current_statement__ = 204;
      stan::model::assign(output, -1, "assigning variable output",
        stan::model::index_uni((i - 1)), stan::model::index_uni(i));
    }
    current_statement__ = 207;
    stan::model::assign(output, 1, "assigning variable output",
      stan::model::index_uni(n), stan::model::index_uni(n));
    current_statement__ = 208;
    return stan::math::divide(output, sigma_squared);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__>,-1,-1>
exp1d_precision(const int& n, const T1__& delta, const T2__& ell, const T3__&
                sigma_squared, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 210;
    stan::math::validate_non_negative_index("output", "n", n);
    current_statement__ = 211;
    stan::math::validate_non_negative_index("output", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,-1> output =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, n, DUMMY_VAR__);
    current_statement__ = 212;
    stan::model::assign(output, stan::math::rep_matrix(0, n, n),
      "assigning variable output");
    local_scalar_t__ e_lambda_d_x = DUMMY_VAR__;
    local_scalar_t__ e_2lambda_d_x = DUMMY_VAR__;
    local_scalar_t__ r_major = DUMMY_VAR__;
    local_scalar_t__ r_minor = DUMMY_VAR__;
    current_statement__ = 219;
    if (stan::math::logical_eq(n, 1)) {
      current_statement__ = 217;
      stan::model::assign(output, (1 / sigma_squared),
        "assigning variable output", stan::model::index_uni(1),
        stan::model::index_uni(1));
    }
    current_statement__ = 222;
    if (stan::math::logical_lte(n, 1)) {
      current_statement__ = 220;
      return output;
    }
    current_statement__ = 223;
    e_lambda_d_x = stan::math::exp((-delta / ell));
    current_statement__ = 224;
    e_2lambda_d_x = stan::math::exp(((-2 * delta) / ell));
    current_statement__ = 225;
    r_major = (e_2lambda_d_x / (1 - e_2lambda_d_x));
    current_statement__ = 226;
    r_minor = (e_lambda_d_x / (1 - e_2lambda_d_x));
    current_statement__ = 227;
    stan::model::assign(output, (1 + r_major), "assigning variable output",
      stan::model::index_uni(1), stan::model::index_uni(1));
    current_statement__ = 232;
    for (int i = 2; i <= (n - 1); ++i) {
      current_statement__ = 228;
      stan::model::assign(output, (1 + (2 * r_major)),
        "assigning variable output", stan::model::index_uni(i),
        stan::model::index_uni(i));
      current_statement__ = 229;
      stan::model::assign(output, -r_minor, "assigning variable output",
        stan::model::index_uni(i), stan::model::index_uni((i - 1)));
      current_statement__ = 230;
      stan::model::assign(output, -r_minor, "assigning variable output",
        stan::model::index_uni((i - 1)), stan::model::index_uni(i));
    }
    current_statement__ = 233;
    stan::model::assign(output, -r_minor, "assigning variable output",
      stan::model::index_uni(n), stan::model::index_uni((n - 1)));
    current_statement__ = 234;
    stan::model::assign(output, -r_minor, "assigning variable output",
      stan::model::index_uni((n - 1)), stan::model::index_uni(n));
    current_statement__ = 235;
    stan::model::assign(output, (1 + r_major), "assigning variable output",
      stan::model::index_uni(n), stan::model::index_uni(n));
    current_statement__ = 236;
    return stan::math::divide(output, sigma_squared);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
chol_solve_L_b(const T0__& L_arg__, const T1__& b_arg__, std::ostream*
               pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& L = stan::math::to_ref(L_arg__);
  const auto& b = stan::math::to_ref(b_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 238;
    return stan::math::transpose(
             stan::math::mdivide_right_tri_low(
               stan::math::transpose(stan::math::mdivide_left_tri_low(L, b)),
               L));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
get_block_start(const int& i, const std::vector<int>& block_last_index,
                std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 244;
    if (stan::math::logical_eq(i, 1)) {
      current_statement__ = 242;
      return 1;
    } else {
      current_statement__ = 240;
      return (stan::model::rvalue(block_last_index, "block_last_index",
                stan::model::index_uni((i - 1)))
             + 1);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
get_N_block_max(const std::vector<int>& block_last_index, std::ostream*
                pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_blocks = std::numeric_limits<int>::min();
    current_statement__ = 246;
    N_blocks = stan::math::size(block_last_index);
    int current_block_start_d = std::numeric_limits<int>::min();
    current_statement__ = 247;
    current_block_start_d = 1;
    int N_block_max = std::numeric_limits<int>::min();
    current_statement__ = 248;
    N_block_max = 0;
    current_statement__ = 255;
    for (int i = 1; i <= N_blocks; ++i) {
      int N_block_i = std::numeric_limits<int>::min();
      current_statement__ = 249;
      N_block_i = ((stan::model::rvalue(block_last_index, "block_last_index",
                      stan::model::index_uni(i))
        - current_block_start_d) + 1);
      current_statement__ = 252;
      if (stan::math::logical_gt(N_block_i, N_block_max)) {
        current_statement__ = 250;
        N_block_max = N_block_i;
      }
      current_statement__ = 253;
      current_block_start_d = (stan::model::rvalue(block_last_index,
                                 "block_last_index",
                                 stan::model::index_uni(i))
        + 1);
    }
    current_statement__ = 256;
    return N_block_max;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<T2__, T3__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>>>,-1,1>
geowarp_vecchia_partial_sums_vertical_only(const int& start, const int& end,
                                           const std::vector<T2__>&
                                           x_vertical_warped, const T3__&
                                           sigma_squared_nugget, const T4__&
                                           deviation_sd_arg__, const T5__&
                                           y_arg__, const T6__&
                                           y_tilde_arg__, const T7__&
                                           X_mean_arg__,
                                           const std::vector<int>&
                                           block_indices,
                                           const std::vector<int>&
                                           block_last_index,
                                           const std::vector<int>&
                                           block_N_responses,
                                           const std::vector<
                                                   std::vector<int>>&
                                           indices_X_mean_non_zero,
                                           const std::vector<int>&
                                           P_X_mean_non_zero, const int&
                                           N_block_max, const double&
                                           smoothness, std::ostream*
                                           pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__, T3__,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>>>;
  int current_statement__ = 0;
  const auto& deviation_sd = stan::math::to_ref(deviation_sd_arg__);
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& y_tilde = stan::math::to_ref(y_tilde_arg__);
  const auto& X_mean = stan::math::to_ref(X_mean_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int P_mean = std::numeric_limits<int>::min();
    current_statement__ = 258;
    P_mean = stan::math::cols(X_mean);
    local_scalar_t__ log_det = DUMMY_VAR__;
    current_statement__ = 259;
    log_det = 0;
    local_scalar_t__ y_tildet_Q_y_tilde = DUMMY_VAR__;
    current_statement__ = 260;
    y_tildet_Q_y_tilde = 0;
    current_statement__ = 261;
    stan::math::validate_non_negative_index("Xt_Q_X", "P_mean", P_mean);
    current_statement__ = 262;
    stan::math::validate_non_negative_index("Xt_Q_X", "P_mean", P_mean);
    Eigen::Matrix<local_scalar_t__,-1,-1> Xt_Q_X =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P_mean, P_mean,
        DUMMY_VAR__);
    current_statement__ = 263;
    stan::model::assign(Xt_Q_X, stan::math::rep_matrix(0, P_mean, P_mean),
      "assigning variable Xt_Q_X");
    current_statement__ = 264;
    stan::math::validate_non_negative_index("Xt_Q_y", "P_mean", P_mean);
    Eigen::Matrix<local_scalar_t__,-1,1> Xt_Q_y =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_mean, DUMMY_VAR__);
    current_statement__ = 265;
    stan::model::assign(Xt_Q_y, stan::math::rep_vector(0, P_mean),
      "assigning variable Xt_Q_y");
    current_statement__ = 266;
    stan::math::validate_non_negative_index("Xt_Q_y_tilde", "P_mean", P_mean);
    Eigen::Matrix<local_scalar_t__,-1,1> Xt_Q_y_tilde =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_mean, DUMMY_VAR__);
    current_statement__ = 267;
    stan::model::assign(Xt_Q_y_tilde, stan::math::rep_vector(0, P_mean),
      "assigning variable Xt_Q_y_tilde");
    current_statement__ = 297;
    for (int i = start; i <= end; ++i) {
      int block_start = std::numeric_limits<int>::min();
      current_statement__ = 268;
      block_start = get_block_start(i, block_last_index, pstream__);
      int N_current_block = std::numeric_limits<int>::min();
      current_statement__ = 269;
      N_current_block = ((stan::model::rvalue(block_last_index,
                            "block_last_index", stan::model::index_uni(i))
        - block_start) + 1);
      current_statement__ = 270;
      stan::math::validate_non_negative_index("K_block", "N_current_block",
        N_current_block);
      current_statement__ = 271;
      stan::math::validate_non_negative_index("K_block", "N_current_block",
        N_current_block);
      Eigen::Matrix<local_scalar_t__,-1,-1> K_block =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_current_block,
          N_current_block, DUMMY_VAR__);
      current_statement__ = 273;
      stan::math::validate_non_negative_index("L_block", "N_current_block",
        N_current_block);
      current_statement__ = 274;
      stan::math::validate_non_negative_index("L_block", "N_current_block",
        N_current_block);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_block =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_current_block,
          N_current_block, DUMMY_VAR__);
      current_statement__ = 276;
      stan::math::validate_non_negative_index("L_inv_X_block",
        "N_current_block", N_current_block);
      current_statement__ = 277;
      stan::math::validate_non_negative_index("L_inv_X_block",
        "P_X_mean_non_zero[i]",
        stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
          stan::model::index_uni(i)));
      Eigen::Matrix<local_scalar_t__,-1,-1> L_inv_X_block =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N_current_block,
          stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
            stan::model::index_uni(i)), DUMMY_VAR__);
      current_statement__ = 279;
      stan::math::validate_non_negative_index("L_inv_y_block",
        "N_current_block", N_current_block);
      Eigen::Matrix<local_scalar_t__,-1,1> L_inv_y_block =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_current_block,
          DUMMY_VAR__);
      current_statement__ = 281;
      stan::math::validate_non_negative_index("L_inv_y_tilde_block",
        "N_current_block", N_current_block);
      Eigen::Matrix<local_scalar_t__,-1,1> L_inv_y_tilde_block =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_current_block,
          DUMMY_VAR__);
      current_statement__ = 283;
      stan::math::validate_non_negative_index("indices_current_block",
        "N_current_block", N_current_block);
      std::vector<int> indices_current_block =
        std::vector<int>(N_current_block, std::numeric_limits<int>::min());
      current_statement__ = 284;
      stan::model::assign(indices_current_block,
        stan::model::rvalue(block_indices, "block_indices",
          stan::model::index_min_max(block_start,
            stan::model::rvalue(block_last_index, "block_last_index",
              stan::model::index_uni(i)))),
        "assigning variable indices_current_block");
      int N_parents_current_block = std::numeric_limits<int>::min();
      current_statement__ = 285;
      N_parents_current_block = (N_current_block -
        stan::model::rvalue(block_N_responses, "block_N_responses",
          stan::model::index_uni(i)));
      current_statement__ = 286;
      stan::model::assign(K_block,
        geowarp_process_covariance_1d(sigma_squared_nugget,
          stan::model::rvalue(deviation_sd, "deviation_sd",
            stan::model::index_multi(
              stan::model::rvalue(indices_current_block,
                "indices_current_block",
                stan::model::index_min_max(1, N_current_block)))),
          stan::model::rvalue(x_vertical_warped, "x_vertical_warped",
            stan::model::index_multi(
              stan::model::rvalue(indices_current_block,
                "indices_current_block",
                stan::model::index_min_max(1, N_current_block)))),
          smoothness, pstream__), "assigning variable K_block",
        stan::model::index_min_max(1, N_current_block),
        stan::model::index_min_max(1, N_current_block));
      current_statement__ = 287;
      stan::model::assign(L_block, stan::math::cholesky_decompose(K_block),
        "assigning variable L_block");
      current_statement__ = 288;
      stan::model::assign(L_inv_X_block,
        stan::math::mdivide_left_tri_low(L_block,
          stan::model::rvalue(X_mean, "X_mean",
            stan::model::index_multi(indices_current_block),
            stan::model::index_multi(
              stan::model::rvalue(indices_X_mean_non_zero,
                "indices_X_mean_non_zero",
                stan::model::index_min_max(1,
                  stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                    stan::model::index_uni(i))), stan::model::index_uni(i))))),
        "assigning variable L_inv_X_block");
      current_statement__ = 289;
      stan::model::assign(L_inv_y_block,
        stan::math::mdivide_left_tri_low(L_block,
          stan::model::rvalue(y, "y",
            stan::model::index_multi(indices_current_block))),
        "assigning variable L_inv_y_block");
      current_statement__ = 290;
      stan::model::assign(L_inv_y_tilde_block,
        stan::math::mdivide_left_tri_low(L_block,
          stan::model::rvalue(y_tilde, "y_tilde",
            stan::model::index_multi(indices_current_block))),
        "assigning variable L_inv_y_tilde_block");
      current_statement__ = 291;
      log_det = (log_det + (2 *
        stan::math::sum(
          stan::math::log(
            stan::math::diagonal(
              stan::model::rvalue(L_block, "L_block",
                stan::model::index_min((N_parents_current_block + 1)),
                stan::model::index_min((N_parents_current_block + 1))))))));
      current_statement__ = 292;
      y_tildet_Q_y_tilde = (y_tildet_Q_y_tilde +
        stan::math::sum(
          stan::math::square(
            stan::model::rvalue(L_inv_y_tilde_block, "L_inv_y_tilde_block",
              stan::model::index_min((N_parents_current_block + 1))))));
      current_statement__ = 293;
      stan::model::assign(Xt_Q_y,
        stan::math::add(
          stan::model::deep_copy(
            stan::model::rvalue(Xt_Q_y, "Xt_Q_y",
              stan::model::index_multi(
                stan::model::rvalue(indices_X_mean_non_zero,
                  "indices_X_mean_non_zero",
                  stan::model::index_min_max(1,
                    stan::model::rvalue(P_X_mean_non_zero,
                      "P_X_mean_non_zero", stan::model::index_uni(i))),
                  stan::model::index_uni(i))))),
          stan::math::multiply(
            stan::math::transpose(
              stan::model::rvalue(L_inv_X_block, "L_inv_X_block",
                stan::model::index_min((N_parents_current_block + 1)),
                stan::model::index_min_max(1,
                  stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                    stan::model::index_uni(i))))),
            stan::model::rvalue(L_inv_y_block, "L_inv_y_block",
              stan::model::index_min((N_parents_current_block + 1))))),
        "assigning variable Xt_Q_y",
        stan::model::index_multi(
          stan::model::rvalue(indices_X_mean_non_zero,
            "indices_X_mean_non_zero",
            stan::model::index_min_max(1,
              stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                stan::model::index_uni(i))), stan::model::index_uni(i))));
      current_statement__ = 294;
      stan::model::assign(Xt_Q_y_tilde,
        stan::math::add(
          stan::model::deep_copy(
            stan::model::rvalue(Xt_Q_y_tilde, "Xt_Q_y_tilde",
              stan::model::index_multi(
                stan::model::rvalue(indices_X_mean_non_zero,
                  "indices_X_mean_non_zero",
                  stan::model::index_min_max(1,
                    stan::model::rvalue(P_X_mean_non_zero,
                      "P_X_mean_non_zero", stan::model::index_uni(i))),
                  stan::model::index_uni(i))))),
          stan::math::multiply(
            stan::math::transpose(
              stan::model::rvalue(L_inv_X_block, "L_inv_X_block",
                stan::model::index_min((N_parents_current_block + 1)),
                stan::model::index_min_max(1,
                  stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                    stan::model::index_uni(i))))),
            stan::model::rvalue(L_inv_y_tilde_block, "L_inv_y_tilde_block",
              stan::model::index_min((N_parents_current_block + 1))))),
        "assigning variable Xt_Q_y_tilde",
        stan::model::index_multi(
          stan::model::rvalue(indices_X_mean_non_zero,
            "indices_X_mean_non_zero",
            stan::model::index_min_max(1,
              stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                stan::model::index_uni(i))), stan::model::index_uni(i))));
      current_statement__ = 295;
      stan::model::assign(Xt_Q_X,
        stan::math::add(
          stan::model::deep_copy(
            stan::model::rvalue(Xt_Q_X, "Xt_Q_X",
              stan::model::index_multi(
                stan::model::rvalue(indices_X_mean_non_zero,
                  "indices_X_mean_non_zero",
                  stan::model::index_min_max(1,
                    stan::model::rvalue(P_X_mean_non_zero,
                      "P_X_mean_non_zero", stan::model::index_uni(i))),
                  stan::model::index_uni(i))),
              stan::model::index_multi(
                stan::model::rvalue(indices_X_mean_non_zero,
                  "indices_X_mean_non_zero",
                  stan::model::index_min_max(1,
                    stan::model::rvalue(P_X_mean_non_zero,
                      "P_X_mean_non_zero", stan::model::index_uni(i))),
                  stan::model::index_uni(i))))),
          stan::math::crossprod(
            stan::model::rvalue(L_inv_X_block, "L_inv_X_block",
              stan::model::index_min((N_parents_current_block + 1)),
              stan::model::index_omni()))), "assigning variable Xt_Q_X",
        stan::model::index_multi(
          stan::model::rvalue(indices_X_mean_non_zero,
            "indices_X_mean_non_zero",
            stan::model::index_min_max(1,
              stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                stan::model::index_uni(i))), stan::model::index_uni(i))),
        stan::model::index_multi(
          stan::model::rvalue(indices_X_mean_non_zero,
            "indices_X_mean_non_zero",
            stan::model::index_min_max(1,
              stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                stan::model::index_uni(i))), stan::model::index_uni(i))));
    }
    current_statement__ = 298;
    stan::math::validate_non_negative_index("output",
      "2 + P_mean * P_mean + 2 * P_mean", ((2 + (P_mean * P_mean)) + (2 *
      P_mean)));
    Eigen::Matrix<local_scalar_t__,-1,1> output =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((2 + (P_mean * P_mean))
        + (2 * P_mean)), DUMMY_VAR__);
    current_statement__ = 300;
    stan::model::assign(output, log_det, "assigning variable output",
      stan::model::index_uni(1));
    current_statement__ = 301;
    stan::model::assign(output, y_tildet_Q_y_tilde,
      "assigning variable output", stan::model::index_uni(2));
    current_statement__ = 302;
    stan::model::assign(output, stan::math::to_vector(Xt_Q_X),
      "assigning variable output",
      stan::model::index_min_max(3, (2 + (P_mean * P_mean))));
    current_statement__ = 303;
    stan::model::assign(output, stan::math::to_vector(Xt_Q_y),
      "assigning variable output",
      stan::model::index_min_max((3 + (P_mean * P_mean)), ((2 + (P_mean *
        P_mean)) + P_mean)));
    current_statement__ = 304;
    stan::model::assign(output, stan::math::to_vector(Xt_Q_y_tilde),
      "assigning variable output",
      stan::model::index_min(((3 + (P_mean * P_mean)) + P_mean)));
    current_statement__ = 305;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header_after.hpp>
class model_vertical_only final : public model_base_crtp<model_vertical_only> {
private:
  int N;
  int D;
  std::vector<Eigen::Matrix<double,-1,1>> x;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,1> scaling_data__;
  int P_mean_fixed;
  Eigen::Matrix<double,-1,-1> X_mean_fixed_data__;
  Eigen::Matrix<double,-1,1> alpha_mean_data__;
  Eigen::Matrix<double,-1,-1> alpha_precision_data__;
  int P_mean_random;
  Eigen::Matrix<double,-1,-1> X_mean_random_data__;
  double tau_squared_mean_random_a;
  double tau_squared_mean_random_b;
  double sigma_squared_nugget_a;
  double sigma_squared_nugget_b;
  double smoothness;
  int P_deviation_warping;
  Eigen::Matrix<double,-1,-1> X_deviation_warping_data__;
  int P_deviation_fixed;
  Eigen::Matrix<double,-1,-1> X_deviation_fixed_data__;
  Eigen::Matrix<double,-1,1> eta_deviation_mean_data__;
  Eigen::Matrix<double,-1,-1> eta_deviation_precision_data__;
  int P_deviation_random;
  Eigen::Matrix<double,-1,-1> X_deviation_random_data__;
  double delta_deviation_random;
  double ell_deviation_random_scale;
  double tau_squared_deviation_random_a;
  double tau_squared_deviation_random_b;
  int N_indices;
  int N_blocks;
  std::vector<int> block_indices;
  std::vector<int> block_last_index;
  std::vector<int> block_N_responses;
  int gamma_deviation_prior_type;
  double gamma_deviation_lower;
  double gamma_deviation_upper;
  double gamma_deviation_a;
  double gamma_deviation_b;
  int use_parallel;
  int grain_size;
  int P_mean_total;
  Eigen::Matrix<double,-1,-1> X_mean_data__;
  Eigen::Matrix<double,-1,1> alpha_Q_mu_data__;
  Eigen::Matrix<double,-1,1> y_tilde_data__;
  int N_block_max;
  std::vector<std::vector<int>> indices_X_mean_non_zero;
  std::vector<int> P_X_mean_non_zero;
  int current_block_start_a;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> scaling{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_mean_fixed{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> alpha_precision{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_mean_random{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_deviation_warping{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_deviation_fixed{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> eta_deviation_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    eta_deviation_precision{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_deviation_random{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_mean{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha_Q_mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_tilde{nullptr, 0};
public:
  ~model_vertical_only() {}
  model_vertical_only(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_vertical_only_namespace::model_vertical_only";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 101;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 101;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 102;
      context__.validate_dims("data initialization", "D", "int",
        std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      current_statement__ = 102;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "D", D, 2);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("x", "D", D);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(D)});
      x = std::vector<Eigen::Matrix<double,-1,1>>(N,
            Eigen::Matrix<double,-1,1>::Constant(D,
              std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 105;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 105;
        pos__ = 1;
        current_statement__ = 105;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 105;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 105;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 105;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 106;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 107;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 107;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 107;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 108;
      stan::math::validate_non_negative_index("scaling", "D", D);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "scaling", "double",
        std::vector<size_t>{static_cast<size_t>(D)});
      scaling_data__ = Eigen::Matrix<double,-1,1>::Constant(D,
                         std::numeric_limits<double>::quiet_NaN());
      new (&scaling)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(scaling_data__.data(), D);
      {
        std::vector<local_scalar_t__> scaling_flat__;
        current_statement__ = 109;
        scaling_flat__ = context__.vals_r("scaling");
        current_statement__ = 109;
        pos__ = 1;
        current_statement__ = 109;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 109;
          stan::model::assign(scaling, scaling_flat__[(pos__ - 1)],
            "assigning variable scaling", stan::model::index_uni(sym1__));
          current_statement__ = 109;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 110;
      context__.validate_dims("data initialization", "P_mean_fixed", "int",
        std::vector<size_t>{});
      P_mean_fixed = std::numeric_limits<int>::min();
      current_statement__ = 110;
      P_mean_fixed = context__.vals_i("P_mean_fixed")[(1 - 1)];
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "P_mean_fixed",
        P_mean_fixed, 1);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("X_mean_fixed", "N", N);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("X_mean_fixed", "P_mean_fixed",
        P_mean_fixed);
      current_statement__ = 113;
      context__.validate_dims("data initialization", "X_mean_fixed",
        "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(P_mean_fixed)});
      X_mean_fixed_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                              P_mean_fixed,
                              std::numeric_limits<double>::quiet_NaN());
      new (&X_mean_fixed)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_mean_fixed_data__.data(),
        N, P_mean_fixed);
      {
        std::vector<local_scalar_t__> X_mean_fixed_flat__;
        current_statement__ = 113;
        X_mean_fixed_flat__ = context__.vals_r("X_mean_fixed");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= P_mean_fixed; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 113;
            stan::model::assign(X_mean_fixed, X_mean_fixed_flat__[(pos__ -
              1)], "assigning variable X_mean_fixed",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 113;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 114;
      stan::math::validate_non_negative_index("alpha_mean", "P_mean_fixed",
        P_mean_fixed);
      current_statement__ = 115;
      context__.validate_dims("data initialization", "alpha_mean", "double",
        std::vector<size_t>{static_cast<size_t>(P_mean_fixed)});
      alpha_mean_data__ = Eigen::Matrix<double,-1,1>::Constant(P_mean_fixed,
                            std::numeric_limits<double>::quiet_NaN());
      new (&alpha_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha_mean_data__.data(),
        P_mean_fixed);
      {
        std::vector<local_scalar_t__> alpha_mean_flat__;
        current_statement__ = 115;
        alpha_mean_flat__ = context__.vals_r("alpha_mean");
        current_statement__ = 115;
        pos__ = 1;
        current_statement__ = 115;
        for (int sym1__ = 1; sym1__ <= P_mean_fixed; ++sym1__) {
          current_statement__ = 115;
          stan::model::assign(alpha_mean, alpha_mean_flat__[(pos__ - 1)],
            "assigning variable alpha_mean", stan::model::index_uni(sym1__));
          current_statement__ = 115;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 116;
      stan::math::validate_non_negative_index("alpha_precision",
        "P_mean_fixed", P_mean_fixed);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("alpha_precision",
        "P_mean_fixed", P_mean_fixed);
      current_statement__ = 118;
      context__.validate_dims("data initialization", "alpha_precision",
        "double",
        std::vector<size_t>{static_cast<size_t>(P_mean_fixed),
          static_cast<size_t>(P_mean_fixed)});
      alpha_precision_data__ = Eigen::Matrix<double,-1,-1>::Constant(P_mean_fixed,
                                 P_mean_fixed,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&alpha_precision)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(alpha_precision_data__.data(),
        P_mean_fixed, P_mean_fixed);
      {
        std::vector<local_scalar_t__> alpha_precision_flat__;
        current_statement__ = 118;
        alpha_precision_flat__ = context__.vals_r("alpha_precision");
        current_statement__ = 118;
        pos__ = 1;
        current_statement__ = 118;
        for (int sym1__ = 1; sym1__ <= P_mean_fixed; ++sym1__) {
          current_statement__ = 118;
          for (int sym2__ = 1; sym2__ <= P_mean_fixed; ++sym2__) {
            current_statement__ = 118;
            stan::model::assign(alpha_precision,
              alpha_precision_flat__[(pos__ - 1)],
              "assigning variable alpha_precision",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 118;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 119;
      context__.validate_dims("data initialization", "P_mean_random", "int",
        std::vector<size_t>{});
      P_mean_random = std::numeric_limits<int>::min();
      current_statement__ = 119;
      P_mean_random = context__.vals_i("P_mean_random")[(1 - 1)];
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "P_mean_random",
        P_mean_random, 0);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("X_mean_random", "N", N);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("X_mean_random",
        "P_mean_random", P_mean_random);
      current_statement__ = 122;
      context__.validate_dims("data initialization", "X_mean_random",
        "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(P_mean_random)});
      X_mean_random_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                               P_mean_random,
                               std::numeric_limits<double>::quiet_NaN());
      new (&X_mean_random)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_mean_random_data__.data(),
        N, P_mean_random);
      {
        std::vector<local_scalar_t__> X_mean_random_flat__;
        current_statement__ = 122;
        X_mean_random_flat__ = context__.vals_r("X_mean_random");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= P_mean_random; ++sym1__) {
          current_statement__ = 122;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 122;
            stan::model::assign(X_mean_random, X_mean_random_flat__[(pos__ -
              1)], "assigning variable X_mean_random",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 122;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 123;
      context__.validate_dims("data initialization",
        "tau_squared_mean_random_a", "double", std::vector<size_t>{});
      tau_squared_mean_random_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 123;
      tau_squared_mean_random_a = context__.vals_r("tau_squared_mean_random_a")[(1
        - 1)];
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__,
        "tau_squared_mean_random_a", tau_squared_mean_random_a, 0);
      current_statement__ = 124;
      context__.validate_dims("data initialization",
        "tau_squared_mean_random_b", "double", std::vector<size_t>{});
      tau_squared_mean_random_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 124;
      tau_squared_mean_random_b = context__.vals_r("tau_squared_mean_random_b")[(1
        - 1)];
      current_statement__ = 124;
      stan::math::check_greater_or_equal(function__,
        "tau_squared_mean_random_b", tau_squared_mean_random_b, 0);
      current_statement__ = 125;
      context__.validate_dims("data initialization",
        "sigma_squared_nugget_a", "double", std::vector<size_t>{});
      sigma_squared_nugget_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 125;
      sigma_squared_nugget_a = context__.vals_r("sigma_squared_nugget_a")[(1
        - 1)];
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__,
        "sigma_squared_nugget_a", sigma_squared_nugget_a, 0);
      current_statement__ = 126;
      context__.validate_dims("data initialization",
        "sigma_squared_nugget_b", "double", std::vector<size_t>{});
      sigma_squared_nugget_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 126;
      sigma_squared_nugget_b = context__.vals_r("sigma_squared_nugget_b")[(1
        - 1)];
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__,
        "sigma_squared_nugget_b", sigma_squared_nugget_b, 0);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "smoothness", "double",
        std::vector<size_t>{});
      smoothness = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 127;
      smoothness = context__.vals_r("smoothness")[(1 - 1)];
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "smoothness",
        smoothness, 0);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "P_deviation_warping",
        "int", std::vector<size_t>{});
      P_deviation_warping = std::numeric_limits<int>::min();
      current_statement__ = 128;
      P_deviation_warping = context__.vals_i("P_deviation_warping")[(1 - 1)];
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "P_deviation_warping",
        P_deviation_warping, 1);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("X_deviation_warping", "N", N);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("X_deviation_warping",
        "P_deviation_warping", P_deviation_warping);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "X_deviation_warping",
        "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(P_deviation_warping)});
      X_deviation_warping_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                                     P_deviation_warping,
                                     std::numeric_limits<double>::quiet_NaN());
      new (&X_deviation_warping)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_deviation_warping_data__.data(),
        N, P_deviation_warping);
      {
        std::vector<local_scalar_t__> X_deviation_warping_flat__;
        current_statement__ = 131;
        X_deviation_warping_flat__ = context__.vals_r("X_deviation_warping");
        current_statement__ = 131;
        pos__ = 1;
        current_statement__ = 131;
        for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
          current_statement__ = 131;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 131;
            stan::model::assign(X_deviation_warping,
              X_deviation_warping_flat__[(pos__ - 1)],
              "assigning variable X_deviation_warping",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 131;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 132;
      context__.validate_dims("data initialization", "P_deviation_fixed",
        "int", std::vector<size_t>{});
      P_deviation_fixed = std::numeric_limits<int>::min();
      current_statement__ = 132;
      P_deviation_fixed = context__.vals_i("P_deviation_fixed")[(1 - 1)];
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "P_deviation_fixed",
        P_deviation_fixed, 1);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("X_deviation_fixed", "N", N);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("X_deviation_fixed",
        "P_deviation_fixed", P_deviation_fixed);
      current_statement__ = 135;
      context__.validate_dims("data initialization", "X_deviation_fixed",
        "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(P_deviation_fixed)});
      X_deviation_fixed_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                                   P_deviation_fixed,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&X_deviation_fixed)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_deviation_fixed_data__.data(),
        N, P_deviation_fixed);
      {
        std::vector<local_scalar_t__> X_deviation_fixed_flat__;
        current_statement__ = 135;
        X_deviation_fixed_flat__ = context__.vals_r("X_deviation_fixed");
        current_statement__ = 135;
        pos__ = 1;
        current_statement__ = 135;
        for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
          current_statement__ = 135;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 135;
            stan::model::assign(X_deviation_fixed,
              X_deviation_fixed_flat__[(pos__ - 1)],
              "assigning variable X_deviation_fixed",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 135;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 136;
      stan::math::validate_non_negative_index("eta_deviation_mean",
        "P_deviation_fixed", P_deviation_fixed);
      current_statement__ = 137;
      context__.validate_dims("data initialization", "eta_deviation_mean",
        "double",
        std::vector<size_t>{static_cast<size_t>(P_deviation_fixed)});
      eta_deviation_mean_data__ = Eigen::Matrix<double,-1,1>::Constant(P_deviation_fixed,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&eta_deviation_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(eta_deviation_mean_data__.data(),
        P_deviation_fixed);
      {
        std::vector<local_scalar_t__> eta_deviation_mean_flat__;
        current_statement__ = 137;
        eta_deviation_mean_flat__ = context__.vals_r("eta_deviation_mean");
        current_statement__ = 137;
        pos__ = 1;
        current_statement__ = 137;
        for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
          current_statement__ = 137;
          stan::model::assign(eta_deviation_mean,
            eta_deviation_mean_flat__[(pos__ - 1)],
            "assigning variable eta_deviation_mean",
            stan::model::index_uni(sym1__));
          current_statement__ = 137;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 138;
      stan::math::validate_non_negative_index("eta_deviation_precision",
        "P_deviation_fixed", P_deviation_fixed);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("eta_deviation_precision",
        "P_deviation_fixed", P_deviation_fixed);
      current_statement__ = 139;
      context__.validate_dims("data initialization",
        "eta_deviation_precision", "double",
        std::vector<size_t>{static_cast<size_t>(P_deviation_fixed),
          static_cast<size_t>(P_deviation_fixed)});
      eta_deviation_precision_data__ = Eigen::Matrix<double,-1,-1>::Constant(P_deviation_fixed,
                                         P_deviation_fixed,
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      new (&eta_deviation_precision)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(eta_deviation_precision_data__.data(),
        P_deviation_fixed, P_deviation_fixed);
      {
        std::vector<local_scalar_t__> eta_deviation_precision_flat__;
        current_statement__ = 139;
        eta_deviation_precision_flat__ = context__.vals_r("eta_deviation_precision");
        current_statement__ = 139;
        pos__ = 1;
        current_statement__ = 139;
        for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
          current_statement__ = 139;
          for (int sym2__ = 1; sym2__ <= P_deviation_fixed; ++sym2__) {
            current_statement__ = 139;
            stan::model::assign(eta_deviation_precision,
              eta_deviation_precision_flat__[(pos__ - 1)],
              "assigning variable eta_deviation_precision",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 139;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 139;
      stan::math::check_cov_matrix(function__, "eta_deviation_precision",
        eta_deviation_precision);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "P_deviation_random",
        "int", std::vector<size_t>{});
      P_deviation_random = std::numeric_limits<int>::min();
      current_statement__ = 140;
      P_deviation_random = context__.vals_i("P_deviation_random")[(1 - 1)];
      current_statement__ = 140;
      stan::math::check_greater_or_equal(function__, "P_deviation_random",
        P_deviation_random, 0);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("X_deviation_random", "N", N);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("X_deviation_random",
        "P_deviation_random", P_deviation_random);
      current_statement__ = 143;
      context__.validate_dims("data initialization", "X_deviation_random",
        "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(P_deviation_random)});
      X_deviation_random_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                                    P_deviation_random,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&X_deviation_random)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_deviation_random_data__.data(),
        N, P_deviation_random);
      {
        std::vector<local_scalar_t__> X_deviation_random_flat__;
        current_statement__ = 143;
        X_deviation_random_flat__ = context__.vals_r("X_deviation_random");
        current_statement__ = 143;
        pos__ = 1;
        current_statement__ = 143;
        for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
          current_statement__ = 143;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 143;
            stan::model::assign(X_deviation_random,
              X_deviation_random_flat__[(pos__ - 1)],
              "assigning variable X_deviation_random",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 143;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 144;
      context__.validate_dims("data initialization",
        "delta_deviation_random", "double", std::vector<size_t>{});
      delta_deviation_random = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 144;
      delta_deviation_random = context__.vals_r("delta_deviation_random")[(1
        - 1)];
      current_statement__ = 144;
      stan::math::check_greater_or_equal(function__,
        "delta_deviation_random", delta_deviation_random, 0);
      current_statement__ = 145;
      context__.validate_dims("data initialization",
        "ell_deviation_random_scale", "double", std::vector<size_t>{});
      ell_deviation_random_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 145;
      ell_deviation_random_scale = context__.vals_r("ell_deviation_random_scale")[(1
        - 1)];
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__,
        "ell_deviation_random_scale", ell_deviation_random_scale, 0);
      current_statement__ = 146;
      context__.validate_dims("data initialization",
        "tau_squared_deviation_random_a", "double", std::vector<size_t>{});
      tau_squared_deviation_random_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 146;
      tau_squared_deviation_random_a = context__.vals_r("tau_squared_deviation_random_a")[(1
        - 1)];
      current_statement__ = 146;
      stan::math::check_greater_or_equal(function__,
        "tau_squared_deviation_random_a", tau_squared_deviation_random_a, 0);
      current_statement__ = 147;
      context__.validate_dims("data initialization",
        "tau_squared_deviation_random_b", "double", std::vector<size_t>{});
      tau_squared_deviation_random_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 147;
      tau_squared_deviation_random_b = context__.vals_r("tau_squared_deviation_random_b")[(1
        - 1)];
      current_statement__ = 147;
      stan::math::check_greater_or_equal(function__,
        "tau_squared_deviation_random_b", tau_squared_deviation_random_b, 0);
      current_statement__ = 148;
      context__.validate_dims("data initialization", "N_indices", "int",
        std::vector<size_t>{});
      N_indices = std::numeric_limits<int>::min();
      current_statement__ = 148;
      N_indices = context__.vals_i("N_indices")[(1 - 1)];
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__, "N_indices", N_indices,
        1);
      current_statement__ = 149;
      context__.validate_dims("data initialization", "N_blocks", "int",
        std::vector<size_t>{});
      N_blocks = std::numeric_limits<int>::min();
      current_statement__ = 149;
      N_blocks = context__.vals_i("N_blocks")[(1 - 1)];
      current_statement__ = 149;
      stan::math::check_greater_or_equal(function__, "N_blocks", N_blocks, 1);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("block_indices", "N_indices",
        N_indices);
      current_statement__ = 151;
      context__.validate_dims("data initialization", "block_indices", "int",
        std::vector<size_t>{static_cast<size_t>(N_indices)});
      block_indices = std::vector<int>(N_indices,
                        std::numeric_limits<int>::min());
      current_statement__ = 151;
      block_indices = context__.vals_i("block_indices");
      current_statement__ = 152;
      stan::math::validate_non_negative_index("block_last_index", "N_blocks",
        N_blocks);
      current_statement__ = 153;
      context__.validate_dims("data initialization", "block_last_index",
        "int", std::vector<size_t>{static_cast<size_t>(N_blocks)});
      block_last_index = std::vector<int>(N_blocks,
                           std::numeric_limits<int>::min());
      current_statement__ = 153;
      block_last_index = context__.vals_i("block_last_index");
      current_statement__ = 154;
      stan::math::validate_non_negative_index("block_N_responses",
        "N_blocks", N_blocks);
      current_statement__ = 155;
      context__.validate_dims("data initialization", "block_N_responses",
        "int", std::vector<size_t>{static_cast<size_t>(N_blocks)});
      block_N_responses = std::vector<int>(N_blocks,
                            std::numeric_limits<int>::min());
      current_statement__ = 155;
      block_N_responses = context__.vals_i("block_N_responses");
      current_statement__ = 156;
      context__.validate_dims("data initialization",
        "gamma_deviation_prior_type", "int", std::vector<size_t>{});
      gamma_deviation_prior_type = std::numeric_limits<int>::min();
      current_statement__ = 156;
      gamma_deviation_prior_type = context__.vals_i("gamma_deviation_prior_type")[(1
        - 1)];
      current_statement__ = 157;
      context__.validate_dims("data initialization", "gamma_deviation_lower",
        "double", std::vector<size_t>{});
      gamma_deviation_lower = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 157;
      gamma_deviation_lower = context__.vals_r("gamma_deviation_lower")[(1 -
        1)];
      current_statement__ = 157;
      stan::math::check_greater_or_equal(function__, "gamma_deviation_lower",
        gamma_deviation_lower, 0);
      current_statement__ = 158;
      context__.validate_dims("data initialization", "gamma_deviation_upper",
        "double", std::vector<size_t>{});
      gamma_deviation_upper = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 158;
      gamma_deviation_upper = context__.vals_r("gamma_deviation_upper")[(1 -
        1)];
      current_statement__ = 158;
      stan::math::check_greater_or_equal(function__, "gamma_deviation_upper",
        gamma_deviation_upper, 0);
      current_statement__ = 159;
      context__.validate_dims("data initialization", "gamma_deviation_a",
        "double", std::vector<size_t>{});
      gamma_deviation_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 159;
      gamma_deviation_a = context__.vals_r("gamma_deviation_a")[(1 - 1)];
      current_statement__ = 159;
      stan::math::check_greater_or_equal(function__, "gamma_deviation_a",
        gamma_deviation_a, 0);
      current_statement__ = 160;
      context__.validate_dims("data initialization", "gamma_deviation_b",
        "double", std::vector<size_t>{});
      gamma_deviation_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 160;
      gamma_deviation_b = context__.vals_r("gamma_deviation_b")[(1 - 1)];
      current_statement__ = 160;
      stan::math::check_greater_or_equal(function__, "gamma_deviation_b",
        gamma_deviation_b, 0);
      current_statement__ = 161;
      context__.validate_dims("data initialization", "use_parallel", "int",
        std::vector<size_t>{});
      use_parallel = std::numeric_limits<int>::min();
      current_statement__ = 161;
      use_parallel = context__.vals_i("use_parallel")[(1 - 1)];
      current_statement__ = 162;
      context__.validate_dims("data initialization", "grain_size", "int",
        std::vector<size_t>{});
      grain_size = std::numeric_limits<int>::min();
      current_statement__ = 162;
      grain_size = context__.vals_i("grain_size")[(1 - 1)];
      current_statement__ = 162;
      stan::math::check_greater_or_equal(function__, "grain_size",
        grain_size, 1);
      current_statement__ = 163;
      P_mean_total = std::numeric_limits<int>::min();
      current_statement__ = 163;
      P_mean_total = (P_mean_fixed + P_mean_random);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("X_mean", "N", N);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("X_mean", "P_mean_total",
        P_mean_total);
      current_statement__ = 166;
      X_mean_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, P_mean_total,
                        std::numeric_limits<double>::quiet_NaN());
      new (&X_mean)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_mean_data__.data(), N,
        P_mean_total);
      current_statement__ = 166;
      stan::model::assign(X_mean,
        stan::math::append_col(X_mean_fixed, X_mean_random),
        "assigning variable X_mean");
      current_statement__ = 167;
      stan::math::validate_non_negative_index("alpha_Q_mu", "P_mean_total",
        P_mean_total);
      current_statement__ = 168;
      alpha_Q_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(P_mean_total,
                            std::numeric_limits<double>::quiet_NaN());
      new (&alpha_Q_mu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha_Q_mu_data__.data(),
        P_mean_total);
      current_statement__ = 168;
      stan::model::assign(alpha_Q_mu,
        stan::math::rep_vector(0, P_mean_total),
        "assigning variable alpha_Q_mu");
      current_statement__ = 169;
      stan::math::validate_non_negative_index("y_tilde", "N", N);
      current_statement__ = 170;
      y_tilde_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&y_tilde)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(y_tilde_data__.data(), N);
      current_statement__ = 170;
      stan::model::assign(y_tilde,
        stan::math::subtract(y,
          stan::math::multiply(X_mean_fixed, alpha_mean)),
        "assigning variable y_tilde");
      current_statement__ = 171;
      N_block_max = std::numeric_limits<int>::min();
      current_statement__ = 171;
      N_block_max = get_N_block_max(block_last_index, pstream__);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("indices_X_mean_non_zero",
        "P_mean_total", P_mean_total);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("indices_X_mean_non_zero",
        "N_blocks", N_blocks);
      current_statement__ = 174;
      indices_X_mean_non_zero = std::vector<std::vector<int>>(P_mean_total,
                                  std::vector<int>(N_blocks,
                                    std::numeric_limits<int>::min()));
      current_statement__ = 175;
      stan::math::validate_non_negative_index("P_X_mean_non_zero",
        "N_blocks", N_blocks);
      current_statement__ = 176;
      P_X_mean_non_zero = std::vector<int>(N_blocks,
                            std::numeric_limits<int>::min());
      current_statement__ = 177;
      current_block_start_a = std::numeric_limits<int>::min();
      current_statement__ = 177;
      current_block_start_a = 1;
      current_statement__ = 178;
      stan::model::assign(alpha_Q_mu,
        stan::math::multiply(alpha_precision, alpha_mean),
        "assigning variable alpha_Q_mu",
        stan::model::index_min_max(1, P_mean_fixed));
      current_statement__ = 192;
      for (int i = 1; i <= N_blocks; ++i) {
        int N_current_block = std::numeric_limits<int>::min();
        current_statement__ = 179;
        N_current_block = ((stan::model::rvalue(block_last_index,
                              "block_last_index", stan::model::index_uni(i))
          - current_block_start_a) + 1);
        current_statement__ = 180;
        stan::math::validate_non_negative_index("indices_current_block",
          "N_block_max", N_block_max);
        std::vector<int> indices_current_block =
          std::vector<int>(N_block_max, std::numeric_limits<int>::min());
        current_statement__ = 182;
        stan::model::assign(indices_current_block,
          stan::model::rvalue(block_indices, "block_indices",
            stan::model::index_min_max(current_block_start_a,
              stan::model::rvalue(block_last_index, "block_last_index",
                stan::model::index_uni(i)))),
          "assigning variable indices_current_block",
          stan::model::index_min_max(1, N_current_block));
        current_statement__ = 183;
        stan::model::assign(P_X_mean_non_zero, 0,
          "assigning variable P_X_mean_non_zero", stan::model::index_uni(i));
        current_statement__ = 189;
        for (int k = 1; k <= P_mean_total; ++k) {
          current_statement__ = 187;
          if (stan::math::logical_neq(
                stan::math::max(
                  stan::math::fabs(
                    stan::model::rvalue(X_mean, "X_mean",
                      stan::model::index_multi(
                        stan::model::rvalue(indices_current_block,
                          "indices_current_block",
                          stan::model::index_min_max(1, N_current_block))),
                      stan::model::index_uni(k)))), 0)) {
            current_statement__ = 184;
            stan::model::assign(P_X_mean_non_zero,
              (stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                 stan::model::index_uni(i)) + 1),
              "assigning variable P_X_mean_non_zero",
              stan::model::index_uni(i));
            current_statement__ = 185;
            stan::model::assign(indices_X_mean_non_zero, k,
              "assigning variable indices_X_mean_non_zero",
              stan::model::index_uni(
                stan::model::rvalue(P_X_mean_non_zero, "P_X_mean_non_zero",
                  stan::model::index_uni(i))), stan::model::index_uni(i));
          }
        }
        current_statement__ = 190;
        current_block_start_a = (stan::model::rvalue(block_last_index,
                                   "block_last_index",
                                   stan::model::index_uni(i))
          + 1);
      }
      current_statement__ = 193;
      stan::math::validate_non_negative_index("eta_deviation",
        "P_deviation_fixed", P_deviation_fixed);
      current_statement__ = 194;
      stan::math::validate_non_negative_index("zeta_deviation",
        "P_deviation_random", P_deviation_random);
      current_statement__ = 195;
      stan::math::validate_non_negative_index("gamma_deviation_vertical",
        "P_deviation_warping", P_deviation_warping);
      current_statement__ = 196;
      stan::math::validate_non_negative_index("alpha_beta_hat",
        "P_mean_total", P_mean_total);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + P_deviation_fixed + P_deviation_random + 1 + 1 +
      P_deviation_warping;
  }
  inline std::string model_name() const final {
    return "model_vertical_only";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_vertical_only_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ tau_squared_mean_random = DUMMY_VAR__;
      current_statement__ = 1;
      tau_squared_mean_random = in__.template read_constrain_lb<
                                  local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ sigma_squared_nugget = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_squared_nugget = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_deviation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_fixed,
          DUMMY_VAR__);
      current_statement__ = 3;
      eta_deviation = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(P_deviation_fixed);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_deviation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_random,
          DUMMY_VAR__);
      current_statement__ = 4;
      zeta_deviation = in__.template read<
                         Eigen::Matrix<local_scalar_t__,-1,1>>(P_deviation_random);
      local_scalar_t__ ell_deviation_random = DUMMY_VAR__;
      current_statement__ = 5;
      ell_deviation_random = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ tau_squared_deviation_random = DUMMY_VAR__;
      current_statement__ = 6;
      tau_squared_deviation_random = in__.template read_constrain_lb<
                                       local_scalar_t__, jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_deviation_vertical =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_warping,
          DUMMY_VAR__);
      current_statement__ = 7;
      gamma_deviation_vertical = in__.template read_constrain_lub<
                                   Eigen::Matrix<local_scalar_t__,-1,1>,
                                   jacobian__>(gamma_deviation_lower,
                                   gamma_deviation_upper, lp__,
                                   P_deviation_warping);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_beta_hat =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_mean_total,
          DUMMY_VAR__);
      local_scalar_t__ log_marginal = DUMMY_VAR__;
      {
        current_statement__ = 10;
        stan::math::validate_non_negative_index("x_vertical_warped", "N", N);
        std::vector<local_scalar_t__> x_vertical_warped =
          std::vector<local_scalar_t__>(N, DUMMY_VAR__);
        local_scalar_t__ log_det = DUMMY_VAR__;
        current_statement__ = 12;
        log_det = 0;
        local_scalar_t__ y_tildet_Q_y_tilde = DUMMY_VAR__;
        current_statement__ = 13;
        y_tildet_Q_y_tilde = 0;
        current_statement__ = 14;
        stan::math::validate_non_negative_index("Xt_Q_X", "P_mean_total",
          P_mean_total);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("Xt_Q_X", "P_mean_total",
          P_mean_total);
        Eigen::Matrix<local_scalar_t__,-1,-1> Xt_Q_X =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P_mean_total,
            P_mean_total, DUMMY_VAR__);
        current_statement__ = 16;
        stan::model::assign(Xt_Q_X,
          stan::math::rep_matrix(0, P_mean_total, P_mean_total),
          "assigning variable Xt_Q_X");
        current_statement__ = 17;
        stan::math::validate_non_negative_index("Xt_Q_y", "P_mean_total",
          P_mean_total);
        Eigen::Matrix<local_scalar_t__,-1,1> Xt_Q_y =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_mean_total,
            DUMMY_VAR__);
        current_statement__ = 18;
        stan::model::assign(Xt_Q_y, stan::math::rep_vector(0, P_mean_total),
          "assigning variable Xt_Q_y");
        current_statement__ = 19;
        stan::math::validate_non_negative_index("Xt_Q_y_tilde",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__,-1,1> Xt_Q_y_tilde =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_mean_total,
            DUMMY_VAR__);
        current_statement__ = 20;
        stan::model::assign(Xt_Q_y_tilde,
          stan::math::rep_vector(0, P_mean_total),
          "assigning variable Xt_Q_y_tilde");
        current_statement__ = 21;
        stan::math::validate_non_negative_index("alpha_beta_prior_precision",
          "P_mean_total", P_mean_total);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("alpha_beta_prior_precision",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__,-1,-1> alpha_beta_prior_precision =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P_mean_total,
            P_mean_total, DUMMY_VAR__);
        current_statement__ = 23;
        stan::model::assign(alpha_beta_prior_precision,
          stan::math::rep_matrix(0, P_mean_total, P_mean_total),
          "assigning variable alpha_beta_prior_precision");
        current_statement__ = 24;
        stan::math::validate_non_negative_index("L_alpha_beta_precision",
          "P_mean_total", P_mean_total);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("L_alpha_beta_precision",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_alpha_beta_precision =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P_mean_total,
            P_mean_total, DUMMY_VAR__);
        current_statement__ = 27;
        stan::math::validate_non_negative_index(
          "L_alpha_beta_prior_precision", "P_mean_total", P_mean_total);
        current_statement__ = 28;
        stan::math::validate_non_negative_index(
          "L_alpha_beta_prior_precision", "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_alpha_beta_prior_precision =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P_mean_total,
            P_mean_total, DUMMY_VAR__);
        current_statement__ = 30;
        stan::math::validate_non_negative_index("alpha_beta_precision",
          "P_mean_total", P_mean_total);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("alpha_beta_precision",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__,-1,-1> alpha_beta_precision =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P_mean_total,
            P_mean_total, DUMMY_VAR__);
        current_statement__ = 33;
        stan::math::validate_non_negative_index("alpha_beta_rhs",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__,-1,1> alpha_beta_rhs =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_mean_total,
            DUMMY_VAR__);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("deviation_log_variance",
          "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> deviation_log_variance =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 37;
        stan::math::validate_non_negative_index("deviation_sd", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> deviation_sd =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 39;
        stan::math::validate_non_negative_index("components",
          "2 + P_mean_total * P_mean_total + 2 * P_mean_total", ((2 +
          (P_mean_total * P_mean_total)) + (2 * P_mean_total)));
        Eigen::Matrix<local_scalar_t__,-1,1> components =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((2 + (P_mean_total
            * P_mean_total)) + (2 * P_mean_total)), DUMMY_VAR__);
        current_statement__ = 41;
        stan::model::assign(deviation_log_variance,
          stan::math::multiply(X_deviation_fixed, eta_deviation),
          "assigning variable deviation_log_variance");
        current_statement__ = 44;
        if (stan::math::logical_gt(P_deviation_random, 0)) {
          current_statement__ = 42;
          stan::model::assign(deviation_log_variance,
            stan::math::add(stan::model::deep_copy(deviation_log_variance),
              stan::math::multiply(X_deviation_random, zeta_deviation)),
            "assigning variable deviation_log_variance");
        }
        current_statement__ = 45;
        stan::model::assign(deviation_sd,
          stan::math::exp(stan::math::multiply(0.5, deviation_log_variance)),
          "assigning variable deviation_sd");
        current_statement__ = 48;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 46;
          stan::model::assign(x_vertical_warped,
            stan::math::multiply(
              stan::model::rvalue(X_deviation_warping, "X_deviation_warping",
                stan::model::index_uni(i), stan::model::index_omni()),
              stan::math::cumulative_sum(gamma_deviation_vertical)),
            "assigning variable x_vertical_warped", stan::model::index_uni(i));
        }
        current_statement__ = 53;
        if (stan::math::logical_gt(use_parallel, 0)) {
          current_statement__ = 51;
          stan::model::assign(components,
            geowarp_vecchia_reduce_sum_vertical_only(1, N_blocks, grain_size,
              x_vertical_warped, sigma_squared_nugget, deviation_sd, y,
              y_tilde, X_mean, block_indices, block_last_index,
              block_N_responses, indices_X_mean_non_zero, P_X_mean_non_zero,
              N_block_max, smoothness, pstream__),
            "assigning variable components");
        } else {
          current_statement__ = 49;
          stan::model::assign(components,
            geowarp_vecchia_partial_sums_vertical_only(1, N_blocks,
              x_vertical_warped, sigma_squared_nugget, deviation_sd, y,
              y_tilde, X_mean, block_indices, block_last_index,
              block_N_responses, indices_X_mean_non_zero, P_X_mean_non_zero,
              N_block_max, smoothness, pstream__),
            "assigning variable components");
        }
        current_statement__ = 54;
        log_det = stan::model::rvalue(components, "components",
                    stan::model::index_uni(1));
        current_statement__ = 55;
        y_tildet_Q_y_tilde = stan::model::rvalue(components, "components",
                               stan::model::index_uni(2));
        current_statement__ = 56;
        stan::model::assign(Xt_Q_X,
          stan::math::to_matrix(
            stan::model::rvalue(components, "components",
              stan::model::index_min_max(3, (2 + (P_mean_total *
                P_mean_total)))), P_mean_total, P_mean_total),
          "assigning variable Xt_Q_X");
        current_statement__ = 57;
        stan::model::assign(Xt_Q_y,
          stan::model::rvalue(components, "components",
            stan::model::index_min_max((3 + (P_mean_total * P_mean_total)),
              ((2 + (P_mean_total * P_mean_total)) + P_mean_total))),
          "assigning variable Xt_Q_y");
        current_statement__ = 58;
        stan::model::assign(Xt_Q_y_tilde,
          stan::model::rvalue(components, "components",
            stan::model::index_min(((3 + (P_mean_total * P_mean_total)) +
              P_mean_total))), "assigning variable Xt_Q_y_tilde");
        current_statement__ = 59;
        stan::model::assign(alpha_beta_prior_precision, alpha_precision,
          "assigning variable alpha_beta_prior_precision",
          stan::model::index_min_max(1, P_mean_fixed),
          stan::model::index_min_max(1, P_mean_fixed));
        current_statement__ = 62;
        if (stan::math::logical_gt(P_mean_total, P_mean_fixed)) {
          current_statement__ = 60;
          stan::model::assign(alpha_beta_prior_precision,
            rw1d_precision(P_mean_random, tau_squared_mean_random, pstream__),
            "assigning variable alpha_beta_prior_precision",
            stan::model::index_min_max((P_mean_fixed + 1), P_mean_total),
            stan::model::index_min_max((P_mean_fixed + 1), P_mean_total));
        }
        current_statement__ = 63;
        stan::model::assign(alpha_beta_precision,
          stan::math::add(Xt_Q_X, alpha_beta_prior_precision),
          "assigning variable alpha_beta_precision");
        current_statement__ = 64;
        stan::model::assign(L_alpha_beta_prior_precision,
          stan::math::cholesky_decompose(alpha_beta_prior_precision),
          "assigning variable L_alpha_beta_prior_precision");
        current_statement__ = 65;
        stan::model::assign(L_alpha_beta_precision,
          stan::math::cholesky_decompose(alpha_beta_precision),
          "assigning variable L_alpha_beta_precision");
        current_statement__ = 66;
        stan::model::assign(alpha_beta_rhs,
          stan::math::add(Xt_Q_y, alpha_Q_mu),
          "assigning variable alpha_beta_rhs");
        current_statement__ = 67;
        stan::model::assign(alpha_beta_hat,
          chol_solve_L_b(L_alpha_beta_precision, alpha_beta_rhs, pstream__),
          "assigning variable alpha_beta_hat");
        current_statement__ = 68;
        log_marginal = (-0.5 * (((((2 *
          stan::math::sum(
            stan::math::log(stan::math::diagonal(L_alpha_beta_precision))))
          - (2 *
          stan::math::sum(
            stan::math::log(
              stan::math::diagonal(L_alpha_beta_prior_precision)))))
          + log_det) + y_tildet_Q_y_tilde) -
          stan::math::sum(
            stan::math::square(
              stan::math::mdivide_left_tri_low(L_alpha_beta_precision,
                Xt_Q_y_tilde)))));
      }
      {
        current_statement__ = 70;
        lp_accum__.add(log_marginal);
        current_statement__ = 75;
        if (stan::math::logical_gt(tau_squared_mean_random_b, 0)) {
          current_statement__ = 73;
          lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                           tau_squared_mean_random,
                           tau_squared_mean_random_a,
                           tau_squared_mean_random_b));
        } else {
          current_statement__ = 71;
          lp_accum__.add(-stan::math::log(tau_squared_mean_random));
        }
        current_statement__ = 80;
        if (stan::math::logical_gt(sigma_squared_nugget_b, 0)) {
          current_statement__ = 78;
          lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                           sigma_squared_nugget, sigma_squared_nugget_a,
                           sigma_squared_nugget_b));
        } else {
          current_statement__ = 76;
          lp_accum__.add(-stan::math::log(sigma_squared_nugget));
        }
        current_statement__ = 81;
        lp_accum__.add(stan::math::multi_normal_prec_lpdf<propto__>(
                         eta_deviation, eta_deviation_mean,
                         eta_deviation_precision));
        current_statement__ = 84;
        if (stan::math::logical_gt(P_deviation_random, 0)) {
          current_statement__ = 82;
          lp_accum__.add(stan::math::multi_normal_prec_lpdf<propto__>(
                           zeta_deviation,
                           stan::math::rep_vector(0, P_deviation_random),
                           exp1d_precision(P_deviation_random,
                             delta_deviation_random, ell_deviation_random,
                             tau_squared_deviation_random, pstream__)));
        }
        current_statement__ = 87;
        if (stan::math::logical_gt(ell_deviation_random_scale, 0)) {
          current_statement__ = 85;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           ell_deviation_random, 0,
                           ell_deviation_random_scale));
        }
        current_statement__ = 92;
        if (stan::math::logical_gt(tau_squared_deviation_random_b, 0)) {
          current_statement__ = 90;
          lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                           tau_squared_deviation_random,
                           tau_squared_deviation_random_a,
                           tau_squared_deviation_random_b));
        } else {
          current_statement__ = 88;
          lp_accum__.add(-stan::math::log(tau_squared_deviation_random));
        }
        current_statement__ = 100;
        if (stan::math::logical_eq(gamma_deviation_prior_type, 1)) {
          current_statement__ = 98;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           gamma_deviation_vertical, gamma_deviation_a,
                           gamma_deviation_b));
        } else {
          current_statement__ = 97;
          if (stan::math::logical_eq(gamma_deviation_prior_type, 2)) {
            current_statement__ = 95;
            lp_accum__.add((-2.0 *
              stan::math::sum(stan::math::log(gamma_deviation_vertical))));
          } else {
            current_statement__ = 93;
            lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                             gamma_deviation_vertical, gamma_deviation_lower,
                             gamma_deviation_upper));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_vertical_only_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double tau_squared_mean_random =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      tau_squared_mean_random = in__.template read_constrain_lb<
                                  local_scalar_t__, jacobian__>(0, lp__);
      double sigma_squared_nugget = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_squared_nugget = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> eta_deviation =
        Eigen::Matrix<double,-1,1>::Constant(P_deviation_fixed,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      eta_deviation = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(P_deviation_fixed);
      Eigen::Matrix<double,-1,1> zeta_deviation =
        Eigen::Matrix<double,-1,1>::Constant(P_deviation_random,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      zeta_deviation = in__.template read<
                         Eigen::Matrix<local_scalar_t__,-1,1>>(P_deviation_random);
      double ell_deviation_random = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      ell_deviation_random = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(0, lp__);
      double tau_squared_deviation_random =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      tau_squared_deviation_random = in__.template read_constrain_lb<
                                       local_scalar_t__, jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> gamma_deviation_vertical =
        Eigen::Matrix<double,-1,1>::Constant(P_deviation_warping,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      gamma_deviation_vertical = in__.template read_constrain_lub<
                                   Eigen::Matrix<local_scalar_t__,-1,1>,
                                   jacobian__>(gamma_deviation_lower,
                                   gamma_deviation_upper, lp__,
                                   P_deviation_warping);
      Eigen::Matrix<double,-1,1> alpha_beta_hat =
        Eigen::Matrix<double,-1,1>::Constant(P_mean_total,
          std::numeric_limits<double>::quiet_NaN());
      double log_marginal = std::numeric_limits<double>::quiet_NaN();
      out__.write(tau_squared_mean_random);
      out__.write(sigma_squared_nugget);
      out__.write(eta_deviation);
      out__.write(zeta_deviation);
      out__.write(ell_deviation_random);
      out__.write(tau_squared_deviation_random);
      out__.write(gamma_deviation_vertical);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        current_statement__ = 10;
        stan::math::validate_non_negative_index("x_vertical_warped", "N", N);
        std::vector<double> x_vertical_warped =
          std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
        double log_det = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 12;
        log_det = 0;
        double y_tildet_Q_y_tilde = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 13;
        y_tildet_Q_y_tilde = 0;
        current_statement__ = 14;
        stan::math::validate_non_negative_index("Xt_Q_X", "P_mean_total",
          P_mean_total);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("Xt_Q_X", "P_mean_total",
          P_mean_total);
        Eigen::Matrix<double,-1,-1> Xt_Q_X =
          Eigen::Matrix<double,-1,-1>::Constant(P_mean_total, P_mean_total,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 16;
        stan::model::assign(Xt_Q_X,
          stan::math::rep_matrix(0, P_mean_total, P_mean_total),
          "assigning variable Xt_Q_X");
        current_statement__ = 17;
        stan::math::validate_non_negative_index("Xt_Q_y", "P_mean_total",
          P_mean_total);
        Eigen::Matrix<double,-1,1> Xt_Q_y =
          Eigen::Matrix<double,-1,1>::Constant(P_mean_total,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 18;
        stan::model::assign(Xt_Q_y, stan::math::rep_vector(0, P_mean_total),
          "assigning variable Xt_Q_y");
        current_statement__ = 19;
        stan::math::validate_non_negative_index("Xt_Q_y_tilde",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<double,-1,1> Xt_Q_y_tilde =
          Eigen::Matrix<double,-1,1>::Constant(P_mean_total,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 20;
        stan::model::assign(Xt_Q_y_tilde,
          stan::math::rep_vector(0, P_mean_total),
          "assigning variable Xt_Q_y_tilde");
        current_statement__ = 21;
        stan::math::validate_non_negative_index("alpha_beta_prior_precision",
          "P_mean_total", P_mean_total);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("alpha_beta_prior_precision",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<double,-1,-1> alpha_beta_prior_precision =
          Eigen::Matrix<double,-1,-1>::Constant(P_mean_total, P_mean_total,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 23;
        stan::model::assign(alpha_beta_prior_precision,
          stan::math::rep_matrix(0, P_mean_total, P_mean_total),
          "assigning variable alpha_beta_prior_precision");
        current_statement__ = 24;
        stan::math::validate_non_negative_index("L_alpha_beta_precision",
          "P_mean_total", P_mean_total);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("L_alpha_beta_precision",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<double,-1,-1> L_alpha_beta_precision =
          Eigen::Matrix<double,-1,-1>::Constant(P_mean_total, P_mean_total,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 27;
        stan::math::validate_non_negative_index(
          "L_alpha_beta_prior_precision", "P_mean_total", P_mean_total);
        current_statement__ = 28;
        stan::math::validate_non_negative_index(
          "L_alpha_beta_prior_precision", "P_mean_total", P_mean_total);
        Eigen::Matrix<double,-1,-1> L_alpha_beta_prior_precision =
          Eigen::Matrix<double,-1,-1>::Constant(P_mean_total, P_mean_total,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 30;
        stan::math::validate_non_negative_index("alpha_beta_precision",
          "P_mean_total", P_mean_total);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("alpha_beta_precision",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<double,-1,-1> alpha_beta_precision =
          Eigen::Matrix<double,-1,-1>::Constant(P_mean_total, P_mean_total,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 33;
        stan::math::validate_non_negative_index("alpha_beta_rhs",
          "P_mean_total", P_mean_total);
        Eigen::Matrix<double,-1,1> alpha_beta_rhs =
          Eigen::Matrix<double,-1,1>::Constant(P_mean_total,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 35;
        stan::math::validate_non_negative_index("deviation_log_variance",
          "N", N);
        Eigen::Matrix<double,-1,1> deviation_log_variance =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 37;
        stan::math::validate_non_negative_index("deviation_sd", "N", N);
        Eigen::Matrix<double,-1,1> deviation_sd =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 39;
        stan::math::validate_non_negative_index("components",
          "2 + P_mean_total * P_mean_total + 2 * P_mean_total", ((2 +
          (P_mean_total * P_mean_total)) + (2 * P_mean_total)));
        Eigen::Matrix<double,-1,1> components =
          Eigen::Matrix<double,-1,1>::Constant(((2 + (P_mean_total *
            P_mean_total)) + (2 * P_mean_total)),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 41;
        stan::model::assign(deviation_log_variance,
          stan::math::multiply(X_deviation_fixed, eta_deviation),
          "assigning variable deviation_log_variance");
        current_statement__ = 44;
        if (stan::math::logical_gt(P_deviation_random, 0)) {
          current_statement__ = 42;
          stan::model::assign(deviation_log_variance,
            stan::math::add(stan::model::deep_copy(deviation_log_variance),
              stan::math::multiply(X_deviation_random, zeta_deviation)),
            "assigning variable deviation_log_variance");
        }
        current_statement__ = 45;
        stan::model::assign(deviation_sd,
          stan::math::exp(stan::math::multiply(0.5, deviation_log_variance)),
          "assigning variable deviation_sd");
        current_statement__ = 48;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 46;
          stan::model::assign(x_vertical_warped,
            stan::math::multiply(
              stan::model::rvalue(X_deviation_warping, "X_deviation_warping",
                stan::model::index_uni(i), stan::model::index_omni()),
              stan::math::cumulative_sum(gamma_deviation_vertical)),
            "assigning variable x_vertical_warped", stan::model::index_uni(i));
        }
        current_statement__ = 53;
        if (stan::math::logical_gt(use_parallel, 0)) {
          current_statement__ = 51;
          stan::model::assign(components,
            geowarp_vecchia_reduce_sum_vertical_only(1, N_blocks, grain_size,
              x_vertical_warped, sigma_squared_nugget, deviation_sd, y,
              y_tilde, X_mean, block_indices, block_last_index,
              block_N_responses, indices_X_mean_non_zero, P_X_mean_non_zero,
              N_block_max, smoothness, pstream__),
            "assigning variable components");
        } else {
          current_statement__ = 49;
          stan::model::assign(components,
            geowarp_vecchia_partial_sums_vertical_only(1, N_blocks,
              x_vertical_warped, sigma_squared_nugget, deviation_sd, y,
              y_tilde, X_mean, block_indices, block_last_index,
              block_N_responses, indices_X_mean_non_zero, P_X_mean_non_zero,
              N_block_max, smoothness, pstream__),
            "assigning variable components");
        }
        current_statement__ = 54;
        log_det = stan::model::rvalue(components, "components",
                    stan::model::index_uni(1));
        current_statement__ = 55;
        y_tildet_Q_y_tilde = stan::model::rvalue(components, "components",
                               stan::model::index_uni(2));
        current_statement__ = 56;
        stan::model::assign(Xt_Q_X,
          stan::math::to_matrix(
            stan::model::rvalue(components, "components",
              stan::model::index_min_max(3, (2 + (P_mean_total *
                P_mean_total)))), P_mean_total, P_mean_total),
          "assigning variable Xt_Q_X");
        current_statement__ = 57;
        stan::model::assign(Xt_Q_y,
          stan::model::rvalue(components, "components",
            stan::model::index_min_max((3 + (P_mean_total * P_mean_total)),
              ((2 + (P_mean_total * P_mean_total)) + P_mean_total))),
          "assigning variable Xt_Q_y");
        current_statement__ = 58;
        stan::model::assign(Xt_Q_y_tilde,
          stan::model::rvalue(components, "components",
            stan::model::index_min(((3 + (P_mean_total * P_mean_total)) +
              P_mean_total))), "assigning variable Xt_Q_y_tilde");
        current_statement__ = 59;
        stan::model::assign(alpha_beta_prior_precision, alpha_precision,
          "assigning variable alpha_beta_prior_precision",
          stan::model::index_min_max(1, P_mean_fixed),
          stan::model::index_min_max(1, P_mean_fixed));
        current_statement__ = 62;
        if (stan::math::logical_gt(P_mean_total, P_mean_fixed)) {
          current_statement__ = 60;
          stan::model::assign(alpha_beta_prior_precision,
            rw1d_precision(P_mean_random, tau_squared_mean_random, pstream__),
            "assigning variable alpha_beta_prior_precision",
            stan::model::index_min_max((P_mean_fixed + 1), P_mean_total),
            stan::model::index_min_max((P_mean_fixed + 1), P_mean_total));
        }
        current_statement__ = 63;
        stan::model::assign(alpha_beta_precision,
          stan::math::add(Xt_Q_X, alpha_beta_prior_precision),
          "assigning variable alpha_beta_precision");
        current_statement__ = 64;
        stan::model::assign(L_alpha_beta_prior_precision,
          stan::math::cholesky_decompose(alpha_beta_prior_precision),
          "assigning variable L_alpha_beta_prior_precision");
        current_statement__ = 65;
        stan::model::assign(L_alpha_beta_precision,
          stan::math::cholesky_decompose(alpha_beta_precision),
          "assigning variable L_alpha_beta_precision");
        current_statement__ = 66;
        stan::model::assign(alpha_beta_rhs,
          stan::math::add(Xt_Q_y, alpha_Q_mu),
          "assigning variable alpha_beta_rhs");
        current_statement__ = 67;
        stan::model::assign(alpha_beta_hat,
          chol_solve_L_b(L_alpha_beta_precision, alpha_beta_rhs, pstream__),
          "assigning variable alpha_beta_hat");
        current_statement__ = 68;
        log_marginal = (-0.5 * (((((2 *
          stan::math::sum(
            stan::math::log(stan::math::diagonal(L_alpha_beta_precision))))
          - (2 *
          stan::math::sum(
            stan::math::log(
              stan::math::diagonal(L_alpha_beta_prior_precision)))))
          + log_det) + y_tildet_Q_y_tilde) -
          stan::math::sum(
            stan::math::square(
              stan::math::mdivide_left_tri_low(L_alpha_beta_precision,
                Xt_Q_y_tilde)))));
      }
      if (emit_transformed_parameters__) {
        out__.write(alpha_beta_hat);
        out__.write(log_marginal);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ tau_squared_mean_random = DUMMY_VAR__;
      current_statement__ = 1;
      tau_squared_mean_random = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_squared_mean_random);
      local_scalar_t__ sigma_squared_nugget = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_squared_nugget = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_squared_nugget);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_deviation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_fixed,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(eta_deviation,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(P_deviation_fixed),
        "assigning variable eta_deviation");
      out__.write(eta_deviation);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_deviation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_random,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(zeta_deviation,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(P_deviation_random),
        "assigning variable zeta_deviation");
      out__.write(zeta_deviation);
      local_scalar_t__ ell_deviation_random = DUMMY_VAR__;
      current_statement__ = 5;
      ell_deviation_random = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, ell_deviation_random);
      local_scalar_t__ tau_squared_deviation_random = DUMMY_VAR__;
      current_statement__ = 6;
      tau_squared_deviation_random = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_squared_deviation_random);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_deviation_vertical =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_warping,
          DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(gamma_deviation_vertical,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(P_deviation_warping),
        "assigning variable gamma_deviation_vertical");
      out__.write_free_lub(gamma_deviation_lower, gamma_deviation_upper,
        gamma_deviation_vertical);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization",
        "tau_squared_mean_random", "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization",
        "sigma_squared_nugget", "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "eta_deviation",
        "double",
        std::vector<size_t>{static_cast<size_t>(P_deviation_fixed)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "zeta_deviation",
        "double",
        std::vector<size_t>{static_cast<size_t>(P_deviation_random)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "ell_deviation_random", "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization",
        "tau_squared_deviation_random", "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "gamma_deviation_vertical", "double",
        std::vector<size_t>{static_cast<size_t>(P_deviation_warping)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ tau_squared_mean_random = DUMMY_VAR__;
      current_statement__ = 1;
      tau_squared_mean_random = context__.vals_r("tau_squared_mean_random")[(1
        - 1)];
      out__.write_free_lb(0, tau_squared_mean_random);
      local_scalar_t__ sigma_squared_nugget = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_squared_nugget = context__.vals_r("sigma_squared_nugget")[(1 -
        1)];
      out__.write_free_lb(0, sigma_squared_nugget);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_deviation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_fixed,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eta_deviation_flat__;
        current_statement__ = 3;
        eta_deviation_flat__ = context__.vals_r("eta_deviation");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(eta_deviation, eta_deviation_flat__[(pos__ -
            1)], "assigning variable eta_deviation",
            stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eta_deviation);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_deviation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_random,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zeta_deviation_flat__;
        current_statement__ = 4;
        zeta_deviation_flat__ = context__.vals_r("zeta_deviation");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(zeta_deviation, zeta_deviation_flat__[(pos__ -
            1)], "assigning variable zeta_deviation",
            stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(zeta_deviation);
      local_scalar_t__ ell_deviation_random = DUMMY_VAR__;
      current_statement__ = 5;
      ell_deviation_random = context__.vals_r("ell_deviation_random")[(1 -
        1)];
      out__.write_free_lb(0, ell_deviation_random);
      local_scalar_t__ tau_squared_deviation_random = DUMMY_VAR__;
      current_statement__ = 6;
      tau_squared_deviation_random = context__.vals_r("tau_squared_deviation_random")[(1
        - 1)];
      out__.write_free_lb(0, tau_squared_deviation_random);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_deviation_vertical =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P_deviation_warping,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_deviation_vertical_flat__;
        current_statement__ = 7;
        gamma_deviation_vertical_flat__ = context__.vals_r("gamma_deviation_vertical");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(gamma_deviation_vertical,
            gamma_deviation_vertical_flat__[(pos__ - 1)],
            "assigning variable gamma_deviation_vertical",
            stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(gamma_deviation_lower, gamma_deviation_upper,
        gamma_deviation_vertical);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"tau_squared_mean_random",
                "sigma_squared_nugget", "eta_deviation", "zeta_deviation",
                "ell_deviation_random", "tau_squared_deviation_random",
                "gamma_deviation_vertical"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"alpha_beta_hat", "log_marginal"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(P_deviation_fixed)},
                std::vector<size_t>{static_cast<size_t>(P_deviation_random)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(P_deviation_warping)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(P_mean_total)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "tau_squared_mean_random");
    param_names__.emplace_back(std::string() + "sigma_squared_nugget");
    for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta_deviation" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_deviation" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "ell_deviation_random");
    param_names__.emplace_back(std::string() +
      "tau_squared_deviation_random");
    for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_deviation_vertical" +
        '.' + std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= P_mean_total; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha_beta_hat" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_marginal");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "tau_squared_mean_random");
    param_names__.emplace_back(std::string() + "sigma_squared_nugget");
    for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta_deviation" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_deviation" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "ell_deviation_random");
    param_names__.emplace_back(std::string() +
      "tau_squared_deviation_random");
    for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_deviation_vertical" +
        '.' + std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= P_mean_total; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha_beta_hat" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_marginal");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"tau_squared_mean_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_squared_nugget\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta_deviation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P_deviation_fixed) + "},\"block\":\"parameters\"},{\"name\":\"zeta_deviation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P_deviation_random) + "},\"block\":\"parameters\"},{\"name\":\"ell_deviation_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_squared_deviation_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_deviation_vertical\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P_deviation_warping) + "},\"block\":\"parameters\"},{\"name\":\"alpha_beta_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P_mean_total) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_marginal\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"tau_squared_mean_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_squared_nugget\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta_deviation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P_deviation_fixed) + "},\"block\":\"parameters\"},{\"name\":\"zeta_deviation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P_deviation_random) + "},\"block\":\"parameters\"},{\"name\":\"ell_deviation_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_squared_deviation_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_deviation_vertical\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P_deviation_warping) + "},\"block\":\"parameters\"},{\"name\":\"alpha_beta_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P_mean_total) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_marginal\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + 1) + P_deviation_fixed) +
      P_deviation_random) + 1) + 1) + P_deviation_warping);
    const size_t num_transformed = emit_transformed_parameters *
      ((P_mean_total + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + 1) + P_deviation_fixed) +
      P_deviation_random) + 1) + 1) + P_deviation_warping);
    const size_t num_transformed = emit_transformed_parameters *
      ((P_mean_total + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_vertical_only_namespace::model_vertical_only;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_vertical_only_namespace::profiles__;
}
#endif
#endif
