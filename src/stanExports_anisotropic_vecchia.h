// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_anisotropic_vecchia_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_anisotropic_vecchia");
    reader.add_event(1, 1, "include", "include/functions.stan");
    reader.add_event(1, 0, "start", "include/functions.stan");
    reader.add_event(141, 140, "end", "include/functions.stan");
    reader.add_event(141, 2, "restart", "model_anisotropic_vecchia");
    reader.add_event(143, 4, "include", "include/data_start.stan");
    reader.add_event(143, 0, "start", "include/data_start.stan");
    reader.add_event(161, 18, "end", "include/data_start.stan");
    reader.add_event(161, 5, "restart", "model_anisotropic_vecchia");
    reader.add_event(161, 5, "include", "include/data_deviation_start.stan");
    reader.add_event(161, 0, "start", "include/data_deviation_start.stan");
    reader.add_event(174, 13, "end", "include/data_deviation_start.stan");
    reader.add_event(174, 6, "restart", "model_anisotropic_vecchia");
    reader.add_event(186, 18, "include", "include/transformed_data_vecchia.stan");
    reader.add_event(186, 0, "start", "include/transformed_data_vecchia.stan");
    reader.add_event(186, 0, "include", "include/transformed_data_declarations.stan");
    reader.add_event(186, 0, "start", "include/transformed_data_declarations.stan");
    reader.add_event(190, 4, "end", "include/transformed_data_declarations.stan");
    reader.add_event(190, 1, "restart", "include/transformed_data_vecchia.stan");
    reader.add_event(197, 8, "include", "include/transformed_data_statements.stan");
    reader.add_event(197, 0, "start", "include/transformed_data_statements.stan");
    reader.add_event(198, 1, "end", "include/transformed_data_statements.stan");
    reader.add_event(198, 9, "restart", "include/transformed_data_vecchia.stan");
    reader.add_event(223, 34, "end", "include/transformed_data_vecchia.stan");
    reader.add_event(223, 19, "restart", "model_anisotropic_vecchia");
    reader.add_event(225, 21, "include", "include/parameters_start.stan");
    reader.add_event(225, 0, "start", "include/parameters_start.stan");
    reader.add_event(229, 4, "end", "include/parameters_start.stan");
    reader.add_event(229, 22, "restart", "model_anisotropic_vecchia");
    reader.add_event(229, 22, "include", "include/parameters_deviation_start.stan");
    reader.add_event(229, 0, "start", "include/parameters_deviation_start.stan");
    reader.add_event(234, 5, "end", "include/parameters_deviation_start.stan");
    reader.add_event(234, 23, "restart", "model_anisotropic_vecchia");
    reader.add_event(239, 28, "include", "include/transformed_parameters_outer_start.stan");
    reader.add_event(239, 0, "start", "include/transformed_parameters_outer_start.stan");
    reader.add_event(241, 2, "end", "include/transformed_parameters_outer_start.stan");
    reader.add_event(241, 29, "restart", "model_anisotropic_vecchia");
    reader.add_event(245, 33, "include", "include/transformed_parameters_inner_start.stan");
    reader.add_event(245, 0, "start", "include/transformed_parameters_inner_start.stan");
    reader.add_event(256, 11, "end", "include/transformed_parameters_inner_start.stan");
    reader.add_event(256, 34, "restart", "model_anisotropic_vecchia");
    reader.add_event(256, 34, "include", "include/transformed_parameters_inner_deviation_vecchia_start.stan");
    reader.add_event(256, 0, "start", "include/transformed_parameters_inner_deviation_vecchia_start.stan");
    reader.add_event(273, 17, "end", "include/transformed_parameters_inner_deviation_vecchia_start.stan");
    reader.add_event(273, 35, "restart", "model_anisotropic_vecchia");
    reader.add_event(283, 45, "include", "include/transformed_parameters_inner_deviation_vecchia_block_start.stan");
    reader.add_event(283, 0, "start", "include/transformed_parameters_inner_deviation_vecchia_block_start.stan");
    reader.add_event(289, 6, "end", "include/transformed_parameters_inner_deviation_vecchia_block_start.stan");
    reader.add_event(289, 46, "restart", "model_anisotropic_vecchia");
    reader.add_event(296, 53, "include", "include/transformed_parameters_inner_deviation_vecchia_block_end.stan");
    reader.add_event(296, 0, "start", "include/transformed_parameters_inner_deviation_vecchia_block_end.stan");
    reader.add_event(347, 51, "end", "include/transformed_parameters_inner_deviation_vecchia_block_end.stan");
    reader.add_event(347, 54, "restart", "model_anisotropic_vecchia");
    reader.add_event(349, 56, "include", "include/transformed_parameters_inner_end.stan");
    reader.add_event(349, 0, "start", "include/transformed_parameters_inner_end.stan");
    reader.add_event(376, 27, "end", "include/transformed_parameters_inner_end.stan");
    reader.add_event(376, 57, "restart", "model_anisotropic_vecchia");
    reader.add_event(379, 60, "include", "include/model_start.stan");
    reader.add_event(379, 0, "start", "include/model_start.stan");
    reader.add_event(393, 14, "end", "include/model_start.stan");
    reader.add_event(393, 61, "restart", "model_anisotropic_vecchia");
    reader.add_event(393, 61, "include", "include/model_deviation_start.stan");
    reader.add_event(393, 0, "start", "include/model_deviation_start.stan");
    reader.add_event(442, 49, "end", "include/model_deviation_start.stan");
    reader.add_event(442, 62, "restart", "model_anisotropic_vecchia");
    reader.add_event(454, 74, "include", "include/generated_quantities.stan");
    reader.add_event(454, 0, "start", "include/generated_quantities.stan");
    reader.add_event(458, 4, "end", "include/generated_quantities.stan");
    reader.add_event(458, 75, "restart", "model_anisotropic_vecchia");
    reader.add_event(461, 76, "end", "model_anisotropic_vecchia");
    return reader;
}
template <typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
rw1d_precision(const int& n,
                   const T1__& sigma_squared, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("output", "n", n);
        validate_non_negative_index("output", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> output(n, n);
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        stan::math::assign(output,diag_matrix(rep_vector(2, n)));
        current_statement_begin__ = 4;
        if (as_bool(logical_eq(n, 0))) {
            current_statement_begin__ = 5;
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
        current_statement_begin__ = 7;
        for (int i = 2; i <= n; ++i) {
            current_statement_begin__ = 8;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list())), 
                        -(1), 
                        "assigning variable output");
            current_statement_begin__ = 9;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        -(1), 
                        "assigning variable output");
        }
        current_statement_begin__ = 11;
        stan::model::assign(output, 
                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                    1, 
                    "assigning variable output");
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(output, sigma_squared));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rw1d_precision_functor__ {
    template <typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& n,
                   const T1__& sigma_squared, std::ostream* pstream__) const {
        return rw1d_precision(n, sigma_squared, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
rw1d_precision_varying(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& sigma_squared, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 16;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(sigma_squared));
        current_statement_begin__ = 17;
        validate_non_negative_index("output", "n", n);
        validate_non_negative_index("output", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> output(n, n);
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        stan::math::assign(output,rep_matrix(0, n, n));
        current_statement_begin__ = 18;
        for (int i = 1; i <= (n - 1); ++i) {
            current_statement_begin__ = 19;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        ((get_base1(sigma_squared, i, "sigma_squared", 1) + get_base1(sigma_squared, (i + 1), "sigma_squared", 1)) / (get_base1(sigma_squared, i, "sigma_squared", 1) * get_base1(sigma_squared, (i + 1), "sigma_squared", 1))), 
                        "assigning variable output");
            current_statement_begin__ = 20;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        (-(1) / get_base1(sigma_squared, (i + 1), "sigma_squared", 1)), 
                        "assigning variable output");
            current_statement_begin__ = 21;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list())), 
                        (-(1) / get_base1(sigma_squared, (i + 1), "sigma_squared", 1)), 
                        "assigning variable output");
        }
        current_statement_begin__ = 23;
        stan::model::assign(output, 
                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                    (1 / get_base1(sigma_squared, n, "sigma_squared", 1)), 
                    "assigning variable output");
        current_statement_begin__ = 24;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rw1d_precision_varying_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& sigma_squared, std::ostream* pstream__) const {
        return rw1d_precision_varying(sigma_squared, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
exp1d_precision(const int& n,
                    const T1__& delta,
                    const T2__& ell,
                    const T3__& sigma_squared, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 28;
        validate_non_negative_index("output", "n", n);
        validate_non_negative_index("output", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> output(n, n);
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        stan::math::assign(output,rep_matrix(0, n, n));
        current_statement_begin__ = 29;
        local_scalar_t__ e_lambda_d_x(DUMMY_VAR__);
        (void) e_lambda_d_x;  // dummy to suppress unused var warning
        stan::math::initialize(e_lambda_d_x, DUMMY_VAR__);
        stan::math::fill(e_lambda_d_x, DUMMY_VAR__);
        current_statement_begin__ = 30;
        local_scalar_t__ e_2lambda_d_x(DUMMY_VAR__);
        (void) e_2lambda_d_x;  // dummy to suppress unused var warning
        stan::math::initialize(e_2lambda_d_x, DUMMY_VAR__);
        stan::math::fill(e_2lambda_d_x, DUMMY_VAR__);
        current_statement_begin__ = 31;
        local_scalar_t__ r_major(DUMMY_VAR__);
        (void) r_major;  // dummy to suppress unused var warning
        stan::math::initialize(r_major, DUMMY_VAR__);
        stan::math::fill(r_major, DUMMY_VAR__);
        current_statement_begin__ = 32;
        local_scalar_t__ r_minor(DUMMY_VAR__);
        (void) r_minor;  // dummy to suppress unused var warning
        stan::math::initialize(r_minor, DUMMY_VAR__);
        stan::math::fill(r_minor, DUMMY_VAR__);
        current_statement_begin__ = 34;
        if (as_bool(logical_eq(n, 1))) {
            current_statement_begin__ = 35;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (1 / sigma_squared), 
                        "assigning variable output");
        }
        current_statement_begin__ = 37;
        if (as_bool(logical_lte(n, 1))) {
            current_statement_begin__ = 38;
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
        current_statement_begin__ = 40;
        stan::math::assign(e_lambda_d_x, stan::math::exp((-(delta) / ell)));
        current_statement_begin__ = 41;
        stan::math::assign(e_2lambda_d_x, stan::math::exp(((-(2) * delta) / ell)));
        current_statement_begin__ = 42;
        stan::math::assign(r_major, (e_2lambda_d_x / (1 - e_2lambda_d_x)));
        current_statement_begin__ = 43;
        stan::math::assign(r_minor, (e_lambda_d_x / (1 - e_2lambda_d_x)));
        current_statement_begin__ = 45;
        stan::model::assign(output, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    (1 + r_major), 
                    "assigning variable output");
        current_statement_begin__ = 46;
        for (int i = 2; i <= (n - 1); ++i) {
            current_statement_begin__ = 47;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        (1 + (2 * r_major)), 
                        "assigning variable output");
            current_statement_begin__ = 48;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list())), 
                        -(r_minor), 
                        "assigning variable output");
            current_statement_begin__ = 49;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        -(r_minor), 
                        "assigning variable output");
        }
        current_statement_begin__ = 51;
        stan::model::assign(output, 
                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni((n - 1)), stan::model::nil_index_list())), 
                    -(r_minor), 
                    "assigning variable output");
        current_statement_begin__ = 52;
        stan::model::assign(output, 
                    stan::model::cons_list(stan::model::index_uni((n - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                    -(r_minor), 
                    "assigning variable output");
        current_statement_begin__ = 53;
        stan::model::assign(output, 
                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                    (1 + r_major), 
                    "assigning variable output");
        current_statement_begin__ = 54;
        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(output, sigma_squared));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp1d_precision_functor__ {
    template <typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& n,
                    const T1__& delta,
                    const T2__& ell,
                    const T3__& sigma_squared, std::ostream* pstream__) const {
        return exp1d_precision(n, delta, ell, sigma_squared, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, Eigen::Dynamic>
exp1d_covariance(const int& n,
                     const T1__& delta,
                     const T2__& ell,
                     const T3__& tau_squared,
                     const T4__& sigma_squared, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 58;
        validate_non_negative_index("output", "n", n);
        validate_non_negative_index("output", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> output(n, n);
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        stan::math::assign(output,rep_matrix(0, n, n));
        current_statement_begin__ = 59;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 60;
            for (int j = (i + 1); j <= n; ++j) {
                current_statement_begin__ = 61;
                stan::model::assign(output, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (tau_squared * stan::math::exp((-((delta * (j - i))) / ell))), 
                            "assigning variable output");
                current_statement_begin__ = 64;
                stan::model::assign(output, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            get_base1(output, i, j, "output", 1), 
                            "assigning variable output");
            }
            current_statement_begin__ = 66;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        (stan::model::rvalue(output, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "output") + (tau_squared + sigma_squared)), 
                        "assigning variable output");
        }
        current_statement_begin__ = 68;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp1d_covariance_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& n,
                     const T1__& delta,
                     const T2__& ell,
                     const T3__& tau_squared,
                     const T4__& sigma_squared, std::ostream* pstream__) const {
        return exp1d_covariance(n, delta, ell, tau_squared, sigma_squared, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
chol_solve_L_b(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& L,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 76;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(mdivide_right_tri_low(transpose(mdivide_left_tri_low(L, b)), L)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct chol_solve_L_b_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& L,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) const {
        return chol_solve_L_b(L, b, pstream__);
    }
};
template <class RNG>
Eigen::Matrix<double, 1, Eigen::Dynamic>
n_std_normals_rng(const int& n, RNG& base_rng__, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 80;
        validate_non_negative_index("z", "n", n);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> z(n);
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z, DUMMY_VAR__);
        current_statement_begin__ = 81;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 82;
            stan::model::assign(z, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        normal_rng(0, 1, base_rng__), 
                        "assigning variable z");
        }
        current_statement_begin__ = 84;
        return stan::math::promote_scalar<fun_return_scalar_t__>(z);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct n_std_normals_rng_functor__ {
    template <class RNG>
        Eigen::Matrix<double, 1, Eigen::Dynamic>
    operator()(const int& n, RNG& base_rng__, std::ostream* pstream__) const {
        return n_std_normals_rng(n, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
exponential_cov_heteroskedastic_scalar(const std::vector<T0__>& x,
                                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& standard_deviations,
                                           const T2__& sigma_squared_nugget, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 92;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,size(x));
        current_statement_begin__ = 93;
        validate_non_negative_index("output", "n", n);
        validate_non_negative_index("output", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> output(n, n);
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        current_statement_begin__ = 94;
        for (int j = 1; j <= n; ++j) {
            current_statement_begin__ = 95;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                        (square(get_base1(standard_deviations, j, "standard_deviations", 1)) + sigma_squared_nugget), 
                        "assigning variable output");
            current_statement_begin__ = 96;
            for (int k = (j + 1); k <= n; ++k) {
                current_statement_begin__ = 97;
                stan::model::assign(output, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            ((get_base1(standard_deviations, j, "standard_deviations", 1) * get_base1(standard_deviations, k, "standard_deviations", 1)) * stan::math::exp(-(stan::math::fabs((get_base1(x, j, "x", 1) - get_base1(x, k, "x", 1)))))), 
                            "assigning variable output");
                current_statement_begin__ = 102;
                stan::model::assign(output, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            get_base1(output, j, k, "output", 1), 
                            "assigning variable output");
            }
        }
        current_statement_begin__ = 105;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exponential_cov_heteroskedastic_scalar_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<T0__>& x,
                                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& standard_deviations,
                                           const T2__& sigma_squared_nugget, std::ostream* pstream__) const {
        return exponential_cov_heteroskedastic_scalar(x, standard_deviations, sigma_squared_nugget, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
exponential_cov_heteroskedastic_vector(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x,
                                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& standard_deviations,
                                           const T2__& sigma_squared_nugget, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 113;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,size(x));
        current_statement_begin__ = 114;
        validate_non_negative_index("output", "n", n);
        validate_non_negative_index("output", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> output(n, n);
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        current_statement_begin__ = 115;
        for (int j = 1; j <= n; ++j) {
            current_statement_begin__ = 116;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                        (square(get_base1(standard_deviations, j, "standard_deviations", 1)) + sigma_squared_nugget), 
                        "assigning variable output");
            current_statement_begin__ = 117;
            for (int k = (j + 1); k <= n; ++k) {
                current_statement_begin__ = 118;
                stan::model::assign(output, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            ((get_base1(standard_deviations, j, "standard_deviations", 1) * get_base1(standard_deviations, k, "standard_deviations", 1)) * stan::math::exp(-(distance(get_base1(x, j, "x", 1), get_base1(x, k, "x", 1))))), 
                            "assigning variable output");
                current_statement_begin__ = 123;
                stan::model::assign(output, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            get_base1(output, j, k, "output", 1), 
                            "assigning variable output");
            }
        }
        current_statement_begin__ = 126;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exponential_cov_heteroskedastic_vector_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x,
                                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& standard_deviations,
                                           const T2__& sigma_squared_nugget, std::ostream* pstream__) const {
        return exponential_cov_heteroskedastic_vector(x, standard_deviations, sigma_squared_nugget, pstream__);
    }
};
int
get_N_block_max(const std::vector<int>& block_last_index, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 130;
        int N_blocks(0);
        (void) N_blocks;  // dummy to suppress unused var warning
        stan::math::fill(N_blocks, std::numeric_limits<int>::min());
        stan::math::assign(N_blocks,size(block_last_index));
        current_statement_begin__ = 131;
        int current_block_start_d(0);
        (void) current_block_start_d;  // dummy to suppress unused var warning
        stan::math::fill(current_block_start_d, std::numeric_limits<int>::min());
        stan::math::assign(current_block_start_d,1);
        current_statement_begin__ = 132;
        int N_block_max(0);
        (void) N_block_max;  // dummy to suppress unused var warning
        stan::math::fill(N_block_max, std::numeric_limits<int>::min());
        stan::math::assign(N_block_max,0);
        current_statement_begin__ = 133;
        for (int i = 1; i <= N_blocks; ++i) {
            {
            current_statement_begin__ = 134;
            int N_block_i(0);
            (void) N_block_i;  // dummy to suppress unused var warning
            stan::math::fill(N_block_i, std::numeric_limits<int>::min());
            stan::math::assign(N_block_i,((get_base1(block_last_index, i, "block_last_index", 1) - current_block_start_d) + 1));
            current_statement_begin__ = 135;
            if (as_bool(logical_gt(N_block_i, N_block_max))) {
                current_statement_begin__ = 136;
                stan::math::assign(N_block_max, N_block_i);
            }
            current_statement_begin__ = 138;
            stan::math::assign(current_block_start_d, (get_base1(block_last_index, i, "block_last_index", 1) + 1));
            }
        }
        current_statement_begin__ = 140;
        return stan::math::promote_scalar<fun_return_scalar_t__>(N_block_max);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_N_block_max_functor__ {
            int
    operator()(const std::vector<int>& block_last_index, std::ostream* pstream__) const {
        return get_N_block_max(block_last_index, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_anisotropic_vecchia
  : public stan::model::model_base_crtp<model_anisotropic_vecchia> {
private:
        int N;
        int D;
        std::vector<vector_d> x;
        vector_d y;
        vector_d scaling;
        int P_mean_fixed;
        matrix_d X_mean_fixed;
        vector_d alpha_mean;
        matrix_d alpha_precision;
        int P_mean_random;
        matrix_d X_mean_random;
        double tau_squared_mean_random_a;
        double tau_squared_mean_random_b;
        double sigma_squared_nugget_a;
        double sigma_squared_nugget_b;
        int P_deviation_warping;
        matrix_d X_deviation_warping;
        int P_deviation_fixed;
        matrix_d X_deviation_fixed;
        vector_d eta_deviation_mean;
        matrix_d eta_deviation_precision;
        int P_deviation_random;
        matrix_d X_deviation_random;
        double delta_deviation_random;
        double ell_deviation_random_scale;
        double tau_squared_deviation_random_scale;
        int N_indices;
        int N_blocks;
        std::vector<int> block_indices;
        std::vector<int> block_last_index;
        std::vector<int> block_N_responses;
        vector_d gamma_deviation_a;
        vector_d gamma_deviation_b;
        double L_deviation_shape;
        int P_mean_total;
        matrix_d X_mean;
        vector_d alpha_Q_mu;
        vector_d y_tilde;
        int N_block_max;
        std::vector<std::vector<int> > indices_X_mean_non_zero;
        std::vector<matrix_d> X_mean_non_zero;
        std::vector<int> P_X_mean_non_zero;
        int current_block_start_a;
public:
    model_anisotropic_vecchia(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_anisotropic_vecchia(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_anisotropic_vecchia_namespace::model_anisotropic_vecchia";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 144;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 145;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];
            check_greater_or_equal(function__, "D", D, 2);
            current_statement_begin__ = 146;
            validate_non_negative_index("x", "D", D);
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N,D));
            x = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(D));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = D;
            size_t x_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    x[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 147;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 148;
            validate_non_negative_index("scaling", "D", D);
            context__.validate_dims("data initialization", "scaling", "vector_d", context__.to_vec(D));
            scaling = Eigen::Matrix<double, Eigen::Dynamic, 1>(D);
            vals_r__ = context__.vals_r("scaling");
            pos__ = 0;
            size_t scaling_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < scaling_j_1_max__; ++j_1__) {
                scaling(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 150;
            context__.validate_dims("data initialization", "P_mean_fixed", "int", context__.to_vec());
            P_mean_fixed = int(0);
            vals_i__ = context__.vals_i("P_mean_fixed");
            pos__ = 0;
            P_mean_fixed = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_mean_fixed", P_mean_fixed, 1);
            current_statement_begin__ = 151;
            validate_non_negative_index("X_mean_fixed", "N", N);
            validate_non_negative_index("X_mean_fixed", "P_mean_fixed", P_mean_fixed);
            context__.validate_dims("data initialization", "X_mean_fixed", "matrix_d", context__.to_vec(N,P_mean_fixed));
            X_mean_fixed = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P_mean_fixed);
            vals_r__ = context__.vals_r("X_mean_fixed");
            pos__ = 0;
            size_t X_mean_fixed_j_2_max__ = P_mean_fixed;
            size_t X_mean_fixed_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_mean_fixed_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_mean_fixed_j_1_max__; ++j_1__) {
                    X_mean_fixed(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 152;
            validate_non_negative_index("alpha_mean", "P_mean_fixed", P_mean_fixed);
            context__.validate_dims("data initialization", "alpha_mean", "vector_d", context__.to_vec(P_mean_fixed));
            alpha_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>(P_mean_fixed);
            vals_r__ = context__.vals_r("alpha_mean");
            pos__ = 0;
            size_t alpha_mean_j_1_max__ = P_mean_fixed;
            for (size_t j_1__ = 0; j_1__ < alpha_mean_j_1_max__; ++j_1__) {
                alpha_mean(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 153;
            validate_non_negative_index("alpha_precision", "P_mean_fixed", P_mean_fixed);
            validate_non_negative_index("alpha_precision", "P_mean_fixed", P_mean_fixed);
            context__.validate_dims("data initialization", "alpha_precision", "matrix_d", context__.to_vec(P_mean_fixed,P_mean_fixed));
            alpha_precision = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(P_mean_fixed, P_mean_fixed);
            vals_r__ = context__.vals_r("alpha_precision");
            pos__ = 0;
            size_t alpha_precision_j_2_max__ = P_mean_fixed;
            size_t alpha_precision_j_1_max__ = P_mean_fixed;
            for (size_t j_2__ = 0; j_2__ < alpha_precision_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < alpha_precision_j_1_max__; ++j_1__) {
                    alpha_precision(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 155;
            context__.validate_dims("data initialization", "P_mean_random", "int", context__.to_vec());
            P_mean_random = int(0);
            vals_i__ = context__.vals_i("P_mean_random");
            pos__ = 0;
            P_mean_random = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_mean_random", P_mean_random, 0);
            current_statement_begin__ = 156;
            validate_non_negative_index("X_mean_random", "N", N);
            validate_non_negative_index("X_mean_random", "P_mean_random", P_mean_random);
            context__.validate_dims("data initialization", "X_mean_random", "matrix_d", context__.to_vec(N,P_mean_random));
            X_mean_random = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P_mean_random);
            vals_r__ = context__.vals_r("X_mean_random");
            pos__ = 0;
            size_t X_mean_random_j_2_max__ = P_mean_random;
            size_t X_mean_random_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_mean_random_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_mean_random_j_1_max__; ++j_1__) {
                    X_mean_random(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 157;
            context__.validate_dims("data initialization", "tau_squared_mean_random_a", "double", context__.to_vec());
            tau_squared_mean_random_a = double(0);
            vals_r__ = context__.vals_r("tau_squared_mean_random_a");
            pos__ = 0;
            tau_squared_mean_random_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau_squared_mean_random_a", tau_squared_mean_random_a, 0);
            current_statement_begin__ = 158;
            context__.validate_dims("data initialization", "tau_squared_mean_random_b", "double", context__.to_vec());
            tau_squared_mean_random_b = double(0);
            vals_r__ = context__.vals_r("tau_squared_mean_random_b");
            pos__ = 0;
            tau_squared_mean_random_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau_squared_mean_random_b", tau_squared_mean_random_b, 0);
            current_statement_begin__ = 160;
            context__.validate_dims("data initialization", "sigma_squared_nugget_a", "double", context__.to_vec());
            sigma_squared_nugget_a = double(0);
            vals_r__ = context__.vals_r("sigma_squared_nugget_a");
            pos__ = 0;
            sigma_squared_nugget_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_squared_nugget_a", sigma_squared_nugget_a, 0);
            current_statement_begin__ = 161;
            context__.validate_dims("data initialization", "sigma_squared_nugget_b", "double", context__.to_vec());
            sigma_squared_nugget_b = double(0);
            vals_r__ = context__.vals_r("sigma_squared_nugget_b");
            pos__ = 0;
            sigma_squared_nugget_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_squared_nugget_b", sigma_squared_nugget_b, 0);
            current_statement_begin__ = 162;
            context__.validate_dims("data initialization", "P_deviation_warping", "int", context__.to_vec());
            P_deviation_warping = int(0);
            vals_i__ = context__.vals_i("P_deviation_warping");
            pos__ = 0;
            P_deviation_warping = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_deviation_warping", P_deviation_warping, 1);
            current_statement_begin__ = 163;
            validate_non_negative_index("X_deviation_warping", "N", N);
            validate_non_negative_index("X_deviation_warping", "P_deviation_warping", P_deviation_warping);
            context__.validate_dims("data initialization", "X_deviation_warping", "matrix_d", context__.to_vec(N,P_deviation_warping));
            X_deviation_warping = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P_deviation_warping);
            vals_r__ = context__.vals_r("X_deviation_warping");
            pos__ = 0;
            size_t X_deviation_warping_j_2_max__ = P_deviation_warping;
            size_t X_deviation_warping_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_deviation_warping_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_deviation_warping_j_1_max__; ++j_1__) {
                    X_deviation_warping(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 165;
            context__.validate_dims("data initialization", "P_deviation_fixed", "int", context__.to_vec());
            P_deviation_fixed = int(0);
            vals_i__ = context__.vals_i("P_deviation_fixed");
            pos__ = 0;
            P_deviation_fixed = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_deviation_fixed", P_deviation_fixed, 1);
            current_statement_begin__ = 166;
            validate_non_negative_index("X_deviation_fixed", "N", N);
            validate_non_negative_index("X_deviation_fixed", "P_deviation_fixed", P_deviation_fixed);
            context__.validate_dims("data initialization", "X_deviation_fixed", "matrix_d", context__.to_vec(N,P_deviation_fixed));
            X_deviation_fixed = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P_deviation_fixed);
            vals_r__ = context__.vals_r("X_deviation_fixed");
            pos__ = 0;
            size_t X_deviation_fixed_j_2_max__ = P_deviation_fixed;
            size_t X_deviation_fixed_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_deviation_fixed_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_deviation_fixed_j_1_max__; ++j_1__) {
                    X_deviation_fixed(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 167;
            validate_non_negative_index("eta_deviation_mean", "P_deviation_fixed", P_deviation_fixed);
            context__.validate_dims("data initialization", "eta_deviation_mean", "vector_d", context__.to_vec(P_deviation_fixed));
            eta_deviation_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>(P_deviation_fixed);
            vals_r__ = context__.vals_r("eta_deviation_mean");
            pos__ = 0;
            size_t eta_deviation_mean_j_1_max__ = P_deviation_fixed;
            for (size_t j_1__ = 0; j_1__ < eta_deviation_mean_j_1_max__; ++j_1__) {
                eta_deviation_mean(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 168;
            validate_non_negative_index("eta_deviation_precision", "P_deviation_fixed", P_deviation_fixed);
            validate_non_negative_index("eta_deviation_precision", "P_deviation_fixed", P_deviation_fixed);
            context__.validate_dims("data initialization", "eta_deviation_precision", "matrix_d", context__.to_vec(P_deviation_fixed,P_deviation_fixed));
            eta_deviation_precision = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(P_deviation_fixed, P_deviation_fixed);
            vals_r__ = context__.vals_r("eta_deviation_precision");
            pos__ = 0;
            size_t eta_deviation_precision_j_2_max__ = P_deviation_fixed;
            size_t eta_deviation_precision_j_1_max__ = P_deviation_fixed;
            for (size_t j_2__ = 0; j_2__ < eta_deviation_precision_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_deviation_precision_j_1_max__; ++j_1__) {
                    eta_deviation_precision(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            stan::math::check_cov_matrix(function__, "eta_deviation_precision", eta_deviation_precision);
            current_statement_begin__ = 170;
            context__.validate_dims("data initialization", "P_deviation_random", "int", context__.to_vec());
            P_deviation_random = int(0);
            vals_i__ = context__.vals_i("P_deviation_random");
            pos__ = 0;
            P_deviation_random = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_deviation_random", P_deviation_random, 0);
            current_statement_begin__ = 171;
            validate_non_negative_index("X_deviation_random", "N", N);
            validate_non_negative_index("X_deviation_random", "P_deviation_random", P_deviation_random);
            context__.validate_dims("data initialization", "X_deviation_random", "matrix_d", context__.to_vec(N,P_deviation_random));
            X_deviation_random = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P_deviation_random);
            vals_r__ = context__.vals_r("X_deviation_random");
            pos__ = 0;
            size_t X_deviation_random_j_2_max__ = P_deviation_random;
            size_t X_deviation_random_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_deviation_random_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_deviation_random_j_1_max__; ++j_1__) {
                    X_deviation_random(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 172;
            context__.validate_dims("data initialization", "delta_deviation_random", "double", context__.to_vec());
            delta_deviation_random = double(0);
            vals_r__ = context__.vals_r("delta_deviation_random");
            pos__ = 0;
            delta_deviation_random = vals_r__[pos__++];
            check_greater_or_equal(function__, "delta_deviation_random", delta_deviation_random, 0);
            current_statement_begin__ = 173;
            context__.validate_dims("data initialization", "ell_deviation_random_scale", "double", context__.to_vec());
            ell_deviation_random_scale = double(0);
            vals_r__ = context__.vals_r("ell_deviation_random_scale");
            pos__ = 0;
            ell_deviation_random_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "ell_deviation_random_scale", ell_deviation_random_scale, 0);
            current_statement_begin__ = 174;
            context__.validate_dims("data initialization", "tau_squared_deviation_random_scale", "double", context__.to_vec());
            tau_squared_deviation_random_scale = double(0);
            vals_r__ = context__.vals_r("tau_squared_deviation_random_scale");
            pos__ = 0;
            tau_squared_deviation_random_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau_squared_deviation_random_scale", tau_squared_deviation_random_scale, 0);
            current_statement_begin__ = 176;
            context__.validate_dims("data initialization", "N_indices", "int", context__.to_vec());
            N_indices = int(0);
            vals_i__ = context__.vals_i("N_indices");
            pos__ = 0;
            N_indices = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_indices", N_indices, 1);
            current_statement_begin__ = 177;
            context__.validate_dims("data initialization", "N_blocks", "int", context__.to_vec());
            N_blocks = int(0);
            vals_i__ = context__.vals_i("N_blocks");
            pos__ = 0;
            N_blocks = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_blocks", N_blocks, 1);
            current_statement_begin__ = 178;
            validate_non_negative_index("block_indices", "N_indices", N_indices);
            context__.validate_dims("data initialization", "block_indices", "int", context__.to_vec(N_indices));
            block_indices = std::vector<int>(N_indices, int(0));
            vals_i__ = context__.vals_i("block_indices");
            pos__ = 0;
            size_t block_indices_k_0_max__ = N_indices;
            for (size_t k_0__ = 0; k_0__ < block_indices_k_0_max__; ++k_0__) {
                block_indices[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 179;
            validate_non_negative_index("block_last_index", "N_blocks", N_blocks);
            context__.validate_dims("data initialization", "block_last_index", "int", context__.to_vec(N_blocks));
            block_last_index = std::vector<int>(N_blocks, int(0));
            vals_i__ = context__.vals_i("block_last_index");
            pos__ = 0;
            size_t block_last_index_k_0_max__ = N_blocks;
            for (size_t k_0__ = 0; k_0__ < block_last_index_k_0_max__; ++k_0__) {
                block_last_index[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 180;
            validate_non_negative_index("block_N_responses", "N_blocks", N_blocks);
            context__.validate_dims("data initialization", "block_N_responses", "int", context__.to_vec(N_blocks));
            block_N_responses = std::vector<int>(N_blocks, int(0));
            vals_i__ = context__.vals_i("block_N_responses");
            pos__ = 0;
            size_t block_N_responses_k_0_max__ = N_blocks;
            for (size_t k_0__ = 0; k_0__ < block_N_responses_k_0_max__; ++k_0__) {
                block_N_responses[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 182;
            validate_non_negative_index("gamma_deviation_a", "D", D);
            context__.validate_dims("data initialization", "gamma_deviation_a", "vector_d", context__.to_vec(D));
            gamma_deviation_a = Eigen::Matrix<double, Eigen::Dynamic, 1>(D);
            vals_r__ = context__.vals_r("gamma_deviation_a");
            pos__ = 0;
            size_t gamma_deviation_a_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < gamma_deviation_a_j_1_max__; ++j_1__) {
                gamma_deviation_a(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "gamma_deviation_a", gamma_deviation_a, 0);
            current_statement_begin__ = 183;
            validate_non_negative_index("gamma_deviation_b", "D", D);
            context__.validate_dims("data initialization", "gamma_deviation_b", "vector_d", context__.to_vec(D));
            gamma_deviation_b = Eigen::Matrix<double, Eigen::Dynamic, 1>(D);
            vals_r__ = context__.vals_r("gamma_deviation_b");
            pos__ = 0;
            size_t gamma_deviation_b_j_1_max__ = D;
            for (size_t j_1__ = 0; j_1__ < gamma_deviation_b_j_1_max__; ++j_1__) {
                gamma_deviation_b(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "gamma_deviation_b", gamma_deviation_b, 0);
            current_statement_begin__ = 184;
            context__.validate_dims("data initialization", "L_deviation_shape", "double", context__.to_vec());
            L_deviation_shape = double(0);
            vals_r__ = context__.vals_r("L_deviation_shape");
            pos__ = 0;
            L_deviation_shape = vals_r__[pos__++];
            check_greater_or_equal(function__, "L_deviation_shape", L_deviation_shape, 0);
            // initialize transformed data variables
            current_statement_begin__ = 187;
            P_mean_total = int(0);
            stan::math::fill(P_mean_total, std::numeric_limits<int>::min());
            stan::math::assign(P_mean_total,(P_mean_fixed + P_mean_random));
            current_statement_begin__ = 188;
            validate_non_negative_index("X_mean", "N", N);
            validate_non_negative_index("X_mean", "P_mean_total", P_mean_total);
            X_mean = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P_mean_total);
            stan::math::fill(X_mean, DUMMY_VAR__);
            stan::math::assign(X_mean,append_col(X_mean_fixed, X_mean_random));
            current_statement_begin__ = 189;
            validate_non_negative_index("alpha_Q_mu", "P_mean_total", P_mean_total);
            alpha_Q_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(P_mean_total);
            stan::math::fill(alpha_Q_mu, DUMMY_VAR__);
            stan::math::assign(alpha_Q_mu,rep_vector(0, P_mean_total));
            current_statement_begin__ = 190;
            validate_non_negative_index("y_tilde", "N", N);
            y_tilde = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(y_tilde, DUMMY_VAR__);
            stan::math::assign(y_tilde,subtract(y, multiply(X_mean_fixed, alpha_mean)));
            current_statement_begin__ = 192;
            N_block_max = int(0);
            stan::math::fill(N_block_max, std::numeric_limits<int>::min());
            stan::math::assign(N_block_max,get_N_block_max(block_last_index, pstream__));
            current_statement_begin__ = 193;
            validate_non_negative_index("indices_X_mean_non_zero", "P_mean_total", P_mean_total);
            validate_non_negative_index("indices_X_mean_non_zero", "N_blocks", N_blocks);
            indices_X_mean_non_zero = std::vector<std::vector<int> >(P_mean_total, std::vector<int>(N_blocks, int(0)));
            stan::math::fill(indices_X_mean_non_zero, std::numeric_limits<int>::min());
            current_statement_begin__ = 194;
            validate_non_negative_index("X_mean_non_zero", "N_block_max", N_block_max);
            validate_non_negative_index("X_mean_non_zero", "P_mean_total", P_mean_total);
            validate_non_negative_index("X_mean_non_zero", "N_blocks", N_blocks);
            X_mean_non_zero = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(N_blocks, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_block_max, P_mean_total));
            stan::math::fill(X_mean_non_zero, DUMMY_VAR__);
            current_statement_begin__ = 195;
            validate_non_negative_index("P_X_mean_non_zero", "N_blocks", N_blocks);
            P_X_mean_non_zero = std::vector<int>(N_blocks, int(0));
            stan::math::fill(P_X_mean_non_zero, std::numeric_limits<int>::min());
            current_statement_begin__ = 196;
            current_block_start_a = int(0);
            stan::math::fill(current_block_start_a, std::numeric_limits<int>::min());
            stan::math::assign(current_block_start_a,1);
            // execute transformed data statements
            current_statement_begin__ = 198;
            stan::model::assign(alpha_Q_mu, 
                        stan::model::cons_list(stan::model::index_min_max(1, P_mean_fixed), stan::model::nil_index_list()), 
                        multiply(alpha_precision, alpha_mean), 
                        "assigning variable alpha_Q_mu");
            current_statement_begin__ = 200;
            for (int i = 1; i <= N_blocks; ++i) {
                {
                current_statement_begin__ = 201;
                validate_non_negative_index("X_mean_block_k", "N_block_max", N_block_max);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X_mean_block_k(N_block_max);
                stan::math::initialize(X_mean_block_k, DUMMY_VAR__);
                stan::math::fill(X_mean_block_k, DUMMY_VAR__);
                current_statement_begin__ = 202;
                int N_current_block(0);
                (void) N_current_block;  // dummy to suppress unused var warning
                stan::math::fill(N_current_block, std::numeric_limits<int>::min());
                stan::math::assign(N_current_block,((get_base1(block_last_index, i, "block_last_index", 1) - current_block_start_a) + 1));
                current_statement_begin__ = 203;
                validate_non_negative_index("indices_current_block", "N_block_max", N_block_max);
                std::vector<int  > indices_current_block(N_block_max, int(0));
                stan::math::fill(indices_current_block, std::numeric_limits<int>::min());
                current_statement_begin__ = 205;
                stan::model::assign(indices_current_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), 
                            stan::model::rvalue(block_indices, stan::model::cons_list(stan::model::index_min_max(current_block_start_a, get_base1(block_last_index, i, "block_last_index", 1)), stan::model::nil_index_list()), "block_indices"), 
                            "assigning variable indices_current_block");
                current_statement_begin__ = 208;
                stan::model::assign(P_X_mean_non_zero, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable P_X_mean_non_zero");
                current_statement_begin__ = 209;
                for (int k = 1; k <= P_mean_total; ++k) {
                    current_statement_begin__ = 210;
                    stan::model::assign(X_mean_block_k, 
                                stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), 
                                stan::model::rvalue(X_mean, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "X_mean"), 
                                "assigning variable X_mean_block_k");
                    current_statement_begin__ = 211;
                    if (as_bool(logical_neq(max(stan::math::fabs(stan::model::rvalue(X_mean_block_k, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "X_mean_block_k"))), 0))) {
                        current_statement_begin__ = 212;
                        stan::model::assign(P_X_mean_non_zero, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(P_X_mean_non_zero, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "P_X_mean_non_zero") + 1), 
                                    "assigning variable P_X_mean_non_zero");
                        current_statement_begin__ = 213;
                        stan::model::assign(indices_X_mean_non_zero, 
                                    stan::model::cons_list(stan::model::index_uni(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    k, 
                                    "assigning variable indices_X_mean_non_zero");
                        current_statement_begin__ = 214;
                        stan::model::assign(X_mean_non_zero, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_uni(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list()))), 
                                    stan::model::rvalue(X_mean_block_k, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "X_mean_block_k"), 
                                    "assigning variable X_mean_non_zero");
                    }
                }
                current_statement_begin__ = 222;
                stan::math::assign(current_block_start_a, (get_base1(block_last_index, i, "block_last_index", 1) + 1));
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 226;
            num_params_r__ += 1;
            current_statement_begin__ = 229;
            num_params_r__ += 1;
            current_statement_begin__ = 230;
            validate_non_negative_index("eta_deviation", "P_deviation_fixed", P_deviation_fixed);
            num_params_r__ += P_deviation_fixed;
            current_statement_begin__ = 231;
            validate_non_negative_index("zeta_deviation", "P_deviation_random", P_deviation_random);
            num_params_r__ += P_deviation_random;
            current_statement_begin__ = 233;
            num_params_r__ += 1;
            current_statement_begin__ = 234;
            num_params_r__ += 1;
            current_statement_begin__ = 235;
            validate_non_negative_index("gamma_deviation_horizontal", "(D - 1)", (D - 1));
            num_params_r__ += (D - 1);
            current_statement_begin__ = 236;
            validate_non_negative_index("gamma_deviation_vertical", "P_deviation_warping", P_deviation_warping);
            num_params_r__ += P_deviation_warping;
            current_statement_begin__ = 237;
            validate_non_negative_index("L_deviation", "D", D);
            validate_non_negative_index("L_deviation", "D", D);
            num_params_r__ += ((D * (D - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_anisotropic_vecchia() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 226;
        if (!(context__.contains_r("tau_squared_mean_random")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_squared_mean_random missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_squared_mean_random");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_squared_mean_random", "double", context__.to_vec());
        double tau_squared_mean_random(0);
        tau_squared_mean_random = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_squared_mean_random);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_squared_mean_random: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 229;
        if (!(context__.contains_r("sigma_squared_nugget")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_squared_nugget missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_squared_nugget");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_squared_nugget", "double", context__.to_vec());
        double sigma_squared_nugget(0);
        sigma_squared_nugget = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_squared_nugget);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_squared_nugget: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 230;
        if (!(context__.contains_r("eta_deviation")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_deviation missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_deviation");
        pos__ = 0U;
        validate_non_negative_index("eta_deviation", "P_deviation_fixed", P_deviation_fixed);
        context__.validate_dims("parameter initialization", "eta_deviation", "vector_d", context__.to_vec(P_deviation_fixed));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_deviation(P_deviation_fixed);
        size_t eta_deviation_j_1_max__ = P_deviation_fixed;
        for (size_t j_1__ = 0; j_1__ < eta_deviation_j_1_max__; ++j_1__) {
            eta_deviation(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta_deviation);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_deviation: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 231;
        if (!(context__.contains_r("zeta_deviation")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_deviation missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_deviation");
        pos__ = 0U;
        validate_non_negative_index("zeta_deviation", "P_deviation_random", P_deviation_random);
        context__.validate_dims("parameter initialization", "zeta_deviation", "vector_d", context__.to_vec(P_deviation_random));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_deviation(P_deviation_random);
        size_t zeta_deviation_j_1_max__ = P_deviation_random;
        for (size_t j_1__ = 0; j_1__ < zeta_deviation_j_1_max__; ++j_1__) {
            zeta_deviation(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta_deviation);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_deviation: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 233;
        if (!(context__.contains_r("ell_deviation_random")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell_deviation_random missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell_deviation_random");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ell_deviation_random", "double", context__.to_vec());
        double ell_deviation_random(0);
        ell_deviation_random = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, ell_deviation_random);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell_deviation_random: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 234;
        if (!(context__.contains_r("tau_squared_deviation_random")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_squared_deviation_random missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_squared_deviation_random");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_squared_deviation_random", "double", context__.to_vec());
        double tau_squared_deviation_random(0);
        tau_squared_deviation_random = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_squared_deviation_random);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_squared_deviation_random: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 235;
        if (!(context__.contains_r("gamma_deviation_horizontal")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_deviation_horizontal missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_deviation_horizontal");
        pos__ = 0U;
        validate_non_negative_index("gamma_deviation_horizontal", "(D - 1)", (D - 1));
        context__.validate_dims("parameter initialization", "gamma_deviation_horizontal", "vector_d", context__.to_vec((D - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_deviation_horizontal((D - 1));
        size_t gamma_deviation_horizontal_j_1_max__ = (D - 1);
        for (size_t j_1__ = 0; j_1__ < gamma_deviation_horizontal_j_1_max__; ++j_1__) {
            gamma_deviation_horizontal(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gamma_deviation_horizontal);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_deviation_horizontal: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 236;
        if (!(context__.contains_r("gamma_deviation_vertical")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_deviation_vertical missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_deviation_vertical");
        pos__ = 0U;
        validate_non_negative_index("gamma_deviation_vertical", "P_deviation_warping", P_deviation_warping);
        context__.validate_dims("parameter initialization", "gamma_deviation_vertical", "vector_d", context__.to_vec(P_deviation_warping));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_deviation_vertical(P_deviation_warping);
        size_t gamma_deviation_vertical_j_1_max__ = P_deviation_warping;
        for (size_t j_1__ = 0; j_1__ < gamma_deviation_vertical_j_1_max__; ++j_1__) {
            gamma_deviation_vertical(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gamma_deviation_vertical);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_deviation_vertical: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 237;
        if (!(context__.contains_r("L_deviation")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_deviation missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_deviation");
        pos__ = 0U;
        validate_non_negative_index("L_deviation", "D", D);
        validate_non_negative_index("L_deviation", "D", D);
        context__.validate_dims("parameter initialization", "L_deviation", "matrix_d", context__.to_vec(D,D));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_deviation(D, D);
        size_t L_deviation_j_2_max__ = D;
        size_t L_deviation_j_1_max__ = D;
        for (size_t j_2__ = 0; j_2__ < L_deviation_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_deviation_j_1_max__; ++j_1__) {
                L_deviation(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_deviation);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_deviation: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 226;
            local_scalar_t__ tau_squared_mean_random;
            (void) tau_squared_mean_random;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_squared_mean_random = in__.scalar_lb_constrain(0, lp__);
            else
                tau_squared_mean_random = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 229;
            local_scalar_t__ sigma_squared_nugget;
            (void) sigma_squared_nugget;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_squared_nugget = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_squared_nugget = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 230;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_deviation;
            (void) eta_deviation;  // dummy to suppress unused var warning
            if (jacobian__)
                eta_deviation = in__.vector_constrain(P_deviation_fixed, lp__);
            else
                eta_deviation = in__.vector_constrain(P_deviation_fixed);
            current_statement_begin__ = 231;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta_deviation;
            (void) zeta_deviation;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_deviation = in__.vector_constrain(P_deviation_random, lp__);
            else
                zeta_deviation = in__.vector_constrain(P_deviation_random);
            current_statement_begin__ = 233;
            local_scalar_t__ ell_deviation_random;
            (void) ell_deviation_random;  // dummy to suppress unused var warning
            if (jacobian__)
                ell_deviation_random = in__.scalar_lb_constrain(0, lp__);
            else
                ell_deviation_random = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 234;
            local_scalar_t__ tau_squared_deviation_random;
            (void) tau_squared_deviation_random;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_squared_deviation_random = in__.scalar_lb_constrain(0, lp__);
            else
                tau_squared_deviation_random = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 235;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_deviation_horizontal;
            (void) gamma_deviation_horizontal;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_deviation_horizontal = in__.vector_lb_constrain(0, (D - 1), lp__);
            else
                gamma_deviation_horizontal = in__.vector_lb_constrain(0, (D - 1));
            current_statement_begin__ = 236;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_deviation_vertical;
            (void) gamma_deviation_vertical;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_deviation_vertical = in__.vector_lb_constrain(0, P_deviation_warping, lp__);
            else
                gamma_deviation_vertical = in__.vector_lb_constrain(0, P_deviation_warping);
            current_statement_begin__ = 237;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_deviation;
            (void) L_deviation;  // dummy to suppress unused var warning
            if (jacobian__)
                L_deviation = in__.cholesky_factor_corr_constrain(D, lp__);
            else
                L_deviation = in__.cholesky_factor_corr_constrain(D);
            // transformed parameters
            current_statement_begin__ = 240;
            validate_non_negative_index("alpha_beta_hat", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_beta_hat(P_mean_total);
            stan::math::initialize(alpha_beta_hat, DUMMY_VAR__);
            stan::math::fill(alpha_beta_hat, DUMMY_VAR__);
            current_statement_begin__ = 241;
            local_scalar_t__ log_marginal;
            (void) log_marginal;  // dummy to suppress unused var warning
            stan::math::initialize(log_marginal, DUMMY_VAR__);
            stan::math::fill(log_marginal, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 244;
            validate_non_negative_index("x_warped", "D", D);
            validate_non_negative_index("x_warped", "N", N);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > x_warped(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(D));
            stan::math::initialize(x_warped, DUMMY_VAR__);
            stan::math::fill(x_warped, DUMMY_VAR__);
            current_statement_begin__ = 246;
            local_scalar_t__ log_det(DUMMY_VAR__);
            (void) log_det;  // dummy to suppress unused var warning
            stan::math::initialize(log_det, DUMMY_VAR__);
            stan::math::fill(log_det, DUMMY_VAR__);
            stan::math::assign(log_det,0);
            current_statement_begin__ = 247;
            local_scalar_t__ yt_Q_y(DUMMY_VAR__);
            (void) yt_Q_y;  // dummy to suppress unused var warning
            stan::math::initialize(yt_Q_y, DUMMY_VAR__);
            stan::math::fill(yt_Q_y, DUMMY_VAR__);
            stan::math::assign(yt_Q_y,0);
            current_statement_begin__ = 248;
            local_scalar_t__ y_tildet_Q_y_tilde(DUMMY_VAR__);
            (void) y_tildet_Q_y_tilde;  // dummy to suppress unused var warning
            stan::math::initialize(y_tildet_Q_y_tilde, DUMMY_VAR__);
            stan::math::fill(y_tildet_Q_y_tilde, DUMMY_VAR__);
            stan::math::assign(y_tildet_Q_y_tilde,0);
            current_statement_begin__ = 249;
            validate_non_negative_index("Xt_Q_X", "P_mean_total", P_mean_total);
            validate_non_negative_index("Xt_Q_X", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Xt_Q_X(P_mean_total, P_mean_total);
            stan::math::initialize(Xt_Q_X, DUMMY_VAR__);
            stan::math::fill(Xt_Q_X, DUMMY_VAR__);
            stan::math::assign(Xt_Q_X,rep_matrix(0, P_mean_total, P_mean_total));
            current_statement_begin__ = 250;
            validate_non_negative_index("Xt_Q_y", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Xt_Q_y(P_mean_total);
            stan::math::initialize(Xt_Q_y, DUMMY_VAR__);
            stan::math::fill(Xt_Q_y, DUMMY_VAR__);
            stan::math::assign(Xt_Q_y,rep_vector(0, P_mean_total));
            current_statement_begin__ = 251;
            validate_non_negative_index("Xt_Q_y_tilde", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Xt_Q_y_tilde(P_mean_total);
            stan::math::initialize(Xt_Q_y_tilde, DUMMY_VAR__);
            stan::math::fill(Xt_Q_y_tilde, DUMMY_VAR__);
            stan::math::assign(Xt_Q_y_tilde,rep_vector(0, P_mean_total));
            current_statement_begin__ = 252;
            validate_non_negative_index("alpha_beta_prior_precision", "P_mean_total", P_mean_total);
            validate_non_negative_index("alpha_beta_prior_precision", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_beta_prior_precision(P_mean_total, P_mean_total);
            stan::math::initialize(alpha_beta_prior_precision, DUMMY_VAR__);
            stan::math::fill(alpha_beta_prior_precision, DUMMY_VAR__);
            stan::math::assign(alpha_beta_prior_precision,rep_matrix(0, P_mean_total, P_mean_total));
            current_statement_begin__ = 253;
            validate_non_negative_index("L_alpha_beta_precision", "P_mean_total", P_mean_total);
            validate_non_negative_index("L_alpha_beta_precision", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_alpha_beta_precision(P_mean_total, P_mean_total);
            stan::math::initialize(L_alpha_beta_precision, DUMMY_VAR__);
            stan::math::fill(L_alpha_beta_precision, DUMMY_VAR__);
            current_statement_begin__ = 254;
            validate_non_negative_index("L_alpha_beta_prior_precision", "P_mean_total", P_mean_total);
            validate_non_negative_index("L_alpha_beta_prior_precision", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_alpha_beta_prior_precision(P_mean_total, P_mean_total);
            stan::math::initialize(L_alpha_beta_prior_precision, DUMMY_VAR__);
            stan::math::fill(L_alpha_beta_prior_precision, DUMMY_VAR__);
            current_statement_begin__ = 255;
            validate_non_negative_index("alpha_beta_precision", "P_mean_total", P_mean_total);
            validate_non_negative_index("alpha_beta_precision", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_beta_precision(P_mean_total, P_mean_total);
            stan::math::initialize(alpha_beta_precision, DUMMY_VAR__);
            stan::math::fill(alpha_beta_precision, DUMMY_VAR__);
            current_statement_begin__ = 256;
            validate_non_negative_index("alpha_beta_rhs", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_beta_rhs(P_mean_total);
            stan::math::initialize(alpha_beta_rhs, DUMMY_VAR__);
            stan::math::fill(alpha_beta_rhs, DUMMY_VAR__);
            current_statement_begin__ = 257;
            validate_non_negative_index("deviation_log_variance", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deviation_log_variance(N);
            stan::math::initialize(deviation_log_variance, DUMMY_VAR__);
            stan::math::fill(deviation_log_variance, DUMMY_VAR__);
            current_statement_begin__ = 258;
            validate_non_negative_index("deviation_sd", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deviation_sd(N);
            stan::math::initialize(deviation_sd, DUMMY_VAR__);
            stan::math::fill(deviation_sd, DUMMY_VAR__);
            current_statement_begin__ = 259;
            validate_non_negative_index("K_block", "N_block_max", N_block_max);
            validate_non_negative_index("K_block", "N_block_max", N_block_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_block(N_block_max, N_block_max);
            stan::math::initialize(K_block, DUMMY_VAR__);
            stan::math::fill(K_block, DUMMY_VAR__);
            current_statement_begin__ = 260;
            validate_non_negative_index("L_block", "N_block_max", N_block_max);
            validate_non_negative_index("L_block", "N_block_max", N_block_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_block(N_block_max, N_block_max);
            stan::math::initialize(L_block, DUMMY_VAR__);
            stan::math::fill(L_block, DUMMY_VAR__);
            current_statement_begin__ = 261;
            validate_non_negative_index("L_inv_X_block", "N_block_max", N_block_max);
            validate_non_negative_index("L_inv_X_block", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_inv_X_block(N_block_max, P_mean_total);
            stan::math::initialize(L_inv_X_block, DUMMY_VAR__);
            stan::math::fill(L_inv_X_block, DUMMY_VAR__);
            current_statement_begin__ = 262;
            validate_non_negative_index("L_inv_y_block", "N_block_max", N_block_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_inv_y_block(N_block_max);
            stan::math::initialize(L_inv_y_block, DUMMY_VAR__);
            stan::math::fill(L_inv_y_block, DUMMY_VAR__);
            current_statement_begin__ = 263;
            validate_non_negative_index("L_inv_y_tilde_block", "N_block_max", N_block_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_inv_y_tilde_block(N_block_max);
            stan::math::initialize(L_inv_y_tilde_block, DUMMY_VAR__);
            stan::math::fill(L_inv_y_tilde_block, DUMMY_VAR__);
            current_statement_begin__ = 264;
            int current_block_start(0);
            (void) current_block_start;  // dummy to suppress unused var warning
            stan::math::fill(current_block_start, std::numeric_limits<int>::min());
            stan::math::assign(current_block_start,1);
            current_statement_begin__ = 265;
            int N_current_block(0);
            (void) N_current_block;  // dummy to suppress unused var warning
            stan::math::fill(N_current_block, std::numeric_limits<int>::min());
            current_statement_begin__ = 266;
            int N_parents_current_block(0);
            (void) N_parents_current_block;  // dummy to suppress unused var warning
            stan::math::fill(N_parents_current_block, std::numeric_limits<int>::min());
            current_statement_begin__ = 267;
            validate_non_negative_index("indices_current_block", "N_block_max", N_block_max);
            std::vector<int  > indices_current_block(N_block_max, int(0));
            stan::math::fill(indices_current_block, std::numeric_limits<int>::min());
            current_statement_begin__ = 269;
            stan::math::assign(deviation_log_variance, multiply(X_deviation_fixed, eta_deviation));
            current_statement_begin__ = 270;
            if (as_bool(logical_gt(P_deviation_random, 0))) {
                current_statement_begin__ = 271;
                stan::math::assign(deviation_log_variance, add(deviation_log_variance, multiply(X_deviation_random, zeta_deviation)));
            }
            current_statement_begin__ = 273;
            stan::math::assign(deviation_sd, stan::math::exp(multiply(0.5, deviation_log_variance)));
            current_statement_begin__ = 275;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 276;
                for (int j = 1; j <= (D - 1); ++j) {
                    current_statement_begin__ = 277;
                    stan::model::assign(x_warped, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((get_base1(gamma_deviation_horizontal, j, "gamma_deviation_horizontal", 1) * get_base1(scaling, j, "scaling", 1)) * get_base1(get_base1(x, i, "x", 1), j, "x", 2)), 
                                "assigning variable x_warped");
                }
                current_statement_begin__ = 279;
                stan::model::assign(x_warped, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(D), stan::model::nil_index_list())), 
                            multiply(stan::model::rvalue(X_deviation_warping, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_deviation_warping"), cumulative_sum(gamma_deviation_vertical)), 
                            "assigning variable x_warped");
                current_statement_begin__ = 280;
                stan::model::assign(x_warped, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            multiply(transpose(L_deviation), get_base1(x_warped, i, "x_warped", 1)), 
                            "assigning variable x_warped");
            }
            current_statement_begin__ = 283;
            for (int i = 1; i <= N_blocks; ++i) {
                current_statement_begin__ = 284;
                stan::math::assign(N_current_block, ((get_base1(block_last_index, i, "block_last_index", 1) - current_block_start) + 1));
                current_statement_begin__ = 285;
                stan::math::assign(N_parents_current_block, (N_current_block - get_base1(block_N_responses, i, "block_N_responses", 1)));
                current_statement_begin__ = 287;
                stan::model::assign(indices_current_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), 
                            stan::model::rvalue(block_indices, stan::model::cons_list(stan::model::index_min_max(current_block_start, get_base1(block_last_index, i, "block_last_index", 1)), stan::model::nil_index_list()), "block_indices"), 
                            "assigning variable indices_current_block");
                current_statement_begin__ = 291;
                stan::model::assign(K_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), 
                            exponential_cov_heteroskedastic_vector(stan::model::rvalue(x_warped, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::nil_index_list()), "x_warped"), stan::model::rvalue(deviation_sd, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::nil_index_list()), "deviation_sd"), sigma_squared_nugget, pstream__), 
                            "assigning variable K_block");
                current_statement_begin__ = 297;
                stan::model::assign(L_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), 
                            cholesky_decompose(stan::model::rvalue(K_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), "K_block")), 
                            "assigning variable L_block");
                current_statement_begin__ = 300;
                stan::model::assign(L_inv_X_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list())), 
                            mdivide_left_tri_low(stan::model::rvalue(L_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), "L_block"), stan::model::rvalue(X_mean_non_zero, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list()))), "X_mean_non_zero")), 
                            "assigning variable L_inv_X_block");
                current_statement_begin__ = 308;
                stan::model::assign(L_inv_y_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), 
                            mdivide_left_tri_low(stan::model::rvalue(L_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), "L_block"), stan::model::rvalue(y, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::nil_index_list()), "y")), 
                            "assigning variable L_inv_y_block");
                current_statement_begin__ = 312;
                stan::model::assign(L_inv_y_tilde_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), 
                            mdivide_left_tri_low(stan::model::rvalue(L_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), "L_block"), stan::model::rvalue(y_tilde, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::nil_index_list()), "y_tilde")), 
                            "assigning variable L_inv_y_tilde_block");
                current_statement_begin__ = 317;
                stan::math::assign(log_det, (log_det + (2 * sum(stan::math::log(diagonal(stan::model::rvalue(L_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list())), "L_block")))))));
                current_statement_begin__ = 323;
                stan::math::assign(yt_Q_y, (yt_Q_y + sum(square(stan::model::rvalue(L_inv_y_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list()), "L_inv_y_block")))));
                current_statement_begin__ = 326;
                stan::math::assign(y_tildet_Q_y_tilde, (y_tildet_Q_y_tilde + sum(square(stan::model::rvalue(L_inv_y_tilde_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list()), "L_inv_y_tilde_block")))));
                current_statement_begin__ = 329;
                stan::model::assign(Xt_Q_y, 
                            stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list()), 
                            add(stan::model::rvalue(Xt_Q_y, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list()), "Xt_Q_y"), multiply(transpose(stan::model::rvalue(L_inv_X_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list())), "L_inv_X_block")), stan::model::rvalue(L_inv_y_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list()), "L_inv_y_block"))), 
                            "assigning variable Xt_Q_y");
                current_statement_begin__ = 333;
                stan::model::assign(Xt_Q_y_tilde, 
                            stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list()), 
                            add(stan::model::rvalue(Xt_Q_y_tilde, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list()), "Xt_Q_y_tilde"), multiply(transpose(stan::model::rvalue(L_inv_X_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list())), "L_inv_X_block")), stan::model::rvalue(L_inv_y_tilde_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list()), "L_inv_y_tilde_block"))), 
                            "assigning variable Xt_Q_y_tilde");
                current_statement_begin__ = 337;
                stan::model::assign(Xt_Q_X, 
                            stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list())), 
                            add(stan::model::rvalue(Xt_Q_X, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list())), "Xt_Q_X"), crossprod(stan::model::rvalue(L_inv_X_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list())), "L_inv_X_block"))), 
                            "assigning variable Xt_Q_X");
                current_statement_begin__ = 347;
                stan::math::assign(current_block_start, (get_base1(block_last_index, i, "block_last_index", 1) + 1));
            }
            current_statement_begin__ = 350;
            stan::model::assign(alpha_beta_prior_precision, 
                        stan::model::cons_list(stan::model::index_max(P_mean_fixed), stan::model::cons_list(stan::model::index_max(P_mean_fixed), stan::model::nil_index_list())), 
                        alpha_precision, 
                        "assigning variable alpha_beta_prior_precision");
            current_statement_begin__ = 351;
            stan::model::assign(alpha_beta_prior_precision, 
                        stan::model::cons_list(stan::model::index_min_max((P_mean_fixed + 1), P_mean_total), stan::model::cons_list(stan::model::index_min_max((P_mean_fixed + 1), P_mean_total), stan::model::nil_index_list())), 
                        rw1d_precision(P_mean_random, tau_squared_mean_random, pstream__), 
                        "assigning variable alpha_beta_prior_precision");
            current_statement_begin__ = 359;
            stan::math::assign(alpha_beta_precision, add(Xt_Q_X, alpha_beta_prior_precision));
            current_statement_begin__ = 361;
            stan::math::assign(L_alpha_beta_prior_precision, cholesky_decompose(alpha_beta_prior_precision));
            current_statement_begin__ = 362;
            stan::math::assign(L_alpha_beta_precision, cholesky_decompose(alpha_beta_precision));
            current_statement_begin__ = 363;
            stan::math::assign(alpha_beta_rhs, add(Xt_Q_y, alpha_Q_mu));
            current_statement_begin__ = 364;
            stan::math::assign(alpha_beta_hat, chol_solve_L_b(L_alpha_beta_precision, alpha_beta_rhs, pstream__));
            current_statement_begin__ = 367;
            stan::math::assign(log_marginal, (-(0.5) * (((((2 * sum(stan::math::log(diagonal(L_alpha_beta_precision)))) - (2 * sum(stan::math::log(diagonal(L_alpha_beta_prior_precision))))) + log_det) + y_tildet_Q_y_tilde) - sum(square(mdivide_left_tri_low(L_alpha_beta_precision, Xt_Q_y_tilde))))));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 240;
            size_t alpha_beta_hat_j_1_max__ = P_mean_total;
            for (size_t j_1__ = 0; j_1__ < alpha_beta_hat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha_beta_hat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha_beta_hat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha_beta_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 241;
            if (stan::math::is_uninitialized(log_marginal)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: log_marginal";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_marginal: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 380;
            lp_accum__.add(log_marginal);
            current_statement_begin__ = 382;
            if (as_bool(logical_gt(tau_squared_mean_random_b, 0))) {
                current_statement_begin__ = 384;
                lp_accum__.add(normal_log<propto__>(tau_squared_mean_random, 0, 1));
            } else {
                current_statement_begin__ = 386;
                lp_accum__.add(-(stan::math::log(tau_squared_mean_random)));
            }
            current_statement_begin__ = 389;
            if (as_bool(logical_gt(sigma_squared_nugget_b, 0))) {
                current_statement_begin__ = 390;
                lp_accum__.add(inv_gamma_log<propto__>(sigma_squared_nugget, sigma_squared_nugget_a, sigma_squared_nugget_b));
            } else {
                current_statement_begin__ = 392;
                lp_accum__.add(-(stan::math::log(sigma_squared_nugget)));
            }
            current_statement_begin__ = 394;
            lp_accum__.add(multi_normal_prec_log<propto__>(eta_deviation, eta_deviation_mean, eta_deviation_precision));
            current_statement_begin__ = 396;
            if (as_bool(logical_gt(P_deviation_random, 0))) {
                current_statement_begin__ = 411;
                lp_accum__.add(multi_normal_prec_log<propto__>(zeta_deviation, rep_vector(0, P_deviation_random), exp1d_precision(P_deviation_random, delta_deviation_random, ell_deviation_random, tau_squared_deviation_random, pstream__)));
            }
            current_statement_begin__ = 434;
            if (as_bool(logical_gt(ell_deviation_random_scale, 0))) {
                current_statement_begin__ = 435;
                lp_accum__.add(normal_log<propto__>(ell_deviation_random, 0, ell_deviation_random_scale));
            }
            current_statement_begin__ = 438;
            if (as_bool(logical_gt(tau_squared_deviation_random_scale, 0))) {
                current_statement_begin__ = 439;
                lp_accum__.add(normal_log<propto__>(tau_squared_deviation_random, 0, tau_squared_deviation_random_scale));
            } else {
                current_statement_begin__ = 441;
                lp_accum__.add(-(stan::math::log(tau_squared_deviation_random)));
            }
            current_statement_begin__ = 444;
            for (int i = 1; i <= (D - 1); ++i) {
                current_statement_begin__ = 445;
                if (as_bool(logical_gt(get_base1(gamma_deviation_b, i, "gamma_deviation_b", 1), 0))) {
                    current_statement_begin__ = 446;
                    lp_accum__.add(gamma_log<propto__>(get_base1(gamma_deviation_horizontal, i, "gamma_deviation_horizontal", 1), get_base1(gamma_deviation_a, i, "gamma_deviation_a", 1), get_base1(gamma_deviation_b, i, "gamma_deviation_b", 1)));
                }
            }
            current_statement_begin__ = 449;
            if (as_bool(logical_gt(get_base1(gamma_deviation_b, D, "gamma_deviation_b", 1), 0))) {
                current_statement_begin__ = 450;
                lp_accum__.add(gamma_log<propto__>(gamma_deviation_vertical, get_base1(gamma_deviation_a, D, "gamma_deviation_a", 1), get_base1(gamma_deviation_b, D, "gamma_deviation_b", 1)));
            }
            current_statement_begin__ = 452;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_deviation, L_deviation_shape));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("tau_squared_mean_random");
        names__.push_back("sigma_squared_nugget");
        names__.push_back("eta_deviation");
        names__.push_back("zeta_deviation");
        names__.push_back("ell_deviation_random");
        names__.push_back("tau_squared_deviation_random");
        names__.push_back("gamma_deviation_horizontal");
        names__.push_back("gamma_deviation_vertical");
        names__.push_back("L_deviation");
        names__.push_back("alpha_beta_hat");
        names__.push_back("log_marginal");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P_deviation_fixed);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P_deviation_random);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((D - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P_deviation_warping);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P_mean_total);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_anisotropic_vecchia_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double tau_squared_mean_random = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_squared_mean_random);
        double sigma_squared_nugget = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_squared_nugget);
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_deviation = in__.vector_constrain(P_deviation_fixed);
        size_t eta_deviation_j_1_max__ = P_deviation_fixed;
        for (size_t j_1__ = 0; j_1__ < eta_deviation_j_1_max__; ++j_1__) {
            vars__.push_back(eta_deviation(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta_deviation = in__.vector_constrain(P_deviation_random);
        size_t zeta_deviation_j_1_max__ = P_deviation_random;
        for (size_t j_1__ = 0; j_1__ < zeta_deviation_j_1_max__; ++j_1__) {
            vars__.push_back(zeta_deviation(j_1__));
        }
        double ell_deviation_random = in__.scalar_lb_constrain(0);
        vars__.push_back(ell_deviation_random);
        double tau_squared_deviation_random = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_squared_deviation_random);
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_deviation_horizontal = in__.vector_lb_constrain(0, (D - 1));
        size_t gamma_deviation_horizontal_j_1_max__ = (D - 1);
        for (size_t j_1__ = 0; j_1__ < gamma_deviation_horizontal_j_1_max__; ++j_1__) {
            vars__.push_back(gamma_deviation_horizontal(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_deviation_vertical = in__.vector_lb_constrain(0, P_deviation_warping);
        size_t gamma_deviation_vertical_j_1_max__ = P_deviation_warping;
        for (size_t j_1__ = 0; j_1__ < gamma_deviation_vertical_j_1_max__; ++j_1__) {
            vars__.push_back(gamma_deviation_vertical(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_deviation = in__.cholesky_factor_corr_constrain(D);
        size_t L_deviation_j_2_max__ = D;
        size_t L_deviation_j_1_max__ = D;
        for (size_t j_2__ = 0; j_2__ < L_deviation_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_deviation_j_1_max__; ++j_1__) {
                vars__.push_back(L_deviation(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 240;
            validate_non_negative_index("alpha_beta_hat", "P_mean_total", P_mean_total);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_beta_hat(P_mean_total);
            stan::math::initialize(alpha_beta_hat, DUMMY_VAR__);
            stan::math::fill(alpha_beta_hat, DUMMY_VAR__);
            current_statement_begin__ = 241;
            double log_marginal;
            (void) log_marginal;  // dummy to suppress unused var warning
            stan::math::initialize(log_marginal, DUMMY_VAR__);
            stan::math::fill(log_marginal, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 244;
            validate_non_negative_index("x_warped", "D", D);
            validate_non_negative_index("x_warped", "N", N);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > x_warped(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(D));
            stan::math::initialize(x_warped, DUMMY_VAR__);
            stan::math::fill(x_warped, DUMMY_VAR__);
            current_statement_begin__ = 246;
            local_scalar_t__ log_det(DUMMY_VAR__);
            (void) log_det;  // dummy to suppress unused var warning
            stan::math::initialize(log_det, DUMMY_VAR__);
            stan::math::fill(log_det, DUMMY_VAR__);
            stan::math::assign(log_det,0);
            current_statement_begin__ = 247;
            local_scalar_t__ yt_Q_y(DUMMY_VAR__);
            (void) yt_Q_y;  // dummy to suppress unused var warning
            stan::math::initialize(yt_Q_y, DUMMY_VAR__);
            stan::math::fill(yt_Q_y, DUMMY_VAR__);
            stan::math::assign(yt_Q_y,0);
            current_statement_begin__ = 248;
            local_scalar_t__ y_tildet_Q_y_tilde(DUMMY_VAR__);
            (void) y_tildet_Q_y_tilde;  // dummy to suppress unused var warning
            stan::math::initialize(y_tildet_Q_y_tilde, DUMMY_VAR__);
            stan::math::fill(y_tildet_Q_y_tilde, DUMMY_VAR__);
            stan::math::assign(y_tildet_Q_y_tilde,0);
            current_statement_begin__ = 249;
            validate_non_negative_index("Xt_Q_X", "P_mean_total", P_mean_total);
            validate_non_negative_index("Xt_Q_X", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Xt_Q_X(P_mean_total, P_mean_total);
            stan::math::initialize(Xt_Q_X, DUMMY_VAR__);
            stan::math::fill(Xt_Q_X, DUMMY_VAR__);
            stan::math::assign(Xt_Q_X,rep_matrix(0, P_mean_total, P_mean_total));
            current_statement_begin__ = 250;
            validate_non_negative_index("Xt_Q_y", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Xt_Q_y(P_mean_total);
            stan::math::initialize(Xt_Q_y, DUMMY_VAR__);
            stan::math::fill(Xt_Q_y, DUMMY_VAR__);
            stan::math::assign(Xt_Q_y,rep_vector(0, P_mean_total));
            current_statement_begin__ = 251;
            validate_non_negative_index("Xt_Q_y_tilde", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Xt_Q_y_tilde(P_mean_total);
            stan::math::initialize(Xt_Q_y_tilde, DUMMY_VAR__);
            stan::math::fill(Xt_Q_y_tilde, DUMMY_VAR__);
            stan::math::assign(Xt_Q_y_tilde,rep_vector(0, P_mean_total));
            current_statement_begin__ = 252;
            validate_non_negative_index("alpha_beta_prior_precision", "P_mean_total", P_mean_total);
            validate_non_negative_index("alpha_beta_prior_precision", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_beta_prior_precision(P_mean_total, P_mean_total);
            stan::math::initialize(alpha_beta_prior_precision, DUMMY_VAR__);
            stan::math::fill(alpha_beta_prior_precision, DUMMY_VAR__);
            stan::math::assign(alpha_beta_prior_precision,rep_matrix(0, P_mean_total, P_mean_total));
            current_statement_begin__ = 253;
            validate_non_negative_index("L_alpha_beta_precision", "P_mean_total", P_mean_total);
            validate_non_negative_index("L_alpha_beta_precision", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_alpha_beta_precision(P_mean_total, P_mean_total);
            stan::math::initialize(L_alpha_beta_precision, DUMMY_VAR__);
            stan::math::fill(L_alpha_beta_precision, DUMMY_VAR__);
            current_statement_begin__ = 254;
            validate_non_negative_index("L_alpha_beta_prior_precision", "P_mean_total", P_mean_total);
            validate_non_negative_index("L_alpha_beta_prior_precision", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_alpha_beta_prior_precision(P_mean_total, P_mean_total);
            stan::math::initialize(L_alpha_beta_prior_precision, DUMMY_VAR__);
            stan::math::fill(L_alpha_beta_prior_precision, DUMMY_VAR__);
            current_statement_begin__ = 255;
            validate_non_negative_index("alpha_beta_precision", "P_mean_total", P_mean_total);
            validate_non_negative_index("alpha_beta_precision", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_beta_precision(P_mean_total, P_mean_total);
            stan::math::initialize(alpha_beta_precision, DUMMY_VAR__);
            stan::math::fill(alpha_beta_precision, DUMMY_VAR__);
            current_statement_begin__ = 256;
            validate_non_negative_index("alpha_beta_rhs", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_beta_rhs(P_mean_total);
            stan::math::initialize(alpha_beta_rhs, DUMMY_VAR__);
            stan::math::fill(alpha_beta_rhs, DUMMY_VAR__);
            current_statement_begin__ = 257;
            validate_non_negative_index("deviation_log_variance", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deviation_log_variance(N);
            stan::math::initialize(deviation_log_variance, DUMMY_VAR__);
            stan::math::fill(deviation_log_variance, DUMMY_VAR__);
            current_statement_begin__ = 258;
            validate_non_negative_index("deviation_sd", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deviation_sd(N);
            stan::math::initialize(deviation_sd, DUMMY_VAR__);
            stan::math::fill(deviation_sd, DUMMY_VAR__);
            current_statement_begin__ = 259;
            validate_non_negative_index("K_block", "N_block_max", N_block_max);
            validate_non_negative_index("K_block", "N_block_max", N_block_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K_block(N_block_max, N_block_max);
            stan::math::initialize(K_block, DUMMY_VAR__);
            stan::math::fill(K_block, DUMMY_VAR__);
            current_statement_begin__ = 260;
            validate_non_negative_index("L_block", "N_block_max", N_block_max);
            validate_non_negative_index("L_block", "N_block_max", N_block_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_block(N_block_max, N_block_max);
            stan::math::initialize(L_block, DUMMY_VAR__);
            stan::math::fill(L_block, DUMMY_VAR__);
            current_statement_begin__ = 261;
            validate_non_negative_index("L_inv_X_block", "N_block_max", N_block_max);
            validate_non_negative_index("L_inv_X_block", "P_mean_total", P_mean_total);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_inv_X_block(N_block_max, P_mean_total);
            stan::math::initialize(L_inv_X_block, DUMMY_VAR__);
            stan::math::fill(L_inv_X_block, DUMMY_VAR__);
            current_statement_begin__ = 262;
            validate_non_negative_index("L_inv_y_block", "N_block_max", N_block_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_inv_y_block(N_block_max);
            stan::math::initialize(L_inv_y_block, DUMMY_VAR__);
            stan::math::fill(L_inv_y_block, DUMMY_VAR__);
            current_statement_begin__ = 263;
            validate_non_negative_index("L_inv_y_tilde_block", "N_block_max", N_block_max);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_inv_y_tilde_block(N_block_max);
            stan::math::initialize(L_inv_y_tilde_block, DUMMY_VAR__);
            stan::math::fill(L_inv_y_tilde_block, DUMMY_VAR__);
            current_statement_begin__ = 264;
            int current_block_start(0);
            (void) current_block_start;  // dummy to suppress unused var warning
            stan::math::fill(current_block_start, std::numeric_limits<int>::min());
            stan::math::assign(current_block_start,1);
            current_statement_begin__ = 265;
            int N_current_block(0);
            (void) N_current_block;  // dummy to suppress unused var warning
            stan::math::fill(N_current_block, std::numeric_limits<int>::min());
            current_statement_begin__ = 266;
            int N_parents_current_block(0);
            (void) N_parents_current_block;  // dummy to suppress unused var warning
            stan::math::fill(N_parents_current_block, std::numeric_limits<int>::min());
            current_statement_begin__ = 267;
            validate_non_negative_index("indices_current_block", "N_block_max", N_block_max);
            std::vector<int  > indices_current_block(N_block_max, int(0));
            stan::math::fill(indices_current_block, std::numeric_limits<int>::min());
            current_statement_begin__ = 269;
            stan::math::assign(deviation_log_variance, multiply(X_deviation_fixed, eta_deviation));
            current_statement_begin__ = 270;
            if (as_bool(logical_gt(P_deviation_random, 0))) {
                current_statement_begin__ = 271;
                stan::math::assign(deviation_log_variance, add(deviation_log_variance, multiply(X_deviation_random, zeta_deviation)));
            }
            current_statement_begin__ = 273;
            stan::math::assign(deviation_sd, stan::math::exp(multiply(0.5, deviation_log_variance)));
            current_statement_begin__ = 275;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 276;
                for (int j = 1; j <= (D - 1); ++j) {
                    current_statement_begin__ = 277;
                    stan::model::assign(x_warped, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((get_base1(gamma_deviation_horizontal, j, "gamma_deviation_horizontal", 1) * get_base1(scaling, j, "scaling", 1)) * get_base1(get_base1(x, i, "x", 1), j, "x", 2)), 
                                "assigning variable x_warped");
                }
                current_statement_begin__ = 279;
                stan::model::assign(x_warped, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(D), stan::model::nil_index_list())), 
                            multiply(stan::model::rvalue(X_deviation_warping, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X_deviation_warping"), cumulative_sum(gamma_deviation_vertical)), 
                            "assigning variable x_warped");
                current_statement_begin__ = 280;
                stan::model::assign(x_warped, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            multiply(transpose(L_deviation), get_base1(x_warped, i, "x_warped", 1)), 
                            "assigning variable x_warped");
            }
            current_statement_begin__ = 283;
            for (int i = 1; i <= N_blocks; ++i) {
                current_statement_begin__ = 284;
                stan::math::assign(N_current_block, ((get_base1(block_last_index, i, "block_last_index", 1) - current_block_start) + 1));
                current_statement_begin__ = 285;
                stan::math::assign(N_parents_current_block, (N_current_block - get_base1(block_N_responses, i, "block_N_responses", 1)));
                current_statement_begin__ = 287;
                stan::model::assign(indices_current_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), 
                            stan::model::rvalue(block_indices, stan::model::cons_list(stan::model::index_min_max(current_block_start, get_base1(block_last_index, i, "block_last_index", 1)), stan::model::nil_index_list()), "block_indices"), 
                            "assigning variable indices_current_block");
                current_statement_begin__ = 291;
                stan::model::assign(K_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), 
                            exponential_cov_heteroskedastic_vector(stan::model::rvalue(x_warped, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::nil_index_list()), "x_warped"), stan::model::rvalue(deviation_sd, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::nil_index_list()), "deviation_sd"), sigma_squared_nugget, pstream__), 
                            "assigning variable K_block");
                current_statement_begin__ = 297;
                stan::model::assign(L_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), 
                            cholesky_decompose(stan::model::rvalue(K_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), "K_block")), 
                            "assigning variable L_block");
                current_statement_begin__ = 300;
                stan::model::assign(L_inv_X_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list())), 
                            mdivide_left_tri_low(stan::model::rvalue(L_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), "L_block"), stan::model::rvalue(X_mean_non_zero, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list()))), "X_mean_non_zero")), 
                            "assigning variable L_inv_X_block");
                current_statement_begin__ = 308;
                stan::model::assign(L_inv_y_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), 
                            mdivide_left_tri_low(stan::model::rvalue(L_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), "L_block"), stan::model::rvalue(y, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::nil_index_list()), "y")), 
                            "assigning variable L_inv_y_block");
                current_statement_begin__ = 312;
                stan::model::assign(L_inv_y_tilde_block, 
                            stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), 
                            mdivide_left_tri_low(stan::model::rvalue(L_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list())), "L_block"), stan::model::rvalue(y_tilde, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_current_block, stan::model::cons_list(stan::model::index_max(N_current_block), stan::model::nil_index_list()), "indices_current_block")), stan::model::nil_index_list()), "y_tilde")), 
                            "assigning variable L_inv_y_tilde_block");
                current_statement_begin__ = 317;
                stan::math::assign(log_det, (log_det + (2 * sum(stan::math::log(diagonal(stan::model::rvalue(L_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list())), "L_block")))))));
                current_statement_begin__ = 323;
                stan::math::assign(yt_Q_y, (yt_Q_y + sum(square(stan::model::rvalue(L_inv_y_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list()), "L_inv_y_block")))));
                current_statement_begin__ = 326;
                stan::math::assign(y_tildet_Q_y_tilde, (y_tildet_Q_y_tilde + sum(square(stan::model::rvalue(L_inv_y_tilde_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list()), "L_inv_y_tilde_block")))));
                current_statement_begin__ = 329;
                stan::model::assign(Xt_Q_y, 
                            stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list()), 
                            add(stan::model::rvalue(Xt_Q_y, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list()), "Xt_Q_y"), multiply(transpose(stan::model::rvalue(L_inv_X_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list())), "L_inv_X_block")), stan::model::rvalue(L_inv_y_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list()), "L_inv_y_block"))), 
                            "assigning variable Xt_Q_y");
                current_statement_begin__ = 333;
                stan::model::assign(Xt_Q_y_tilde, 
                            stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list()), 
                            add(stan::model::rvalue(Xt_Q_y_tilde, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list()), "Xt_Q_y_tilde"), multiply(transpose(stan::model::rvalue(L_inv_X_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list())), "L_inv_X_block")), stan::model::rvalue(L_inv_y_tilde_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::nil_index_list()), "L_inv_y_tilde_block"))), 
                            "assigning variable Xt_Q_y_tilde");
                current_statement_begin__ = 337;
                stan::model::assign(Xt_Q_X, 
                            stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list())), 
                            add(stan::model::rvalue(Xt_Q_X, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(indices_X_mean_non_zero, stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "indices_X_mean_non_zero")), stan::model::nil_index_list())), "Xt_Q_X"), crossprod(stan::model::rvalue(L_inv_X_block, stan::model::cons_list(stan::model::index_min_max((N_parents_current_block + 1), N_current_block), stan::model::cons_list(stan::model::index_max(get_base1(P_X_mean_non_zero, i, "P_X_mean_non_zero", 1)), stan::model::nil_index_list())), "L_inv_X_block"))), 
                            "assigning variable Xt_Q_X");
                current_statement_begin__ = 347;
                stan::math::assign(current_block_start, (get_base1(block_last_index, i, "block_last_index", 1) + 1));
            }
            current_statement_begin__ = 350;
            stan::model::assign(alpha_beta_prior_precision, 
                        stan::model::cons_list(stan::model::index_max(P_mean_fixed), stan::model::cons_list(stan::model::index_max(P_mean_fixed), stan::model::nil_index_list())), 
                        alpha_precision, 
                        "assigning variable alpha_beta_prior_precision");
            current_statement_begin__ = 351;
            stan::model::assign(alpha_beta_prior_precision, 
                        stan::model::cons_list(stan::model::index_min_max((P_mean_fixed + 1), P_mean_total), stan::model::cons_list(stan::model::index_min_max((P_mean_fixed + 1), P_mean_total), stan::model::nil_index_list())), 
                        rw1d_precision(P_mean_random, tau_squared_mean_random, pstream__), 
                        "assigning variable alpha_beta_prior_precision");
            current_statement_begin__ = 359;
            stan::math::assign(alpha_beta_precision, add(Xt_Q_X, alpha_beta_prior_precision));
            current_statement_begin__ = 361;
            stan::math::assign(L_alpha_beta_prior_precision, cholesky_decompose(alpha_beta_prior_precision));
            current_statement_begin__ = 362;
            stan::math::assign(L_alpha_beta_precision, cholesky_decompose(alpha_beta_precision));
            current_statement_begin__ = 363;
            stan::math::assign(alpha_beta_rhs, add(Xt_Q_y, alpha_Q_mu));
            current_statement_begin__ = 364;
            stan::math::assign(alpha_beta_hat, chol_solve_L_b(L_alpha_beta_precision, alpha_beta_rhs, pstream__));
            current_statement_begin__ = 367;
            stan::math::assign(log_marginal, (-(0.5) * (((((2 * sum(stan::math::log(diagonal(L_alpha_beta_precision)))) - (2 * sum(stan::math::log(diagonal(L_alpha_beta_prior_precision))))) + log_det) + y_tildet_Q_y_tilde) - sum(square(mdivide_left_tri_low(L_alpha_beta_precision, Xt_Q_y_tilde))))));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t alpha_beta_hat_j_1_max__ = P_mean_total;
                for (size_t j_1__ = 0; j_1__ < alpha_beta_hat_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha_beta_hat(j_1__));
                }
                vars__.push_back(log_marginal);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_anisotropic_vecchia";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_squared_mean_random";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_squared_nugget";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_deviation_j_1_max__ = P_deviation_fixed;
        for (size_t j_1__ = 0; j_1__ < eta_deviation_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_deviation" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_deviation_j_1_max__ = P_deviation_random;
        for (size_t j_1__ = 0; j_1__ < zeta_deviation_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_deviation" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "ell_deviation_random";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_squared_deviation_random";
        param_names__.push_back(param_name_stream__.str());
        size_t gamma_deviation_horizontal_j_1_max__ = (D - 1);
        for (size_t j_1__ = 0; j_1__ < gamma_deviation_horizontal_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_deviation_horizontal" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_deviation_vertical_j_1_max__ = P_deviation_warping;
        for (size_t j_1__ = 0; j_1__ < gamma_deviation_vertical_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_deviation_vertical" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_deviation_j_2_max__ = D;
        size_t L_deviation_j_1_max__ = D;
        for (size_t j_2__ = 0; j_2__ < L_deviation_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_deviation_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_deviation" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_beta_hat_j_1_max__ = P_mean_total;
            for (size_t j_1__ = 0; j_1__ < alpha_beta_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_beta_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_marginal";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_squared_mean_random";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_squared_nugget";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_deviation_j_1_max__ = P_deviation_fixed;
        for (size_t j_1__ = 0; j_1__ < eta_deviation_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_deviation" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_deviation_j_1_max__ = P_deviation_random;
        for (size_t j_1__ = 0; j_1__ < zeta_deviation_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta_deviation" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "ell_deviation_random";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_squared_deviation_random";
        param_names__.push_back(param_name_stream__.str());
        size_t gamma_deviation_horizontal_j_1_max__ = (D - 1);
        for (size_t j_1__ = 0; j_1__ < gamma_deviation_horizontal_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_deviation_horizontal" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_deviation_vertical_j_1_max__ = P_deviation_warping;
        for (size_t j_1__ = 0; j_1__ < gamma_deviation_vertical_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_deviation_vertical" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_deviation_j_1_max__ = ((D * (D - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_deviation_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_deviation" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_beta_hat_j_1_max__ = P_mean_total;
            for (size_t j_1__ = 0; j_1__ < alpha_beta_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_beta_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_marginal";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_anisotropic_vecchia_namespace::model_anisotropic_vecchia stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
