// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_full_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'full', line 157, column 0 to column 38)",
                                                      " (in 'full', line 158, column 0 to column 35)",
                                                      " (in 'full', line 160, column 0 to column 40)",
                                                      " (in 'full', line 161, column 0 to column 42)",
                                                      " (in 'full', line 163, column 0 to column 35)",
                                                      " (in 'full', line 164, column 0 to column 43)",
                                                      " (in 'full', line 165, column 2 to column 68)",
                                                      " (in 'full', line 166, column 2 to column 64)",
                                                      " (in 'full', line 167, column 2 to column 48)",
                                                      " (in 'full', line 171, column 0 to column 36)",
                                                      " (in 'full', line 172, column 0 to column 18)",
                                                      " (in 'full', line 174, column 23 to column 24)",
                                                      " (in 'full', line 174, column 11 to column 12)",
                                                      " (in 'full', line 174, column 4 to column 26)",
                                                      " (in 'full', line 176, column 0 to column 17)",
                                                      " (in 'full', line 177, column 0 to column 28)",
                                                      " (in 'full', line 178, column 7 to column 19)",
                                                      " (in 'full', line 178, column 21 to column 33)",
                                                      " (in 'full', line 178, column 0 to column 86)",
                                                      " (in 'full', line 179, column 7 to column 19)",
                                                      " (in 'full', line 179, column 0 to column 58)",
                                                      " (in 'full', line 180, column 7 to column 19)",
                                                      " (in 'full', line 180, column 0 to column 64)",
                                                      " (in 'full', line 181, column 7 to column 19)",
                                                      " (in 'full', line 181, column 21 to column 33)",
                                                      " (in 'full', line 181, column 0 to column 106)",
                                                      " (in 'full', line 182, column 7 to column 19)",
                                                      " (in 'full', line 182, column 21 to column 33)",
                                                      " (in 'full', line 182, column 0 to column 58)",
                                                      " (in 'full', line 183, column 7 to column 19)",
                                                      " (in 'full', line 183, column 21 to column 33)",
                                                      " (in 'full', line 183, column 0 to column 64)",
                                                      " (in 'full', line 184, column 7 to column 19)",
                                                      " (in 'full', line 184, column 21 to column 33)",
                                                      " (in 'full', line 184, column 0 to column 56)",
                                                      " (in 'full', line 185, column 7 to column 19)",
                                                      " (in 'full', line 185, column 0 to column 36)",
                                                      " (in 'full', line 187, column 7 to column 8)",
                                                      " (in 'full', line 187, column 0 to column 33)",
                                                      " (in 'full', line 188, column 7 to column 8)",
                                                      " (in 'full', line 188, column 0 to column 23)",
                                                      " (in 'full', line 189, column 7 to column 18)",
                                                      " (in 'full', line 189, column 20 to column 31)",
                                                      " (in 'full', line 189, column 0 to column 41)",
                                                      " (in 'full', line 190, column 7 to column 18)",
                                                      " (in 'full', line 190, column 20 to column 31)",
                                                      " (in 'full', line 190, column 0 to column 41)",
                                                      " (in 'full', line 191, column 7 to column 18)",
                                                      " (in 'full', line 191, column 20 to column 32)",
                                                      " (in 'full', line 191, column 0 to column 48)",
                                                      " (in 'full', line 192, column 7 to column 18)",
                                                      " (in 'full', line 192, column 0 to column 34)",
                                                      " (in 'full', line 193, column 7 to column 18)",
                                                      " (in 'full', line 193, column 0 to column 40)",
                                                      " (in 'full', line 194, column 0 to column 28)",
                                                      " (in 'full', line 195, column 0 to column 20)",
                                                      " (in 'full', line 196, column 0 to column 28)",
                                                      " (in 'full', line 197, column 26 to column 37)",
                                                      " (in 'full', line 197, column 0 to column 39)",
                                                      " (in 'full', line 199, column 0 to column 59)",
                                                      " (in 'full', line 201, column 2 to column 64)",
                                                      " (in 'full', line 200, column 28 to line 202, column 1)",
                                                      " (in 'full', line 200, column 0 to line 202, column 1)",
                                                      " (in 'full', line 203, column 0 to column 49)",
                                                      " (in 'full', line 206, column 8 to line 208, column 33)",
                                                      " (in 'full', line 205, column 25 to line 209, column 7)",
                                                      " (in 'full', line 205, column 6 to line 209, column 7)",
                                                      " (in 'full', line 210, column 6 to column 92)",
                                                      " (in 'full', line 212, column 8 to column 49)",
                                                      " (in 'full', line 211, column 27 to line 213, column 7)",
                                                      " (in 'full', line 211, column 6 to line 213, column 7)",
                                                      " (in 'full', line 204, column 19 to line 214, column 5)",
                                                      " (in 'full', line 204, column 4 to line 214, column 5)",
                                                      " (in 'full', line 217, column 0 to column 64)",
                                                      " (in 'full', line 218, column 0 to column 65)",
                                                      " (in 'full', line 220, column 0 to line 222, column 2)",
                                                      " (in 'full', line 223, column 6 to line 228, column 8)",
                                                      " (in 'full', line 230, column 0 to line 232, column 2)",
                                                      " (in 'full', line 233, column 0 to line 239, column 2)",
                                                      " (in 'full', line 240, column 0 to line 243, column 2)",
                                                      " (in 'full', line 244, column 0 to line 247, column 2)",
                                                      " (in 'full', line 249, column 0 to line 254, column 2)",
                                                      " (in 'full', line 255, column 0 to line 257, column 2)",
                                                      " (in 'full', line 258, column 0 to line 261, column 2)",
                                                      " (in 'full', line 262, column 0 to line 265, column 2)",
                                                      " (in 'full', line 266, column 0 to line 274, column 2)",
                                                      " (in 'full', line 276, column 0 to column 46)",
                                                      " (in 'full', line 215, column 26 to line 277, column 5)",
                                                      " (in 'full', line 215, column 4 to line 277, column 5)",
                                                      " (in 'full', line 279, column 0 to column 75)",
                                                      " (in 'full', line 281, column 2 to line 287, column 4)",
                                                      " (in 'full', line 280, column 33 to line 288, column 1)",
                                                      " (in 'full', line 280, column 0 to line 288, column 1)",
                                                      " (in 'full', line 290, column 0 to column 59)",
                                                      " (in 'full', line 292, column 0 to column 78)",
                                                      " (in 'full', line 293, column 0 to column 66)",
                                                      " (in 'full', line 294, column 0 to column 37)",
                                                      " (in 'full', line 295, column 0 to column 72)",
                                                      " (in 'full', line 298, column 0 to line 307, column 2)",
                                                      " (in 'full', line 173, column 2 to line 308, column 3)",
                                                      " (in 'full', line 312, column 0 to column 23)",
                                                      " (in 'full', line 317, column 2 to column 42)",
                                                      " (in 'full', line 316, column 7 to line 318, column 1)",
                                                      " (in 'full', line 315, column 2 to column 92)",
                                                      " (in 'full', line 314, column 35 to line 316, column 1)",
                                                      " (in 'full', line 314, column 0 to line 318, column 1)",
                                                      " (in 'full', line 323, column 2 to column 39)",
                                                      " (in 'full', line 322, column 7 to line 324, column 1)",
                                                      " (in 'full', line 321, column 2 to column 83)",
                                                      " (in 'full', line 320, column 32 to line 322, column 1)",
                                                      " (in 'full', line 320, column 0 to line 324, column 1)",
                                                      " (in 'full', line 326, column 0 to column 79)",
                                                      " (in 'full', line 329, column 2 to line 337, column 4)",
                                                      " (in 'full', line 328, column 28 to line 338, column 1)",
                                                      " (in 'full', line 328, column 0 to line 338, column 1)",
                                                      " (in 'full', line 341, column 2 to column 63)",
                                                      " (in 'full', line 340, column 36 to line 342, column 1)",
                                                      " (in 'full', line 340, column 0 to line 342, column 1)",
                                                      " (in 'full', line 347, column 2 to column 47)",
                                                      " (in 'full', line 346, column 7 to line 348, column 1)",
                                                      " (in 'full', line 345, column 2 to column 107)",
                                                      " (in 'full', line 344, column 40 to line 346, column 1)",
                                                      " (in 'full', line 344, column 0 to line 348, column 1)",
                                                      " (in 'full', line 351, column 6 to column 88)",
                                                      " (in 'full', line 350, column 34 to line 352, column 5)",
                                                      " (in 'full', line 350, column 4 to line 352, column 5)",
                                                      " (in 'full', line 349, column 37 to line 353, column 3)",
                                                      " (in 'full', line 349, column 2 to line 353, column 3)",
                                                      " (in 'full', line 355, column 4 to column 129)",
                                                      " (in 'full', line 354, column 56 to line 356, column 3)",
                                                      " (in 'full', line 354, column 2 to line 356, column 3)",
                                                      " (in 'full', line 358, column 4 to column 55)",
                                                      " (in 'full', line 357, column 23 to line 359, column 3)",
                                                      " (in 'full', line 357, column 2 to line 359, column 3)",
                                                      " (in 'full', line 75, column 0 to column 15)",
                                                      " (in 'full', line 76, column 0 to column 15)",
                                                      " (in 'full', line 77, column 12 to column 13)",
                                                      " (in 'full', line 77, column 7 to column 8)",
                                                      " (in 'full', line 77, column 0 to column 15)",
                                                      " (in 'full', line 78, column 7 to column 8)",
                                                      " (in 'full', line 78, column 0 to column 12)",
                                                      " (in 'full', line 79, column 7 to column 8)",
                                                      " (in 'full', line 79, column 0 to column 18)",
                                                      " (in 'full', line 81, column 0 to column 26)",
                                                      " (in 'full', line 82, column 7 to column 8)",
                                                      " (in 'full', line 82, column 10 to column 22)",
                                                      " (in 'full', line 82, column 0 to column 37)",
                                                      " (in 'full', line 83, column 7 to column 19)",
                                                      " (in 'full', line 83, column 0 to column 32)",
                                                      " (in 'full', line 84, column 7 to column 19)",
                                                      " (in 'full', line 84, column 21 to column 33)",
                                                      " (in 'full', line 84, column 0 to column 51)",
                                                      " (in 'full', line 86, column 0 to column 27)",
                                                      " (in 'full', line 87, column 7 to column 8)",
                                                      " (in 'full', line 87, column 10 to column 23)",
                                                      " (in 'full', line 87, column 0 to column 39)",
                                                      " (in 'full', line 88, column 0 to column 40)",
                                                      " (in 'full', line 89, column 0 to column 40)",
                                                      " (in 'full', line 91, column 0 to column 37)",
                                                      " (in 'full', line 92, column 0 to column 37)",
                                                      " (in 'full', line 94, column 0 to column 25)",
                                                      " (in 'full', line 95, column 0 to column 33)",
                                                      " (in 'full', line 96, column 7 to column 8)",
                                                      " (in 'full', line 96, column 10 to column 29)",
                                                      " (in 'full', line 96, column 0 to column 51)",
                                                      " (in 'full', line 98, column 0 to column 31)",
                                                      " (in 'full', line 99, column 7 to column 8)",
                                                      " (in 'full', line 99, column 10 to column 27)",
                                                      " (in 'full', line 99, column 0 to column 47)",
                                                      " (in 'full', line 100, column 7 to column 24)",
                                                      " (in 'full', line 100, column 0 to column 45)",
                                                      " (in 'full', line 101, column 11 to column 28)",
                                                      " (in 'full', line 101, column 0 to column 54)",
                                                      " (in 'full', line 103, column 0 to column 32)",
                                                      " (in 'full', line 104, column 7 to column 8)",
                                                      " (in 'full', line 104, column 10 to column 28)",
                                                      " (in 'full', line 104, column 0 to column 49)",
                                                      " (in 'full', line 105, column 0 to column 37)",
                                                      " (in 'full', line 106, column 0 to column 41)",
                                                      " (in 'full', line 107, column 0 to column 45)",
                                                      " (in 'full', line 108, column 0 to column 45)",
                                                      " (in 'full', line 109, column 2 to column 37)",
                                                      " (in 'full', line 110, column 2 to column 27)",
                                                      " (in 'full', line 111, column 74 to column 75)",
                                                      " (in 'full', line 111, column 2 to column 77)",
                                                      " (in 'full', line 112, column 2 to column 25)",
                                                      " (in 'full', line 113, column 2 to column 24)",
                                                      " (in 'full', line 114, column 20 to column 29)",
                                                      " (in 'full', line 114, column 2 to column 31)",
                                                      " (in 'full', line 115, column 23 to column 31)",
                                                      " (in 'full', line 115, column 2 to column 33)",
                                                      " (in 'full', line 116, column 24 to column 32)",
                                                      " (in 'full', line 116, column 2 to column 34)",
                                                      " (in 'full', line 117, column 18 to column 43)",
                                                      " (in 'full', line 117, column 2 to column 63)",
                                                      " (in 'full', line 118, column 18 to column 43)",
                                                      " (in 'full', line 118, column 2 to column 63)",
                                                      " (in 'full', line 119, column 2 to column 34)",
                                                      " (in 'full', line 124, column 0 to column 48)",
                                                      " (in 'full', line 125, column 7 to column 8)",
                                                      " (in 'full', line 125, column 10 to column 22)",
                                                      " (in 'full', line 125, column 0 to column 73)",
                                                      " (in 'full', line 126, column 7 to column 19)",
                                                      " (in 'full', line 126, column 0 to column 62)",
                                                      " (in 'full', line 127, column 7 to column 8)",
                                                      " (in 'full', line 127, column 0 to column 50)",
                                                      " (in 'full', line 129, column 0 to column 52)",
                                                      " (in 'full', line 130, column 28 to column 40)",
                                                      " (in 'full', line 130, column 42 to column 50)",
                                                      " (in 'full', line 130, column 0 to column 52)",
                                                      " (in 'full', line 131, column 22 to column 30)",
                                                      " (in 'full', line 131, column 0 to column 32)",
                                                      " (in 'full', line 132, column 0 to column 30)",
                                                      " (in 'full', line 135, column 0 to column 58)",
                                                      " (in 'full', line 138, column 2 to column 72)",
                                                      " (in 'full', line 139, column 28 to column 39)",
                                                      " (in 'full', line 139, column 2 to column 41)",
                                                      " (in 'full', line 141, column 2 to line 143, column 4)",
                                                      " (in 'full', line 144, column 2 to column 27)",
                                                      " (in 'full', line 147, column 6 to column 32)",
                                                      " (in 'full', line 148, column 6 to column 59)",
                                                      " (in 'full', line 146, column 76 to line 149, column 5)",
                                                      " (in 'full', line 146, column 4 to line 149, column 5)",
                                                      " (in 'full', line 145, column 28 to line 150, column 3)",
                                                      " (in 'full', line 145, column 2 to line 150, column 3)",
                                                      " (in 'full', line 152, column 2 to column 50)",
                                                      " (in 'full', line 137, column 22 to line 153, column 1)",
                                                      " (in 'full', line 137, column 0 to line 153, column 1)",
                                                      " (in 'full', line 160, column 7 to column 24)",
                                                      " (in 'full', line 161, column 7 to column 25)",
                                                      " (in 'full', line 165, column 18 to column 39)",
                                                      " (in 'full', line 166, column 18 to column 37)",
                                                      " (in 'full', line 167, column 23 to column 34)",
                                                      " (in 'full', line 171, column 7 to column 19)",
                                                      " (in 'full', line 23, column 9 to column 10)",
                                                      " (in 'full', line 23, column 12 to column 13)",
                                                      " (in 'full', line 23, column 2 to column 54)",
                                                      " (in 'full', line 25, column 4 to column 18)",
                                                      " (in 'full', line 24, column 14 to line 26, column 3)",
                                                      " (in 'full', line 24, column 2 to line 26, column 3)",
                                                      " (in 'full', line 28, column 4 to column 26)",
                                                      " (in 'full', line 29, column 4 to column 26)",
                                                      " (in 'full', line 27, column 17 to line 30, column 3)",
                                                      " (in 'full', line 27, column 2 to line 30, column 3)",
                                                      " (in 'full', line 31, column 2 to column 19)",
                                                      " (in 'full', line 32, column 2 to column 32)",
                                                      " (in 'full', line 22, column 49 to line 33, column 1)",
                                                      " (in 'full', line 36, column 9 to column 10)",
                                                      " (in 'full', line 36, column 12 to column 13)",
                                                      " (in 'full', line 36, column 2 to column 44)",
                                                      " (in 'full', line 37, column 2 to column 20)",
                                                      " (in 'full', line 38, column 2 to column 21)",
                                                      " (in 'full', line 39, column 2 to column 15)",
                                                      " (in 'full', line 40, column 2 to column 15)",
                                                      " (in 'full', line 43, column 4 to column 37)",
                                                      " (in 'full', line 42, column 14 to line 44, column 3)",
                                                      " (in 'full', line 42, column 2 to line 44, column 3)",
                                                      " (in 'full', line 46, column 4 to column 18)",
                                                      " (in 'full', line 45, column 14 to line 47, column 3)",
                                                      " (in 'full', line 45, column 2 to line 47, column 3)",
                                                      " (in 'full', line 48, column 2 to column 35)",
                                                      " (in 'full', line 49, column 2 to column 40)",
                                                      " (in 'full', line 50, column 2 to column 48)",
                                                      " (in 'full', line 51, column 2 to column 47)",
                                                      " (in 'full', line 53, column 2 to column 29)",
                                                      " (in 'full', line 55, column 4 to column 35)",
                                                      " (in 'full', line 56, column 4 to column 32)",
                                                      " (in 'full', line 57, column 4 to column 32)",
                                                      " (in 'full', line 54, column 21 to line 58, column 3)",
                                                      " (in 'full', line 54, column 2 to line 58, column 3)",
                                                      " (in 'full', line 59, column 2 to column 30)",
                                                      " (in 'full', line 60, column 2 to column 30)",
                                                      " (in 'full', line 61, column 2 to column 29)",
                                                      " (in 'full', line 62, column 2 to column 32)",
                                                      " (in 'full', line 35, column 72 to line 63, column 1)",
                                                      " (in 'full', line 70, column 2 to column 64)",
                                                      " (in 'full', line 69, column 2 to line 71, column 1)"};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T2__>, -1, -1>
geowarp_process_covariance(const T0__& sigma_squared_nugget,
                           const T1__& deviation_sd_arg__,
                           const std::vector<Eigen::Matrix<T2__, -1, 1>>& x,
                           const double& smoothness, std::ostream* pstream__) ;
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T2__>, -1, -1>
geowarp_process_covariance_1d(const T0__& sigma_squared_nugget,
                              const T1__& deviation_sd_arg__,
                              const std::vector<T2__>& x,
                              const double& smoothness,
                              std::ostream* pstream__) ;
int
get_N_block_max(const std::vector<int>& block_last_index,
                std::ostream* pstream__) ;
template <typename T1__>
Eigen::Matrix<stan::promote_args_t<T1__>, -1, -1>
rw1d_precision(const int& n, const T1__& sigma_squared,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 235;
    validate_non_negative_index("output", "n", n);
    current_statement__ = 236;
    validate_non_negative_index("output", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, -1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, -1>(n, n);
    stan::math::fill(output, DUMMY_VAR__);
    
    current_statement__ = 237;
    assign(output, nil_index_list(), diag_matrix(rep_vector(2, n)),
      "assigning variable output");
    current_statement__ = 240;
    if (logical_eq(n, 0)) {
      current_statement__ = 238;
      return output;
    } 
    current_statement__ = 244;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 241;
      assign(output,
        cons_list(index_uni(i),
          cons_list(index_uni((i - 1)), nil_index_list())), -1,
        "assigning variable output");
      current_statement__ = 242;
      assign(output,
        cons_list(index_uni((i - 1)),
          cons_list(index_uni(i), nil_index_list())), -1,
        "assigning variable output");}
    current_statement__ = 245;
    assign(output,
      cons_list(index_uni(n), cons_list(index_uni(n), nil_index_list())), 1,
      "assigning variable output");
    current_statement__ = 246;
    return divide(output, sigma_squared);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct rw1d_precision_functor__ {
template <typename T1__>
Eigen::Matrix<stan::promote_args_t<T1__>, -1, -1>
operator()(const int& n, const T1__& sigma_squared, std::ostream* pstream__)  const 
{
return rw1d_precision(n, sigma_squared, pstream__);
}
};
template <typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T1__, T2__,
T3__>, -1, -1>
exp1d_precision(const int& n, const T1__& delta, const T2__& ell,
                const T3__& sigma_squared, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 248;
    validate_non_negative_index("output", "n", n);
    current_statement__ = 249;
    validate_non_negative_index("output", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, -1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, -1>(n, n);
    stan::math::fill(output, DUMMY_VAR__);
    
    current_statement__ = 250;
    assign(output, nil_index_list(), rep_matrix(0, n, n),
      "assigning variable output");
    local_scalar_t__ e_lambda_d_x;
    e_lambda_d_x = DUMMY_VAR__;
    
    local_scalar_t__ e_2lambda_d_x;
    e_2lambda_d_x = DUMMY_VAR__;
    
    local_scalar_t__ r_major;
    r_major = DUMMY_VAR__;
    
    local_scalar_t__ r_minor;
    r_minor = DUMMY_VAR__;
    
    current_statement__ = 257;
    if (logical_eq(n, 1)) {
      current_statement__ = 255;
      assign(output,
        cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())),
        (1 / sigma_squared), "assigning variable output");
    } 
    current_statement__ = 260;
    if (logical_lte(n, 1)) {
      current_statement__ = 258;
      return output;
    } 
    current_statement__ = 261;
    e_lambda_d_x = stan::math::exp((-delta / ell));
    current_statement__ = 262;
    e_2lambda_d_x = stan::math::exp(((-2 * delta) / ell));
    current_statement__ = 263;
    r_major = (e_2lambda_d_x / (1 - e_2lambda_d_x));
    current_statement__ = 264;
    r_minor = (e_lambda_d_x / (1 - e_2lambda_d_x));
    current_statement__ = 265;
    assign(output,
      cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())),
      (1 + r_major), "assigning variable output");
    current_statement__ = 270;
    for (int i = 2; i <= (n - 1); ++i) {
      current_statement__ = 266;
      assign(output,
        cons_list(index_uni(i), cons_list(index_uni(i), nil_index_list())),
        (1 + (2 * r_major)), "assigning variable output");
      current_statement__ = 267;
      assign(output,
        cons_list(index_uni(i),
          cons_list(index_uni((i - 1)), nil_index_list())), -r_minor,
        "assigning variable output");
      current_statement__ = 268;
      assign(output,
        cons_list(index_uni((i - 1)),
          cons_list(index_uni(i), nil_index_list())), -r_minor,
        "assigning variable output");}
    current_statement__ = 271;
    assign(output,
      cons_list(index_uni(n),
        cons_list(index_uni((n - 1)), nil_index_list())), -r_minor,
      "assigning variable output");
    current_statement__ = 272;
    assign(output,
      cons_list(index_uni((n - 1)),
        cons_list(index_uni(n), nil_index_list())), -r_minor,
      "assigning variable output");
    current_statement__ = 273;
    assign(output,
      cons_list(index_uni(n), cons_list(index_uni(n), nil_index_list())),
      (1 + r_major), "assigning variable output");
    current_statement__ = 274;
    return divide(output, sigma_squared);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct exp1d_precision_functor__ {
template <typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T1__, T2__,
T3__>, -1, -1>
operator()(const int& n, const T1__& delta, const T2__& ell,
           const T3__& sigma_squared, std::ostream* pstream__)  const 
{
return exp1d_precision(n, delta, ell, sigma_squared, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
chol_solve_L_b(const T0__& L_arg__, const T1__& b_arg__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& L = to_ref(L_arg__);
  const auto& b = to_ref(b_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 276;
    return transpose(
             mdivide_right_tri_low(transpose(mdivide_left_tri_low(L, b)), L));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct chol_solve_L_b_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& L, const T1__& b, std::ostream* pstream__)  const 
{
return chol_solve_L_b(L, b, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_full final : public model_base_crtp<model_full> {
private:
  int N;
  int D;
  std::vector<Eigen::Matrix<double, -1, 1>> x;
  Eigen::Matrix<double, -1, 1> y;
  Eigen::Matrix<double, -1, 1> scaling;
  int P_mean_fixed;
  Eigen::Matrix<double, -1, -1> X_mean_fixed;
  Eigen::Matrix<double, -1, 1> alpha_mean;
  Eigen::Matrix<double, -1, -1> alpha_precision;
  int P_mean_random;
  Eigen::Matrix<double, -1, -1> X_mean_random;
  double tau_squared_mean_random_a;
  double tau_squared_mean_random_b;
  double sigma_squared_nugget_a;
  double sigma_squared_nugget_b;
  double smoothness;
  int P_deviation_warping;
  Eigen::Matrix<double, -1, -1> X_deviation_warping;
  int P_deviation_fixed;
  Eigen::Matrix<double, -1, -1> X_deviation_fixed;
  Eigen::Matrix<double, -1, 1> eta_deviation_mean;
  Eigen::Matrix<double, -1, -1> eta_deviation_precision;
  int P_deviation_random;
  Eigen::Matrix<double, -1, -1> X_deviation_random;
  double delta_deviation_random;
  double ell_deviation_random_scale;
  double tau_squared_deviation_random_a;
  double tau_squared_deviation_random_b;
  int D_horizontal_warpings;
  int D_geometric;
  std::vector<int> axial_warping_unit_mapping;
  int N_indices;
  int N_blocks;
  std::vector<int> block_indices;
  std::vector<int> block_last_index;
  std::vector<int> block_N_responses;
  Eigen::Matrix<double, -1, 1> gamma_deviation_a;
  Eigen::Matrix<double, -1, 1> gamma_deviation_b;
  double L_deviation_shape;
  int P_mean_total;
  Eigen::Matrix<double, -1, -1> X_mean;
  Eigen::Matrix<double, -1, 1> alpha_Q_mu;
  Eigen::Matrix<double, -1, 1> y_tilde;
  int N_block_max;
  std::vector<std::vector<int>> indices_X_mean_non_zero;
  std::vector<int> P_X_mean_non_zero;
  int current_block_start_a;
 
public:
  ~model_full() { }
  
  inline std::string model_name() const final { return "model_full"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_full(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_full_namespace::model_full";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 135;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 135;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 135;
      current_statement__ = 135;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 136;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 136;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 136;
      current_statement__ = 136;
      check_greater_or_equal(function__, "D", D, 2);
      current_statement__ = 137;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 138;
      validate_non_negative_index("x", "D", D);
      current_statement__ = 139;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N, D));
      x = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(D));
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 139;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 139;
        pos__ = 1;
        current_statement__ = 139;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 139;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 139;
            assign(x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_flat__[(pos__ - 1)], "assigning variable x");
            current_statement__ = 139;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 140;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 141;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 141;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 141;
        pos__ = 1;
        current_statement__ = 141;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 141;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 141;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 142;
      validate_non_negative_index("scaling", "D", D);
      current_statement__ = 143;
      context__.validate_dims("data initialization","scaling","double",
          context__.to_vec(D));
      scaling = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(scaling, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> scaling_flat__;
        current_statement__ = 143;
        assign(scaling_flat__, nil_index_list(), context__.vals_r("scaling"),
          "assigning variable scaling_flat__");
        current_statement__ = 143;
        pos__ = 1;
        current_statement__ = 143;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 143;
          assign(scaling, cons_list(index_uni(sym1__), nil_index_list()),
            scaling_flat__[(pos__ - 1)], "assigning variable scaling");
          current_statement__ = 143;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 144;
      context__.validate_dims("data initialization","P_mean_fixed","int",
          context__.to_vec());
      P_mean_fixed = std::numeric_limits<int>::min();
      
      current_statement__ = 144;
      P_mean_fixed = context__.vals_i("P_mean_fixed")[(1 - 1)];
      current_statement__ = 144;
      current_statement__ = 144;
      check_greater_or_equal(function__, "P_mean_fixed", P_mean_fixed, 1);
      current_statement__ = 145;
      validate_non_negative_index("X_mean_fixed", "N", N);
      current_statement__ = 146;
      validate_non_negative_index("X_mean_fixed", "P_mean_fixed",
                                  P_mean_fixed);
      current_statement__ = 147;
      context__.validate_dims("data initialization","X_mean_fixed","double",
          context__.to_vec(N, P_mean_fixed));
      X_mean_fixed = Eigen::Matrix<double, -1, -1>(N, P_mean_fixed);
      stan::math::fill(X_mean_fixed, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_mean_fixed_flat__;
        current_statement__ = 147;
        assign(X_mean_fixed_flat__, nil_index_list(),
          context__.vals_r("X_mean_fixed"),
          "assigning variable X_mean_fixed_flat__");
        current_statement__ = 147;
        pos__ = 1;
        current_statement__ = 147;
        for (int sym1__ = 1; sym1__ <= P_mean_fixed; ++sym1__) {
          current_statement__ = 147;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 147;
            assign(X_mean_fixed,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_mean_fixed_flat__[(pos__ - 1)],
              "assigning variable X_mean_fixed");
            current_statement__ = 147;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 148;
      validate_non_negative_index("alpha_mean", "P_mean_fixed", P_mean_fixed);
      current_statement__ = 149;
      context__.validate_dims("data initialization","alpha_mean","double",
          context__.to_vec(P_mean_fixed));
      alpha_mean = Eigen::Matrix<double, -1, 1>(P_mean_fixed);
      stan::math::fill(alpha_mean, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_mean_flat__;
        current_statement__ = 149;
        assign(alpha_mean_flat__, nil_index_list(),
          context__.vals_r("alpha_mean"),
          "assigning variable alpha_mean_flat__");
        current_statement__ = 149;
        pos__ = 1;
        current_statement__ = 149;
        for (int sym1__ = 1; sym1__ <= P_mean_fixed; ++sym1__) {
          current_statement__ = 149;
          assign(alpha_mean, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_mean_flat__[(pos__ - 1)], "assigning variable alpha_mean");
          current_statement__ = 149;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 150;
      validate_non_negative_index("alpha_precision", "P_mean_fixed",
                                  P_mean_fixed);
      current_statement__ = 151;
      validate_non_negative_index("alpha_precision", "P_mean_fixed",
                                  P_mean_fixed);
      current_statement__ = 152;
      context__.validate_dims("data initialization","alpha_precision",
          "double",context__.to_vec(P_mean_fixed, P_mean_fixed));
      alpha_precision = Eigen::Matrix<double, -1, -1>(P_mean_fixed, P_mean_fixed);
      stan::math::fill(alpha_precision, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_precision_flat__;
        current_statement__ = 152;
        assign(alpha_precision_flat__, nil_index_list(),
          context__.vals_r("alpha_precision"),
          "assigning variable alpha_precision_flat__");
        current_statement__ = 152;
        pos__ = 1;
        current_statement__ = 152;
        for (int sym1__ = 1; sym1__ <= P_mean_fixed; ++sym1__) {
          current_statement__ = 152;
          for (int sym2__ = 1; sym2__ <= P_mean_fixed; ++sym2__) {
            current_statement__ = 152;
            assign(alpha_precision,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              alpha_precision_flat__[(pos__ - 1)],
              "assigning variable alpha_precision");
            current_statement__ = 152;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 153;
      context__.validate_dims("data initialization","P_mean_random","int",
          context__.to_vec());
      P_mean_random = std::numeric_limits<int>::min();
      
      current_statement__ = 153;
      P_mean_random = context__.vals_i("P_mean_random")[(1 - 1)];
      current_statement__ = 153;
      current_statement__ = 153;
      check_greater_or_equal(function__, "P_mean_random", P_mean_random, 0);
      current_statement__ = 154;
      validate_non_negative_index("X_mean_random", "N", N);
      current_statement__ = 155;
      validate_non_negative_index("X_mean_random", "P_mean_random",
                                  P_mean_random);
      current_statement__ = 156;
      context__.validate_dims("data initialization","X_mean_random","double",
          context__.to_vec(N, P_mean_random));
      X_mean_random = Eigen::Matrix<double, -1, -1>(N, P_mean_random);
      stan::math::fill(X_mean_random, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_mean_random_flat__;
        current_statement__ = 156;
        assign(X_mean_random_flat__, nil_index_list(),
          context__.vals_r("X_mean_random"),
          "assigning variable X_mean_random_flat__");
        current_statement__ = 156;
        pos__ = 1;
        current_statement__ = 156;
        for (int sym1__ = 1; sym1__ <= P_mean_random; ++sym1__) {
          current_statement__ = 156;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 156;
            assign(X_mean_random,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_mean_random_flat__[(pos__ - 1)],
              "assigning variable X_mean_random");
            current_statement__ = 156;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 157;
      context__.validate_dims("data initialization",
          "tau_squared_mean_random_a","double",context__.to_vec());
      tau_squared_mean_random_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 157;
      tau_squared_mean_random_a = context__.vals_r("tau_squared_mean_random_a")[
          (1 - 1)];
      current_statement__ = 157;
      current_statement__ = 157;
      check_greater_or_equal(function__, "tau_squared_mean_random_a",
                             tau_squared_mean_random_a, 0);
      current_statement__ = 158;
      context__.validate_dims("data initialization",
          "tau_squared_mean_random_b","double",context__.to_vec());
      tau_squared_mean_random_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 158;
      tau_squared_mean_random_b = context__.vals_r("tau_squared_mean_random_b")[
          (1 - 1)];
      current_statement__ = 158;
      current_statement__ = 158;
      check_greater_or_equal(function__, "tau_squared_mean_random_b",
                             tau_squared_mean_random_b, 0);
      current_statement__ = 159;
      context__.validate_dims("data initialization","sigma_squared_nugget_a",
          "double",context__.to_vec());
      sigma_squared_nugget_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 159;
      sigma_squared_nugget_a = context__.vals_r("sigma_squared_nugget_a")[
          (1 - 1)];
      current_statement__ = 159;
      current_statement__ = 159;
      check_greater_or_equal(function__, "sigma_squared_nugget_a",
                             sigma_squared_nugget_a, 0);
      current_statement__ = 160;
      context__.validate_dims("data initialization","sigma_squared_nugget_b",
          "double",context__.to_vec());
      sigma_squared_nugget_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 160;
      sigma_squared_nugget_b = context__.vals_r("sigma_squared_nugget_b")[
          (1 - 1)];
      current_statement__ = 160;
      current_statement__ = 160;
      check_greater_or_equal(function__, "sigma_squared_nugget_b",
                             sigma_squared_nugget_b, 0);
      current_statement__ = 161;
      context__.validate_dims("data initialization","smoothness","double",
          context__.to_vec());
      smoothness = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 161;
      smoothness = context__.vals_r("smoothness")[(1 - 1)];
      current_statement__ = 161;
      current_statement__ = 161;
      check_greater_or_equal(function__, "smoothness", smoothness, 0);
      current_statement__ = 162;
      context__.validate_dims("data initialization","P_deviation_warping",
          "int",context__.to_vec());
      P_deviation_warping = std::numeric_limits<int>::min();
      
      current_statement__ = 162;
      P_deviation_warping = context__.vals_i("P_deviation_warping")[(1 - 1)];
      current_statement__ = 162;
      current_statement__ = 162;
      check_greater_or_equal(function__, "P_deviation_warping",
                             P_deviation_warping, 1);
      current_statement__ = 163;
      validate_non_negative_index("X_deviation_warping", "N", N);
      current_statement__ = 164;
      validate_non_negative_index("X_deviation_warping",
                                  "P_deviation_warping", P_deviation_warping);
      current_statement__ = 165;
      context__.validate_dims("data initialization","X_deviation_warping",
          "double",context__.to_vec(N, P_deviation_warping));
      X_deviation_warping = Eigen::Matrix<double, -1, -1>(N, P_deviation_warping);
      stan::math::fill(X_deviation_warping, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_deviation_warping_flat__;
        current_statement__ = 165;
        assign(X_deviation_warping_flat__, nil_index_list(),
          context__.vals_r("X_deviation_warping"),
          "assigning variable X_deviation_warping_flat__");
        current_statement__ = 165;
        pos__ = 1;
        current_statement__ = 165;
        for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
          current_statement__ = 165;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 165;
            assign(X_deviation_warping,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_deviation_warping_flat__[(pos__ - 1)],
              "assigning variable X_deviation_warping");
            current_statement__ = 165;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 166;
      context__.validate_dims("data initialization","P_deviation_fixed",
          "int",context__.to_vec());
      P_deviation_fixed = std::numeric_limits<int>::min();
      
      current_statement__ = 166;
      P_deviation_fixed = context__.vals_i("P_deviation_fixed")[(1 - 1)];
      current_statement__ = 166;
      current_statement__ = 166;
      check_greater_or_equal(function__, "P_deviation_fixed",
                             P_deviation_fixed, 1);
      current_statement__ = 167;
      validate_non_negative_index("X_deviation_fixed", "N", N);
      current_statement__ = 168;
      validate_non_negative_index("X_deviation_fixed", "P_deviation_fixed",
                                  P_deviation_fixed);
      current_statement__ = 169;
      context__.validate_dims("data initialization","X_deviation_fixed",
          "double",context__.to_vec(N, P_deviation_fixed));
      X_deviation_fixed = Eigen::Matrix<double, -1, -1>(N, P_deviation_fixed);
      stan::math::fill(X_deviation_fixed, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_deviation_fixed_flat__;
        current_statement__ = 169;
        assign(X_deviation_fixed_flat__, nil_index_list(),
          context__.vals_r("X_deviation_fixed"),
          "assigning variable X_deviation_fixed_flat__");
        current_statement__ = 169;
        pos__ = 1;
        current_statement__ = 169;
        for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
          current_statement__ = 169;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 169;
            assign(X_deviation_fixed,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_deviation_fixed_flat__[(pos__ - 1)],
              "assigning variable X_deviation_fixed");
            current_statement__ = 169;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 170;
      validate_non_negative_index("eta_deviation_mean", "P_deviation_fixed",
                                  P_deviation_fixed);
      current_statement__ = 171;
      context__.validate_dims("data initialization","eta_deviation_mean",
          "double",context__.to_vec(P_deviation_fixed));
      eta_deviation_mean = Eigen::Matrix<double, -1, 1>(P_deviation_fixed);
      stan::math::fill(eta_deviation_mean, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_deviation_mean_flat__;
        current_statement__ = 171;
        assign(eta_deviation_mean_flat__, nil_index_list(),
          context__.vals_r("eta_deviation_mean"),
          "assigning variable eta_deviation_mean_flat__");
        current_statement__ = 171;
        pos__ = 1;
        current_statement__ = 171;
        for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
          current_statement__ = 171;
          assign(eta_deviation_mean,
            cons_list(index_uni(sym1__), nil_index_list()),
            eta_deviation_mean_flat__[(pos__ - 1)],
            "assigning variable eta_deviation_mean");
          current_statement__ = 171;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 172;
      validate_non_negative_index("eta_deviation_precision",
                                  "P_deviation_fixed", P_deviation_fixed);
      current_statement__ = 172;
      validate_non_negative_index("eta_deviation_precision",
                                  "P_deviation_fixed", P_deviation_fixed);
      current_statement__ = 173;
      context__.validate_dims("data initialization",
          "eta_deviation_precision","double",
          context__.to_vec(P_deviation_fixed, P_deviation_fixed));
      eta_deviation_precision = Eigen::Matrix<double, -1, -1>(P_deviation_fixed, P_deviation_fixed);
      stan::math::fill(eta_deviation_precision, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_deviation_precision_flat__;
        current_statement__ = 173;
        assign(eta_deviation_precision_flat__, nil_index_list(),
          context__.vals_r("eta_deviation_precision"),
          "assigning variable eta_deviation_precision_flat__");
        current_statement__ = 173;
        pos__ = 1;
        current_statement__ = 173;
        for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
          current_statement__ = 173;
          for (int sym2__ = 1; sym2__ <= P_deviation_fixed; ++sym2__) {
            current_statement__ = 173;
            assign(eta_deviation_precision,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              eta_deviation_precision_flat__[(pos__ - 1)],
              "assigning variable eta_deviation_precision");
            current_statement__ = 173;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 173;
      current_statement__ = 173;
      check_cov_matrix(function__, "eta_deviation_precision",
                       eta_deviation_precision);
      current_statement__ = 174;
      context__.validate_dims("data initialization","P_deviation_random",
          "int",context__.to_vec());
      P_deviation_random = std::numeric_limits<int>::min();
      
      current_statement__ = 174;
      P_deviation_random = context__.vals_i("P_deviation_random")[(1 - 1)];
      current_statement__ = 174;
      current_statement__ = 174;
      check_greater_or_equal(function__, "P_deviation_random",
                             P_deviation_random, 0);
      current_statement__ = 175;
      validate_non_negative_index("X_deviation_random", "N", N);
      current_statement__ = 176;
      validate_non_negative_index("X_deviation_random", "P_deviation_random",
                                  P_deviation_random);
      current_statement__ = 177;
      context__.validate_dims("data initialization","X_deviation_random",
          "double",context__.to_vec(N, P_deviation_random));
      X_deviation_random = Eigen::Matrix<double, -1, -1>(N, P_deviation_random);
      stan::math::fill(X_deviation_random, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_deviation_random_flat__;
        current_statement__ = 177;
        assign(X_deviation_random_flat__, nil_index_list(),
          context__.vals_r("X_deviation_random"),
          "assigning variable X_deviation_random_flat__");
        current_statement__ = 177;
        pos__ = 1;
        current_statement__ = 177;
        for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
          current_statement__ = 177;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 177;
            assign(X_deviation_random,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_deviation_random_flat__[(pos__ - 1)],
              "assigning variable X_deviation_random");
            current_statement__ = 177;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 178;
      context__.validate_dims("data initialization","delta_deviation_random",
          "double",context__.to_vec());
      delta_deviation_random = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 178;
      delta_deviation_random = context__.vals_r("delta_deviation_random")[
          (1 - 1)];
      current_statement__ = 178;
      current_statement__ = 178;
      check_greater_or_equal(function__, "delta_deviation_random",
                             delta_deviation_random, 0);
      current_statement__ = 179;
      context__.validate_dims("data initialization",
          "ell_deviation_random_scale","double",context__.to_vec());
      ell_deviation_random_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 179;
      ell_deviation_random_scale = context__.vals_r("ell_deviation_random_scale")[
          (1 - 1)];
      current_statement__ = 179;
      current_statement__ = 179;
      check_greater_or_equal(function__, "ell_deviation_random_scale",
                             ell_deviation_random_scale, 0);
      current_statement__ = 180;
      context__.validate_dims("data initialization",
          "tau_squared_deviation_random_a","double",context__.to_vec());
      tau_squared_deviation_random_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 180;
      tau_squared_deviation_random_a = context__.vals_r("tau_squared_deviation_random_a")[
          (1 - 1)];
      current_statement__ = 180;
      current_statement__ = 180;
      check_greater_or_equal(function__, "tau_squared_deviation_random_a",
                             tau_squared_deviation_random_a, 0);
      current_statement__ = 181;
      context__.validate_dims("data initialization",
          "tau_squared_deviation_random_b","double",context__.to_vec());
      tau_squared_deviation_random_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 181;
      tau_squared_deviation_random_b = context__.vals_r("tau_squared_deviation_random_b")[
          (1 - 1)];
      current_statement__ = 181;
      current_statement__ = 181;
      check_greater_or_equal(function__, "tau_squared_deviation_random_b",
                             tau_squared_deviation_random_b, 0);
      current_statement__ = 182;
      context__.validate_dims("data initialization","D_horizontal_warpings",
          "int",context__.to_vec());
      D_horizontal_warpings = std::numeric_limits<int>::min();
      
      current_statement__ = 182;
      D_horizontal_warpings = context__.vals_i("D_horizontal_warpings")[
          (1 - 1)];
      current_statement__ = 182;
      current_statement__ = 182;
      check_greater_or_equal(function__, "D_horizontal_warpings",
                             D_horizontal_warpings, 1);
      current_statement__ = 183;
      context__.validate_dims("data initialization","D_geometric","int",
          context__.to_vec());
      D_geometric = std::numeric_limits<int>::min();
      
      current_statement__ = 183;
      D_geometric = context__.vals_i("D_geometric")[(1 - 1)];
      current_statement__ = 183;
      current_statement__ = 183;
      check_greater_or_equal(function__, "D_geometric", D_geometric, 0);
      current_statement__ = 184;
      validate_non_negative_index("axial_warping_unit_mapping", "D", D);
      current_statement__ = 185;
      context__.validate_dims("data initialization",
          "axial_warping_unit_mapping","int",context__.to_vec(D));
      axial_warping_unit_mapping = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 185;
      assign(axial_warping_unit_mapping, nil_index_list(),
        context__.vals_i("axial_warping_unit_mapping"),
        "assigning variable axial_warping_unit_mapping");
      current_statement__ = 185;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 185;
        current_statement__ = 185;
        check_greater_or_equal(function__,
                               "axial_warping_unit_mapping[sym1__]",
                               axial_warping_unit_mapping[(sym1__ - 1)], 1);}
      current_statement__ = 185;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 185;
        current_statement__ = 185;
        check_less_or_equal(function__, "axial_warping_unit_mapping[sym1__]",
                            axial_warping_unit_mapping[(sym1__ - 1)],
                            (D_horizontal_warpings + 1));}
      current_statement__ = 186;
      context__.validate_dims("data initialization","N_indices","int",
          context__.to_vec());
      N_indices = std::numeric_limits<int>::min();
      
      current_statement__ = 186;
      N_indices = context__.vals_i("N_indices")[(1 - 1)];
      current_statement__ = 186;
      current_statement__ = 186;
      check_greater_or_equal(function__, "N_indices", N_indices, 1);
      current_statement__ = 187;
      context__.validate_dims("data initialization","N_blocks","int",
          context__.to_vec());
      N_blocks = std::numeric_limits<int>::min();
      
      current_statement__ = 187;
      N_blocks = context__.vals_i("N_blocks")[(1 - 1)];
      current_statement__ = 187;
      current_statement__ = 187;
      check_greater_or_equal(function__, "N_blocks", N_blocks, 1);
      current_statement__ = 188;
      validate_non_negative_index("block_indices", "N_indices", N_indices);
      current_statement__ = 189;
      context__.validate_dims("data initialization","block_indices","int",
          context__.to_vec(N_indices));
      block_indices = std::vector<int>(N_indices, std::numeric_limits<int>::min());
      
      current_statement__ = 189;
      assign(block_indices, nil_index_list(),
        context__.vals_i("block_indices"), "assigning variable block_indices");
      current_statement__ = 190;
      validate_non_negative_index("block_last_index", "N_blocks", N_blocks);
      current_statement__ = 191;
      context__.validate_dims("data initialization","block_last_index","int",
          context__.to_vec(N_blocks));
      block_last_index = std::vector<int>(N_blocks, std::numeric_limits<int>::min());
      
      current_statement__ = 191;
      assign(block_last_index, nil_index_list(),
        context__.vals_i("block_last_index"),
        "assigning variable block_last_index");
      current_statement__ = 192;
      validate_non_negative_index("block_N_responses", "N_blocks", N_blocks);
      current_statement__ = 193;
      context__.validate_dims("data initialization","block_N_responses",
          "int",context__.to_vec(N_blocks));
      block_N_responses = std::vector<int>(N_blocks, std::numeric_limits<int>::min());
      
      current_statement__ = 193;
      assign(block_N_responses, nil_index_list(),
        context__.vals_i("block_N_responses"),
        "assigning variable block_N_responses");
      current_statement__ = 194;
      validate_non_negative_index("gamma_deviation_a",
                                  "D_horizontal_warpings + 1",
                                  (D_horizontal_warpings + 1));
      current_statement__ = 195;
      context__.validate_dims("data initialization","gamma_deviation_a",
          "double",context__.to_vec((D_horizontal_warpings + 1)));
      gamma_deviation_a = Eigen::Matrix<double, -1, 1>((D_horizontal_warpings
                                                         + 1));
      stan::math::fill(gamma_deviation_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_deviation_a_flat__;
        current_statement__ = 195;
        assign(gamma_deviation_a_flat__, nil_index_list(),
          context__.vals_r("gamma_deviation_a"),
          "assigning variable gamma_deviation_a_flat__");
        current_statement__ = 195;
        pos__ = 1;
        current_statement__ = 195;
        for (int sym1__ = 1; sym1__ <= (D_horizontal_warpings + 1); ++sym1__) {
          current_statement__ = 195;
          assign(gamma_deviation_a,
            cons_list(index_uni(sym1__), nil_index_list()),
            gamma_deviation_a_flat__[(pos__ - 1)],
            "assigning variable gamma_deviation_a");
          current_statement__ = 195;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 195;
      for (int sym1__ = 1; sym1__ <= (D_horizontal_warpings + 1); ++sym1__) {
        current_statement__ = 195;
        current_statement__ = 195;
        check_greater_or_equal(function__, "gamma_deviation_a[sym1__]",
                               gamma_deviation_a[(sym1__ - 1)], 0);}
      current_statement__ = 196;
      validate_non_negative_index("gamma_deviation_b",
                                  "D_horizontal_warpings + 1",
                                  (D_horizontal_warpings + 1));
      current_statement__ = 197;
      context__.validate_dims("data initialization","gamma_deviation_b",
          "double",context__.to_vec((D_horizontal_warpings + 1)));
      gamma_deviation_b = Eigen::Matrix<double, -1, 1>((D_horizontal_warpings
                                                         + 1));
      stan::math::fill(gamma_deviation_b, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_deviation_b_flat__;
        current_statement__ = 197;
        assign(gamma_deviation_b_flat__, nil_index_list(),
          context__.vals_r("gamma_deviation_b"),
          "assigning variable gamma_deviation_b_flat__");
        current_statement__ = 197;
        pos__ = 1;
        current_statement__ = 197;
        for (int sym1__ = 1; sym1__ <= (D_horizontal_warpings + 1); ++sym1__) {
          current_statement__ = 197;
          assign(gamma_deviation_b,
            cons_list(index_uni(sym1__), nil_index_list()),
            gamma_deviation_b_flat__[(pos__ - 1)],
            "assigning variable gamma_deviation_b");
          current_statement__ = 197;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 197;
      for (int sym1__ = 1; sym1__ <= (D_horizontal_warpings + 1); ++sym1__) {
        current_statement__ = 197;
        current_statement__ = 197;
        check_greater_or_equal(function__, "gamma_deviation_b[sym1__]",
                               gamma_deviation_b[(sym1__ - 1)], 0);}
      current_statement__ = 198;
      context__.validate_dims("data initialization","L_deviation_shape",
          "double",context__.to_vec());
      L_deviation_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 198;
      L_deviation_shape = context__.vals_r("L_deviation_shape")[(1 - 1)];
      current_statement__ = 198;
      current_statement__ = 198;
      check_greater_or_equal(function__, "L_deviation_shape",
                             L_deviation_shape, 0);
      current_statement__ = 199;
      P_mean_total = std::numeric_limits<int>::min();
      
      current_statement__ = 199;
      P_mean_total = (P_mean_fixed + P_mean_random);
      current_statement__ = 200;
      validate_non_negative_index("X_mean", "N", N);
      current_statement__ = 201;
      validate_non_negative_index("X_mean", "P_mean_total", P_mean_total);
      current_statement__ = 202;
      X_mean = Eigen::Matrix<double, -1, -1>(N, P_mean_total);
      stan::math::fill(X_mean, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 202;
      assign(X_mean, nil_index_list(),
        append_col(X_mean_fixed, X_mean_random), "assigning variable X_mean");
      current_statement__ = 203;
      validate_non_negative_index("alpha_Q_mu", "P_mean_total", P_mean_total);
      current_statement__ = 204;
      alpha_Q_mu = Eigen::Matrix<double, -1, 1>(P_mean_total);
      stan::math::fill(alpha_Q_mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 204;
      assign(alpha_Q_mu, nil_index_list(), rep_vector(0, P_mean_total),
        "assigning variable alpha_Q_mu");
      current_statement__ = 205;
      validate_non_negative_index("y_tilde", "N", N);
      current_statement__ = 206;
      y_tilde = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y_tilde, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 206;
      assign(y_tilde, nil_index_list(),
        subtract(y, multiply(X_mean_fixed, alpha_mean)),
        "assigning variable y_tilde");
      current_statement__ = 207;
      N_block_max = std::numeric_limits<int>::min();
      
      current_statement__ = 207;
      N_block_max = get_N_block_max(block_last_index, pstream__);
      current_statement__ = 208;
      validate_non_negative_index("indices_X_mean_non_zero", "P_mean_total",
                                  P_mean_total);
      current_statement__ = 209;
      validate_non_negative_index("indices_X_mean_non_zero", "N_blocks",
                                  N_blocks);
      current_statement__ = 210;
      indices_X_mean_non_zero = std::vector<std::vector<int>>(P_mean_total, std::vector<int>(N_blocks, std::numeric_limits<int>::min()));
      
      current_statement__ = 211;
      validate_non_negative_index("P_X_mean_non_zero", "N_blocks", N_blocks);
      current_statement__ = 212;
      P_X_mean_non_zero = std::vector<int>(N_blocks, std::numeric_limits<int>::min());
      
      current_statement__ = 213;
      current_block_start_a = std::numeric_limits<int>::min();
      
      current_statement__ = 213;
      current_block_start_a = 1;
      current_statement__ = 214;
      assign(alpha_Q_mu,
        cons_list(index_min_max(1, P_mean_fixed), nil_index_list()),
        multiply(alpha_precision, alpha_mean),
        "assigning variable alpha_Q_mu");
      current_statement__ = 228;
      for (int i = 1; i <= N_blocks; ++i) {
        int N_current_block;
        N_current_block = std::numeric_limits<int>::min();
        
        current_statement__ = 215;
        N_current_block = ((block_last_index[(i - 1)] -
                             current_block_start_a) + 1);
        current_statement__ = 216;
        validate_non_negative_index("indices_current_block", "N_block_max",
                                    N_block_max);
        std::vector<int> indices_current_block;
        indices_current_block = std::vector<int>(N_block_max, std::numeric_limits<int>::min());
        
        current_statement__ = 218;
        assign(indices_current_block,
          cons_list(index_min_max(1, N_current_block), nil_index_list()),
          rvalue(block_indices,
            cons_list(
              index_min_max(current_block_start_a, block_last_index[(i - 1)]),
              nil_index_list()), "block_indices"),
          "assigning variable indices_current_block");
        current_statement__ = 219;
        assign(P_X_mean_non_zero, cons_list(index_uni(i), nil_index_list()),
          0, "assigning variable P_X_mean_non_zero");
        current_statement__ = 225;
        for (int k = 1; k <= P_mean_total; ++k) {
          current_statement__ = 223;
          if (logical_neq(
                max(
                  stan::math::fabs(
                    rvalue(X_mean,
                      cons_list(
                        index_multi(rvalue(indices_current_block,
                                      cons_list(
                                        index_min_max(1, N_current_block),
                                        nil_index_list()),
                                      "indices_current_block")),
                        cons_list(index_uni(k), nil_index_list())), "X_mean"))),
                0)) {
            current_statement__ = 220;
            assign(P_X_mean_non_zero,
              cons_list(index_uni(i), nil_index_list()),
              (P_X_mean_non_zero[(i - 1)] + 1),
              "assigning variable P_X_mean_non_zero");
            current_statement__ = 221;
            assign(indices_X_mean_non_zero,
              cons_list(index_uni(P_X_mean_non_zero[(i - 1)]),
                cons_list(index_uni(i), nil_index_list())), k,
              "assigning variable indices_X_mean_non_zero");
          } }
        current_statement__ = 226;
        current_block_start_a = (block_last_index[(i - 1)] + 1);}
      current_statement__ = 229;
      validate_non_negative_index("eta_deviation", "P_deviation_fixed",
                                  P_deviation_fixed);
      current_statement__ = 230;
      validate_non_negative_index("zeta_deviation", "P_deviation_random",
                                  P_deviation_random);
      current_statement__ = 231;
      validate_non_negative_index("gamma_deviation_horizontal",
                                  "D_horizontal_warpings",
                                  D_horizontal_warpings);
      current_statement__ = 232;
      validate_non_negative_index("gamma_deviation_vertical",
                                  "P_deviation_warping", P_deviation_warping);
      current_statement__ = 233;
      validate_non_negative_index("L_deviation", "D_geometric", D_geometric);
      current_statement__ = 233;
      validate_non_negative_index("L_deviation", "D_geometric", D_geometric);
      current_statement__ = 234;
      validate_non_negative_index("alpha_beta_hat", "P_mean_total",
                                  P_mean_total);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += P_deviation_fixed;
      num_params_r__ += P_deviation_random;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += D_horizontal_warpings;
      num_params_r__ += P_deviation_warping;
      num_params_r__ += ((D_geometric * (D_geometric - 1)) / 2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_full_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ tau_squared_mean_random;
      tau_squared_mean_random = DUMMY_VAR__;
      
      current_statement__ = 1;
      tau_squared_mean_random = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        tau_squared_mean_random = stan::math::lb_constrain(
                                    tau_squared_mean_random, 0, lp__);
      } else {
        current_statement__ = 1;
        tau_squared_mean_random = stan::math::lb_constrain(
                                    tau_squared_mean_random, 0);
      }
      local_scalar_t__ sigma_squared_nugget;
      sigma_squared_nugget = DUMMY_VAR__;
      
      current_statement__ = 2;
      sigma_squared_nugget = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma_squared_nugget = stan::math::lb_constrain(sigma_squared_nugget,
                                 0, lp__);
      } else {
        current_statement__ = 2;
        sigma_squared_nugget = stan::math::lb_constrain(sigma_squared_nugget,
                                 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> eta_deviation;
      eta_deviation = Eigen::Matrix<local_scalar_t__, -1, 1>(P_deviation_fixed);
      stan::math::fill(eta_deviation, DUMMY_VAR__);
      
      current_statement__ = 3;
      eta_deviation = in__.vector(P_deviation_fixed);
      Eigen::Matrix<local_scalar_t__, -1, 1> zeta_deviation;
      zeta_deviation = Eigen::Matrix<local_scalar_t__, -1, 1>(P_deviation_random);
      stan::math::fill(zeta_deviation, DUMMY_VAR__);
      
      current_statement__ = 4;
      zeta_deviation = in__.vector(P_deviation_random);
      local_scalar_t__ ell_deviation_random;
      ell_deviation_random = DUMMY_VAR__;
      
      current_statement__ = 5;
      ell_deviation_random = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        ell_deviation_random = stan::math::lb_constrain(ell_deviation_random,
                                 0, lp__);
      } else {
        current_statement__ = 5;
        ell_deviation_random = stan::math::lb_constrain(ell_deviation_random,
                                 0);
      }
      local_scalar_t__ tau_squared_deviation_random;
      tau_squared_deviation_random = DUMMY_VAR__;
      
      current_statement__ = 6;
      tau_squared_deviation_random = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        tau_squared_deviation_random = stan::math::lb_constrain(
                                         tau_squared_deviation_random, 0,
                                         lp__);
      } else {
        current_statement__ = 6;
        tau_squared_deviation_random = stan::math::lb_constrain(
                                         tau_squared_deviation_random, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_deviation_horizontal;
      gamma_deviation_horizontal = Eigen::Matrix<local_scalar_t__, -1, 1>(D_horizontal_warpings);
      stan::math::fill(gamma_deviation_horizontal, DUMMY_VAR__);
      
      current_statement__ = 7;
      gamma_deviation_horizontal = in__.vector(D_horizontal_warpings);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= D_horizontal_warpings; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(gamma_deviation_horizontal,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(
              gamma_deviation_horizontal[(sym1__ - 1)], 0, lp__),
            "assigning variable gamma_deviation_horizontal");
        } else {
          current_statement__ = 7;
          assign(gamma_deviation_horizontal,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(
              gamma_deviation_horizontal[(sym1__ - 1)], 0),
            "assigning variable gamma_deviation_horizontal");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_deviation_vertical;
      gamma_deviation_vertical = Eigen::Matrix<local_scalar_t__, -1, 1>(P_deviation_warping);
      stan::math::fill(gamma_deviation_vertical, DUMMY_VAR__);
      
      current_statement__ = 8;
      gamma_deviation_vertical = in__.vector(P_deviation_warping);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(gamma_deviation_vertical,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gamma_deviation_vertical[(sym1__ - 1)],
              0, lp__), "assigning variable gamma_deviation_vertical");
        } else {
          current_statement__ = 8;
          assign(gamma_deviation_vertical,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gamma_deviation_vertical[(sym1__ - 1)],
              0), "assigning variable gamma_deviation_vertical");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> L_deviation;
      L_deviation = Eigen::Matrix<local_scalar_t__, -1, -1>(D_geometric, D_geometric);
      stan::math::fill(L_deviation, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_deviation_in__;
      L_deviation_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((D_geometric
                                                                   *
                                                                   (D_geometric
                                                                    - 1)) /
                                                                  2));
      stan::math::fill(L_deviation_in__, DUMMY_VAR__);
      
      current_statement__ = 9;
      L_deviation_in__ = in__.vector(((D_geometric * (D_geometric - 1)) / 2));
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        assign(L_deviation, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_deviation_in__, D_geometric,
            lp__), "assigning variable L_deviation");
      } else {
        current_statement__ = 9;
        assign(L_deviation, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_deviation_in__, D_geometric),
          "assigning variable L_deviation");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_beta_hat;
      alpha_beta_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(P_mean_total);
      stan::math::fill(alpha_beta_hat, DUMMY_VAR__);
      
      local_scalar_t__ log_marginal;
      log_marginal = DUMMY_VAR__;
      
      {
        current_statement__ = 12;
        validate_non_negative_index("x_warped", "N", N);
        current_statement__ = 13;
        validate_non_negative_index("x_warped", "D", D);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> x_warped;
        x_warped = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(D));
        stan::math::fill(x_warped, DUMMY_VAR__);
        
        local_scalar_t__ log_det;
        log_det = DUMMY_VAR__;
        
        current_statement__ = 15;
        log_det = 0;
        local_scalar_t__ y_tildet_Q_y_tilde;
        y_tildet_Q_y_tilde = DUMMY_VAR__;
        
        current_statement__ = 16;
        y_tildet_Q_y_tilde = 0;
        current_statement__ = 17;
        validate_non_negative_index("Xt_Q_X", "P_mean_total", P_mean_total);
        current_statement__ = 18;
        validate_non_negative_index("Xt_Q_X", "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, -1> Xt_Q_X;
        Xt_Q_X = Eigen::Matrix<local_scalar_t__, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(Xt_Q_X, DUMMY_VAR__);
        
        current_statement__ = 19;
        assign(Xt_Q_X, nil_index_list(),
          rep_matrix(0, P_mean_total, P_mean_total),
          "assigning variable Xt_Q_X");
        current_statement__ = 20;
        validate_non_negative_index("Xt_Q_y", "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, 1> Xt_Q_y;
        Xt_Q_y = Eigen::Matrix<local_scalar_t__, -1, 1>(P_mean_total);
        stan::math::fill(Xt_Q_y, DUMMY_VAR__);
        
        current_statement__ = 21;
        assign(Xt_Q_y, nil_index_list(), rep_vector(0, P_mean_total),
          "assigning variable Xt_Q_y");
        current_statement__ = 22;
        validate_non_negative_index("Xt_Q_y_tilde", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, 1> Xt_Q_y_tilde;
        Xt_Q_y_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(P_mean_total);
        stan::math::fill(Xt_Q_y_tilde, DUMMY_VAR__);
        
        current_statement__ = 23;
        assign(Xt_Q_y_tilde, nil_index_list(), rep_vector(0, P_mean_total),
          "assigning variable Xt_Q_y_tilde");
        current_statement__ = 24;
        validate_non_negative_index("alpha_beta_prior_precision",
                                    "P_mean_total", P_mean_total);
        current_statement__ = 25;
        validate_non_negative_index("alpha_beta_prior_precision",
                                    "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, -1> alpha_beta_prior_precision;
        alpha_beta_prior_precision = Eigen::Matrix<local_scalar_t__, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(alpha_beta_prior_precision, DUMMY_VAR__);
        
        current_statement__ = 26;
        assign(alpha_beta_prior_precision, nil_index_list(),
          rep_matrix(0, P_mean_total, P_mean_total),
          "assigning variable alpha_beta_prior_precision");
        current_statement__ = 27;
        validate_non_negative_index("L_alpha_beta_precision", "P_mean_total",
                                    P_mean_total);
        current_statement__ = 28;
        validate_non_negative_index("L_alpha_beta_precision", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_alpha_beta_precision;
        L_alpha_beta_precision = Eigen::Matrix<local_scalar_t__, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(L_alpha_beta_precision, DUMMY_VAR__);
        
        current_statement__ = 30;
        validate_non_negative_index("L_alpha_beta_prior_precision",
                                    "P_mean_total", P_mean_total);
        current_statement__ = 31;
        validate_non_negative_index("L_alpha_beta_prior_precision",
                                    "P_mean_total", P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_alpha_beta_prior_precision;
        L_alpha_beta_prior_precision = Eigen::Matrix<local_scalar_t__, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(L_alpha_beta_prior_precision, DUMMY_VAR__);
        
        current_statement__ = 33;
        validate_non_negative_index("alpha_beta_precision", "P_mean_total",
                                    P_mean_total);
        current_statement__ = 34;
        validate_non_negative_index("alpha_beta_precision", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, -1> alpha_beta_precision;
        alpha_beta_precision = Eigen::Matrix<local_scalar_t__, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(alpha_beta_precision, DUMMY_VAR__);
        
        current_statement__ = 36;
        validate_non_negative_index("alpha_beta_rhs", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, 1> alpha_beta_rhs;
        alpha_beta_rhs = Eigen::Matrix<local_scalar_t__, -1, 1>(P_mean_total);
        stan::math::fill(alpha_beta_rhs, DUMMY_VAR__);
        
        current_statement__ = 38;
        validate_non_negative_index("deviation_log_variance", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> deviation_log_variance;
        deviation_log_variance = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(deviation_log_variance, DUMMY_VAR__);
        
        current_statement__ = 40;
        validate_non_negative_index("deviation_sd", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> deviation_sd;
        deviation_sd = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(deviation_sd, DUMMY_VAR__);
        
        current_statement__ = 42;
        validate_non_negative_index("K_block", "N_block_max", N_block_max);
        current_statement__ = 43;
        validate_non_negative_index("K_block", "N_block_max", N_block_max);
        Eigen::Matrix<local_scalar_t__, -1, -1> K_block;
        K_block = Eigen::Matrix<local_scalar_t__, -1, -1>(N_block_max, N_block_max);
        stan::math::fill(K_block, DUMMY_VAR__);
        
        current_statement__ = 45;
        validate_non_negative_index("L_block", "N_block_max", N_block_max);
        current_statement__ = 46;
        validate_non_negative_index("L_block", "N_block_max", N_block_max);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_block;
        L_block = Eigen::Matrix<local_scalar_t__, -1, -1>(N_block_max, N_block_max);
        stan::math::fill(L_block, DUMMY_VAR__);
        
        current_statement__ = 48;
        validate_non_negative_index("L_inv_X_block", "N_block_max",
                                    N_block_max);
        current_statement__ = 49;
        validate_non_negative_index("L_inv_X_block", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_inv_X_block;
        L_inv_X_block = Eigen::Matrix<local_scalar_t__, -1, -1>(N_block_max, P_mean_total);
        stan::math::fill(L_inv_X_block, DUMMY_VAR__);
        
        current_statement__ = 51;
        validate_non_negative_index("L_inv_y_block", "N_block_max",
                                    N_block_max);
        Eigen::Matrix<local_scalar_t__, -1, 1> L_inv_y_block;
        L_inv_y_block = Eigen::Matrix<local_scalar_t__, -1, 1>(N_block_max);
        stan::math::fill(L_inv_y_block, DUMMY_VAR__);
        
        current_statement__ = 53;
        validate_non_negative_index("L_inv_y_tilde_block", "N_block_max",
                                    N_block_max);
        Eigen::Matrix<local_scalar_t__, -1, 1> L_inv_y_tilde_block;
        L_inv_y_tilde_block = Eigen::Matrix<local_scalar_t__, -1, 1>(N_block_max);
        stan::math::fill(L_inv_y_tilde_block, DUMMY_VAR__);
        
        int current_block_start;
        current_block_start = std::numeric_limits<int>::min();
        
        current_statement__ = 55;
        current_block_start = 1;
        int N_current_block;
        N_current_block = std::numeric_limits<int>::min();
        
        int N_parents_current_block;
        N_parents_current_block = std::numeric_limits<int>::min();
        
        current_statement__ = 58;
        validate_non_negative_index("indices_current_block", "N_block_max",
                                    N_block_max);
        std::vector<int> indices_current_block;
        indices_current_block = std::vector<int>(N_block_max, std::numeric_limits<int>::min());
        
        current_statement__ = 60;
        assign(deviation_log_variance, nil_index_list(),
          multiply(X_deviation_fixed, eta_deviation),
          "assigning variable deviation_log_variance");
        current_statement__ = 63;
        if (logical_gt(P_deviation_random, 0)) {
          current_statement__ = 61;
          assign(deviation_log_variance, nil_index_list(),
            add(stan::model::deep_copy(deviation_log_variance),
              multiply(X_deviation_random, zeta_deviation)),
            "assigning variable deviation_log_variance");
        } 
        current_statement__ = 64;
        assign(deviation_sd, nil_index_list(),
          stan::math::exp(multiply(0.5, deviation_log_variance)),
          "assigning variable deviation_sd");
        current_statement__ = 73;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 67;
          for (int j = 1; j <= (D - 1); ++j) {
            current_statement__ = 65;
            assign(x_warped,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              ((gamma_deviation_horizontal[(axial_warping_unit_mapping[
                                             (j - 1)] - 1)] *
                 scaling[(j - 1)]) * x[(i - 1)][(j - 1)]),
              "assigning variable x_warped");}
          current_statement__ = 68;
          assign(x_warped,
            cons_list(index_uni(i),
              cons_list(index_uni(D), nil_index_list())),
            multiply(
              rvalue(X_deviation_warping,
                cons_list(index_uni(i),
                  cons_list(index_omni(), nil_index_list())),
                "X_deviation_warping"),
              cumulative_sum(gamma_deviation_vertical)),
            "assigning variable x_warped");
          current_statement__ = 71;
          if (logical_gt(D_geometric, 0)) {
            current_statement__ = 69;
            assign(x_warped, cons_list(index_uni(i), nil_index_list()),
              multiply(transpose(L_deviation),
                stan::model::deep_copy(x_warped[(i - 1)])),
              "assigning variable x_warped");
          } }
        current_statement__ = 89;
        for (int i = 1; i <= N_blocks; ++i) {
          current_statement__ = 74;
          N_current_block = ((block_last_index[(i - 1)] -
                               current_block_start) + 1);
          current_statement__ = 75;
          N_parents_current_block = (N_current_block -
                                      block_N_responses[(i - 1)]);
          current_statement__ = 76;
          assign(indices_current_block,
            cons_list(index_min_max(1, N_current_block), nil_index_list()),
            rvalue(block_indices,
              cons_list(
                index_min_max(current_block_start, block_last_index[(i - 1)]),
                nil_index_list()), "block_indices"),
            "assigning variable indices_current_block");
          current_statement__ = 77;
          assign(K_block,
            cons_list(index_min_max(1, N_current_block),
              cons_list(index_min_max(1, N_current_block), nil_index_list())),
            geowarp_process_covariance(sigma_squared_nugget,
              rvalue(deviation_sd,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  nil_index_list()), "deviation_sd"),
              rvalue(x_warped,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  nil_index_list()), "x_warped"), smoothness, pstream__),
            "assigning variable K_block");
          current_statement__ = 78;
          assign(L_block,
            cons_list(index_min_max(1, N_current_block),
              cons_list(index_min_max(1, N_current_block), nil_index_list())),
            cholesky_decompose(
              rvalue(K_block,
                cons_list(index_min_max(1, N_current_block),
                  cons_list(index_min_max(1, N_current_block),
                    nil_index_list())), "K_block")),
            "assigning variable L_block");
          current_statement__ = 79;
          assign(L_inv_X_block,
            cons_list(index_min_max(1, N_current_block),
              cons_list(index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                nil_index_list())),
            mdivide_left_tri_low(
              rvalue(L_block,
                cons_list(index_min_max(1, N_current_block),
                  cons_list(index_min_max(1, N_current_block),
                    nil_index_list())), "L_block"),
              rvalue(X_mean,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  cons_list(
                    index_multi(rvalue(indices_X_mean_non_zero,
                                  cons_list(
                                    index_min_max(1, P_X_mean_non_zero[
                                    (i - 1)]),
                                    cons_list(index_uni(i), nil_index_list())),
                                  "indices_X_mean_non_zero")),
                    nil_index_list())), "X_mean")),
            "assigning variable L_inv_X_block");
          current_statement__ = 80;
          assign(L_inv_y_block,
            cons_list(index_min_max(1, N_current_block), nil_index_list()),
            mdivide_left_tri_low(
              rvalue(L_block,
                cons_list(index_min_max(1, N_current_block),
                  cons_list(index_min_max(1, N_current_block),
                    nil_index_list())), "L_block"),
              rvalue(y,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  nil_index_list()), "y")),
            "assigning variable L_inv_y_block");
          current_statement__ = 81;
          assign(L_inv_y_tilde_block,
            cons_list(index_min_max(1, N_current_block), nil_index_list()),
            mdivide_left_tri_low(
              rvalue(L_block,
                cons_list(index_min_max(1, N_current_block),
                  cons_list(index_min_max(1, N_current_block),
                    nil_index_list())), "L_block"),
              rvalue(y_tilde,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  nil_index_list()), "y_tilde")),
            "assigning variable L_inv_y_tilde_block");
          current_statement__ = 82;
          log_det = (log_det +
                      (2 *
                        sum(
                          stan::math::log(
                            diagonal(
                              rvalue(L_block,
                                cons_list(
                                  index_min_max((N_parents_current_block + 1), N_current_block),
                                  cons_list(
                                    index_min_max((N_parents_current_block +
                                                    1), N_current_block),
                                    nil_index_list())), "L_block"))))));
          current_statement__ = 83;
          y_tildet_Q_y_tilde = (y_tildet_Q_y_tilde +
                                 sum(
                                   square(
                                     rvalue(L_inv_y_tilde_block,
                                       cons_list(
                                         index_min_max((N_parents_current_block
                                                         + 1), N_current_block),
                                         nil_index_list()),
                                       "L_inv_y_tilde_block"))));
          current_statement__ = 84;
          assign(Xt_Q_y,
            cons_list(
              index_multi(rvalue(indices_X_mean_non_zero,
                            cons_list(
                              index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                              cons_list(index_uni(i), nil_index_list())),
                            "indices_X_mean_non_zero")), nil_index_list()),
            add(
              stan::model::deep_copy(
                rvalue(Xt_Q_y,
                  cons_list(
                    index_multi(rvalue(indices_X_mean_non_zero,
                                  cons_list(
                                    index_min_max(1, P_X_mean_non_zero[
                                    (i - 1)]),
                                    cons_list(index_uni(i), nil_index_list())),
                                  "indices_X_mean_non_zero")),
                    nil_index_list()), "Xt_Q_y")),
              multiply(
                transpose(
                  rvalue(L_inv_X_block,
                    cons_list(
                      index_min_max((N_parents_current_block + 1), N_current_block),
                      cons_list(index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                        nil_index_list())), "L_inv_X_block")),
                rvalue(L_inv_y_block,
                  cons_list(
                    index_min_max((N_parents_current_block + 1), N_current_block),
                    nil_index_list()), "L_inv_y_block"))),
            "assigning variable Xt_Q_y");
          current_statement__ = 85;
          assign(Xt_Q_y_tilde,
            cons_list(
              index_multi(rvalue(indices_X_mean_non_zero,
                            cons_list(
                              index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                              cons_list(index_uni(i), nil_index_list())),
                            "indices_X_mean_non_zero")), nil_index_list()),
            add(
              stan::model::deep_copy(
                rvalue(Xt_Q_y_tilde,
                  cons_list(
                    index_multi(rvalue(indices_X_mean_non_zero,
                                  cons_list(
                                    index_min_max(1, P_X_mean_non_zero[
                                    (i - 1)]),
                                    cons_list(index_uni(i), nil_index_list())),
                                  "indices_X_mean_non_zero")),
                    nil_index_list()), "Xt_Q_y_tilde")),
              multiply(
                transpose(
                  rvalue(L_inv_X_block,
                    cons_list(
                      index_min_max((N_parents_current_block + 1), N_current_block),
                      cons_list(index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                        nil_index_list())), "L_inv_X_block")),
                rvalue(L_inv_y_tilde_block,
                  cons_list(
                    index_min_max((N_parents_current_block + 1), N_current_block),
                    nil_index_list()), "L_inv_y_tilde_block"))),
            "assigning variable Xt_Q_y_tilde");
          current_statement__ = 86;
          assign(Xt_Q_X,
            cons_list(
              index_multi(rvalue(indices_X_mean_non_zero,
                            cons_list(
                              index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                              cons_list(index_uni(i), nil_index_list())),
                            "indices_X_mean_non_zero")),
              cons_list(
                index_multi(rvalue(indices_X_mean_non_zero,
                              cons_list(
                                index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                                cons_list(index_uni(i), nil_index_list())),
                              "indices_X_mean_non_zero")), nil_index_list())),
            add(
              stan::model::deep_copy(
                rvalue(Xt_Q_X,
                  cons_list(
                    index_multi(rvalue(indices_X_mean_non_zero,
                                  cons_list(
                                    index_min_max(1, P_X_mean_non_zero[
                                    (i - 1)]),
                                    cons_list(index_uni(i), nil_index_list())),
                                  "indices_X_mean_non_zero")),
                    cons_list(
                      index_multi(rvalue(indices_X_mean_non_zero,
                                    cons_list(
                                      index_min_max(1, P_X_mean_non_zero[
                                      (i - 1)]),
                                      cons_list(index_uni(i),
                                        nil_index_list())),
                                    "indices_X_mean_non_zero")),
                      nil_index_list())), "Xt_Q_X")),
              crossprod(
                rvalue(L_inv_X_block,
                  cons_list(
                    index_min_max((N_parents_current_block + 1), N_current_block),
                    cons_list(index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                      nil_index_list())), "L_inv_X_block"))),
            "assigning variable Xt_Q_X");
          current_statement__ = 87;
          current_block_start = (block_last_index[(i - 1)] + 1);}
        current_statement__ = 90;
        assign(alpha_beta_prior_precision,
          cons_list(index_min_max(1, P_mean_fixed),
            cons_list(index_min_max(1, P_mean_fixed), nil_index_list())),
          alpha_precision, "assigning variable alpha_beta_prior_precision");
        current_statement__ = 93;
        if (logical_gt(P_mean_total, P_mean_fixed)) {
          current_statement__ = 91;
          assign(alpha_beta_prior_precision,
            cons_list(index_min_max((P_mean_fixed + 1), P_mean_total),
              cons_list(index_min_max((P_mean_fixed + 1), P_mean_total),
                nil_index_list())),
            rw1d_precision(P_mean_random, tau_squared_mean_random, pstream__),
            "assigning variable alpha_beta_prior_precision");
        } 
        current_statement__ = 94;
        assign(alpha_beta_precision, nil_index_list(),
          add(Xt_Q_X, alpha_beta_prior_precision),
          "assigning variable alpha_beta_precision");
        current_statement__ = 95;
        assign(L_alpha_beta_prior_precision, nil_index_list(),
          cholesky_decompose(alpha_beta_prior_precision),
          "assigning variable L_alpha_beta_prior_precision");
        current_statement__ = 96;
        assign(L_alpha_beta_precision, nil_index_list(),
          cholesky_decompose(alpha_beta_precision),
          "assigning variable L_alpha_beta_precision");
        current_statement__ = 97;
        assign(alpha_beta_rhs, nil_index_list(), add(Xt_Q_y, alpha_Q_mu),
          "assigning variable alpha_beta_rhs");
        current_statement__ = 98;
        assign(alpha_beta_hat, nil_index_list(),
          chol_solve_L_b(L_alpha_beta_precision, alpha_beta_rhs, pstream__),
          "assigning variable alpha_beta_hat");
        current_statement__ = 99;
        log_marginal = (-0.5 *
                         (((((2 *
                               sum(
                                 stan::math::log(
                                   diagonal(L_alpha_beta_precision)))) -
                              (2 *
                                sum(
                                  stan::math::log(
                                    diagonal(L_alpha_beta_prior_precision)))))
                             + log_det) + y_tildet_Q_y_tilde) -
                           sum(
                             square(
                               mdivide_left_tri_low(L_alpha_beta_precision,
                                 Xt_Q_y_tilde)))));
      }
      {
        current_statement__ = 101;
        lp_accum__.add(log_marginal);
        current_statement__ = 106;
        if (logical_gt(tau_squared_mean_random_b, 0)) {
          current_statement__ = 104;
          lp_accum__.add(
            inv_gamma_lpdf<propto__>(tau_squared_mean_random,
              tau_squared_mean_random_a, tau_squared_mean_random_b));
        } else {
          current_statement__ = 102;
          lp_accum__.add(-stan::math::log(tau_squared_mean_random));
        }
        current_statement__ = 111;
        if (logical_gt(sigma_squared_nugget_b, 0)) {
          current_statement__ = 109;
          lp_accum__.add(
            inv_gamma_lpdf<propto__>(sigma_squared_nugget,
              sigma_squared_nugget_a, sigma_squared_nugget_b));
        } else {
          current_statement__ = 107;
          lp_accum__.add(-stan::math::log(sigma_squared_nugget));
        }
        current_statement__ = 112;
        lp_accum__.add(
          multi_normal_prec_lpdf<propto__>(eta_deviation, eta_deviation_mean,
            eta_deviation_precision));
        current_statement__ = 115;
        if (logical_gt(P_deviation_random, 0)) {
          current_statement__ = 113;
          lp_accum__.add(
            multi_normal_prec_lpdf<propto__>(zeta_deviation,
              rep_vector(0, P_deviation_random),
              exp1d_precision(P_deviation_random, delta_deviation_random,
                ell_deviation_random,
                tau_squared_deviation_random, pstream__)));
        } 
        current_statement__ = 118;
        if (logical_gt(ell_deviation_random_scale, 0)) {
          current_statement__ = 116;
          lp_accum__.add(
            normal_lpdf<propto__>(ell_deviation_random, 0,
              ell_deviation_random_scale));
        } 
        current_statement__ = 123;
        if (logical_gt(tau_squared_deviation_random_b, 0)) {
          current_statement__ = 121;
          lp_accum__.add(
            inv_gamma_lpdf<propto__>(tau_squared_deviation_random,
              tau_squared_deviation_random_a, tau_squared_deviation_random_b));
        } else {
          current_statement__ = 119;
          lp_accum__.add(-stan::math::log(tau_squared_deviation_random));
        }
        current_statement__ = 128;
        for (int i = 1; i <= D_horizontal_warpings; ++i) {
          current_statement__ = 126;
          if (logical_gt(gamma_deviation_b[(i - 1)], 0)) {
            current_statement__ = 124;
            lp_accum__.add(
              gamma_lpdf<propto__>(gamma_deviation_horizontal[(i - 1)],
                gamma_deviation_a[(i - 1)], gamma_deviation_b[(i - 1)]));
          } }
        current_statement__ = 131;
        if (logical_gt(gamma_deviation_b[((D_horizontal_warpings + 1) - 1)],
              0)) {
          current_statement__ = 129;
          lp_accum__.add(
            gamma_lpdf<propto__>(gamma_deviation_vertical,
              gamma_deviation_a[((D_horizontal_warpings + 1) - 1)],
              gamma_deviation_b[((D_horizontal_warpings + 1) - 1)]));
        } 
        current_statement__ = 134;
        if (logical_gt(D_geometric, 0)) {
          current_statement__ = 132;
          lp_accum__.add(
            lkj_corr_cholesky_lpdf<propto__>(L_deviation, L_deviation_shape));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_full_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double tau_squared_mean_random;
      tau_squared_mean_random = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      tau_squared_mean_random = in__.scalar();
      current_statement__ = 1;
      tau_squared_mean_random = stan::math::lb_constrain(
                                  tau_squared_mean_random, 0);
      double sigma_squared_nugget;
      sigma_squared_nugget = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_squared_nugget = in__.scalar();
      current_statement__ = 2;
      sigma_squared_nugget = stan::math::lb_constrain(sigma_squared_nugget, 0);
      Eigen::Matrix<double, -1, 1> eta_deviation;
      eta_deviation = Eigen::Matrix<double, -1, 1>(P_deviation_fixed);
      stan::math::fill(eta_deviation, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      eta_deviation = in__.vector(P_deviation_fixed);
      Eigen::Matrix<double, -1, 1> zeta_deviation;
      zeta_deviation = Eigen::Matrix<double, -1, 1>(P_deviation_random);
      stan::math::fill(zeta_deviation, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      zeta_deviation = in__.vector(P_deviation_random);
      double ell_deviation_random;
      ell_deviation_random = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      ell_deviation_random = in__.scalar();
      current_statement__ = 5;
      ell_deviation_random = stan::math::lb_constrain(ell_deviation_random, 0);
      double tau_squared_deviation_random;
      tau_squared_deviation_random = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_squared_deviation_random = in__.scalar();
      current_statement__ = 6;
      tau_squared_deviation_random = stan::math::lb_constrain(
                                       tau_squared_deviation_random, 0);
      Eigen::Matrix<double, -1, 1> gamma_deviation_horizontal;
      gamma_deviation_horizontal = Eigen::Matrix<double, -1, 1>(D_horizontal_warpings);
      stan::math::fill(gamma_deviation_horizontal, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      gamma_deviation_horizontal = in__.vector(D_horizontal_warpings);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= D_horizontal_warpings; ++sym1__) {
        current_statement__ = 7;
        assign(gamma_deviation_horizontal,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(gamma_deviation_horizontal[(sym1__ - 1)],
            0), "assigning variable gamma_deviation_horizontal");}
      Eigen::Matrix<double, -1, 1> gamma_deviation_vertical;
      gamma_deviation_vertical = Eigen::Matrix<double, -1, 1>(P_deviation_warping);
      stan::math::fill(gamma_deviation_vertical, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      gamma_deviation_vertical = in__.vector(P_deviation_warping);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
        current_statement__ = 8;
        assign(gamma_deviation_vertical,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(gamma_deviation_vertical[(sym1__ - 1)], 0),
          "assigning variable gamma_deviation_vertical");}
      Eigen::Matrix<double, -1, -1> L_deviation;
      L_deviation = Eigen::Matrix<double, -1, -1>(D_geometric, D_geometric);
      stan::math::fill(L_deviation, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_deviation_in__;
      L_deviation_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((D_geometric
                                                                   *
                                                                   (D_geometric
                                                                    - 1)) /
                                                                  2));
      stan::math::fill(L_deviation_in__, DUMMY_VAR__);
      
      current_statement__ = 9;
      L_deviation_in__ = in__.vector(((D_geometric * (D_geometric - 1)) / 2));
      current_statement__ = 9;
      assign(L_deviation, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_deviation_in__, D_geometric),
        "assigning variable L_deviation");
      Eigen::Matrix<double, -1, 1> alpha_beta_hat;
      alpha_beta_hat = Eigen::Matrix<double, -1, 1>(P_mean_total);
      stan::math::fill(alpha_beta_hat, std::numeric_limits<double>::quiet_NaN());
      
      double log_marginal;
      log_marginal = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(tau_squared_mean_random);
      vars__.emplace_back(sigma_squared_nugget);
      for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
        vars__.emplace_back(eta_deviation[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
        vars__.emplace_back(zeta_deviation[(sym1__ - 1)]);}
      vars__.emplace_back(ell_deviation_random);
      vars__.emplace_back(tau_squared_deviation_random);
      for (int sym1__ = 1; sym1__ <= D_horizontal_warpings; ++sym1__) {
        vars__.emplace_back(gamma_deviation_horizontal[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
        vars__.emplace_back(gamma_deviation_vertical[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= D_geometric; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= D_geometric; ++sym2__) {
          vars__.emplace_back(
            rvalue(L_deviation,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "L_deviation"));}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        current_statement__ = 12;
        validate_non_negative_index("x_warped", "N", N);
        current_statement__ = 13;
        validate_non_negative_index("x_warped", "D", D);
        std::vector<Eigen::Matrix<double, -1, 1>> x_warped;
        x_warped = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(D));
        stan::math::fill(x_warped, std::numeric_limits<double>::quiet_NaN());
        
        double log_det;
        log_det = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 15;
        log_det = 0;
        double y_tildet_Q_y_tilde;
        y_tildet_Q_y_tilde = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 16;
        y_tildet_Q_y_tilde = 0;
        current_statement__ = 17;
        validate_non_negative_index("Xt_Q_X", "P_mean_total", P_mean_total);
        current_statement__ = 18;
        validate_non_negative_index("Xt_Q_X", "P_mean_total", P_mean_total);
        Eigen::Matrix<double, -1, -1> Xt_Q_X;
        Xt_Q_X = Eigen::Matrix<double, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(Xt_Q_X, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 19;
        assign(Xt_Q_X, nil_index_list(),
          rep_matrix(0, P_mean_total, P_mean_total),
          "assigning variable Xt_Q_X");
        current_statement__ = 20;
        validate_non_negative_index("Xt_Q_y", "P_mean_total", P_mean_total);
        Eigen::Matrix<double, -1, 1> Xt_Q_y;
        Xt_Q_y = Eigen::Matrix<double, -1, 1>(P_mean_total);
        stan::math::fill(Xt_Q_y, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 21;
        assign(Xt_Q_y, nil_index_list(), rep_vector(0, P_mean_total),
          "assigning variable Xt_Q_y");
        current_statement__ = 22;
        validate_non_negative_index("Xt_Q_y_tilde", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<double, -1, 1> Xt_Q_y_tilde;
        Xt_Q_y_tilde = Eigen::Matrix<double, -1, 1>(P_mean_total);
        stan::math::fill(Xt_Q_y_tilde, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 23;
        assign(Xt_Q_y_tilde, nil_index_list(), rep_vector(0, P_mean_total),
          "assigning variable Xt_Q_y_tilde");
        current_statement__ = 24;
        validate_non_negative_index("alpha_beta_prior_precision",
                                    "P_mean_total", P_mean_total);
        current_statement__ = 25;
        validate_non_negative_index("alpha_beta_prior_precision",
                                    "P_mean_total", P_mean_total);
        Eigen::Matrix<double, -1, -1> alpha_beta_prior_precision;
        alpha_beta_prior_precision = Eigen::Matrix<double, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(alpha_beta_prior_precision, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 26;
        assign(alpha_beta_prior_precision, nil_index_list(),
          rep_matrix(0, P_mean_total, P_mean_total),
          "assigning variable alpha_beta_prior_precision");
        current_statement__ = 27;
        validate_non_negative_index("L_alpha_beta_precision", "P_mean_total",
                                    P_mean_total);
        current_statement__ = 28;
        validate_non_negative_index("L_alpha_beta_precision", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<double, -1, -1> L_alpha_beta_precision;
        L_alpha_beta_precision = Eigen::Matrix<double, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(L_alpha_beta_precision, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 30;
        validate_non_negative_index("L_alpha_beta_prior_precision",
                                    "P_mean_total", P_mean_total);
        current_statement__ = 31;
        validate_non_negative_index("L_alpha_beta_prior_precision",
                                    "P_mean_total", P_mean_total);
        Eigen::Matrix<double, -1, -1> L_alpha_beta_prior_precision;
        L_alpha_beta_prior_precision = Eigen::Matrix<double, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(L_alpha_beta_prior_precision, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 33;
        validate_non_negative_index("alpha_beta_precision", "P_mean_total",
                                    P_mean_total);
        current_statement__ = 34;
        validate_non_negative_index("alpha_beta_precision", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<double, -1, -1> alpha_beta_precision;
        alpha_beta_precision = Eigen::Matrix<double, -1, -1>(P_mean_total, P_mean_total);
        stan::math::fill(alpha_beta_precision, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 36;
        validate_non_negative_index("alpha_beta_rhs", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<double, -1, 1> alpha_beta_rhs;
        alpha_beta_rhs = Eigen::Matrix<double, -1, 1>(P_mean_total);
        stan::math::fill(alpha_beta_rhs, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 38;
        validate_non_negative_index("deviation_log_variance", "N", N);
        Eigen::Matrix<double, -1, 1> deviation_log_variance;
        deviation_log_variance = Eigen::Matrix<double, -1, 1>(N);
        stan::math::fill(deviation_log_variance, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 40;
        validate_non_negative_index("deviation_sd", "N", N);
        Eigen::Matrix<double, -1, 1> deviation_sd;
        deviation_sd = Eigen::Matrix<double, -1, 1>(N);
        stan::math::fill(deviation_sd, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 42;
        validate_non_negative_index("K_block", "N_block_max", N_block_max);
        current_statement__ = 43;
        validate_non_negative_index("K_block", "N_block_max", N_block_max);
        Eigen::Matrix<double, -1, -1> K_block;
        K_block = Eigen::Matrix<double, -1, -1>(N_block_max, N_block_max);
        stan::math::fill(K_block, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 45;
        validate_non_negative_index("L_block", "N_block_max", N_block_max);
        current_statement__ = 46;
        validate_non_negative_index("L_block", "N_block_max", N_block_max);
        Eigen::Matrix<double, -1, -1> L_block;
        L_block = Eigen::Matrix<double, -1, -1>(N_block_max, N_block_max);
        stan::math::fill(L_block, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 48;
        validate_non_negative_index("L_inv_X_block", "N_block_max",
                                    N_block_max);
        current_statement__ = 49;
        validate_non_negative_index("L_inv_X_block", "P_mean_total",
                                    P_mean_total);
        Eigen::Matrix<double, -1, -1> L_inv_X_block;
        L_inv_X_block = Eigen::Matrix<double, -1, -1>(N_block_max, P_mean_total);
        stan::math::fill(L_inv_X_block, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 51;
        validate_non_negative_index("L_inv_y_block", "N_block_max",
                                    N_block_max);
        Eigen::Matrix<double, -1, 1> L_inv_y_block;
        L_inv_y_block = Eigen::Matrix<double, -1, 1>(N_block_max);
        stan::math::fill(L_inv_y_block, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 53;
        validate_non_negative_index("L_inv_y_tilde_block", "N_block_max",
                                    N_block_max);
        Eigen::Matrix<double, -1, 1> L_inv_y_tilde_block;
        L_inv_y_tilde_block = Eigen::Matrix<double, -1, 1>(N_block_max);
        stan::math::fill(L_inv_y_tilde_block, std::numeric_limits<double>::quiet_NaN());
        
        int current_block_start;
        current_block_start = std::numeric_limits<int>::min();
        
        current_statement__ = 55;
        current_block_start = 1;
        int N_current_block;
        N_current_block = std::numeric_limits<int>::min();
        
        int N_parents_current_block;
        N_parents_current_block = std::numeric_limits<int>::min();
        
        current_statement__ = 58;
        validate_non_negative_index("indices_current_block", "N_block_max",
                                    N_block_max);
        std::vector<int> indices_current_block;
        indices_current_block = std::vector<int>(N_block_max, std::numeric_limits<int>::min());
        
        current_statement__ = 60;
        assign(deviation_log_variance, nil_index_list(),
          multiply(X_deviation_fixed, eta_deviation),
          "assigning variable deviation_log_variance");
        current_statement__ = 63;
        if (logical_gt(P_deviation_random, 0)) {
          current_statement__ = 61;
          assign(deviation_log_variance, nil_index_list(),
            add(stan::model::deep_copy(deviation_log_variance),
              multiply(X_deviation_random, zeta_deviation)),
            "assigning variable deviation_log_variance");
        } 
        current_statement__ = 64;
        assign(deviation_sd, nil_index_list(),
          stan::math::exp(multiply(0.5, deviation_log_variance)),
          "assigning variable deviation_sd");
        current_statement__ = 73;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 67;
          for (int j = 1; j <= (D - 1); ++j) {
            current_statement__ = 65;
            assign(x_warped,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              ((gamma_deviation_horizontal[(axial_warping_unit_mapping[
                                             (j - 1)] - 1)] *
                 scaling[(j - 1)]) * x[(i - 1)][(j - 1)]),
              "assigning variable x_warped");}
          current_statement__ = 68;
          assign(x_warped,
            cons_list(index_uni(i),
              cons_list(index_uni(D), nil_index_list())),
            multiply(
              rvalue(X_deviation_warping,
                cons_list(index_uni(i),
                  cons_list(index_omni(), nil_index_list())),
                "X_deviation_warping"),
              cumulative_sum(gamma_deviation_vertical)),
            "assigning variable x_warped");
          current_statement__ = 71;
          if (logical_gt(D_geometric, 0)) {
            current_statement__ = 69;
            assign(x_warped, cons_list(index_uni(i), nil_index_list()),
              multiply(transpose(L_deviation),
                stan::model::deep_copy(x_warped[(i - 1)])),
              "assigning variable x_warped");
          } }
        current_statement__ = 89;
        for (int i = 1; i <= N_blocks; ++i) {
          current_statement__ = 74;
          N_current_block = ((block_last_index[(i - 1)] -
                               current_block_start) + 1);
          current_statement__ = 75;
          N_parents_current_block = (N_current_block -
                                      block_N_responses[(i - 1)]);
          current_statement__ = 76;
          assign(indices_current_block,
            cons_list(index_min_max(1, N_current_block), nil_index_list()),
            rvalue(block_indices,
              cons_list(
                index_min_max(current_block_start, block_last_index[(i - 1)]),
                nil_index_list()), "block_indices"),
            "assigning variable indices_current_block");
          current_statement__ = 77;
          assign(K_block,
            cons_list(index_min_max(1, N_current_block),
              cons_list(index_min_max(1, N_current_block), nil_index_list())),
            geowarp_process_covariance(sigma_squared_nugget,
              rvalue(deviation_sd,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  nil_index_list()), "deviation_sd"),
              rvalue(x_warped,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  nil_index_list()), "x_warped"), smoothness, pstream__),
            "assigning variable K_block");
          current_statement__ = 78;
          assign(L_block,
            cons_list(index_min_max(1, N_current_block),
              cons_list(index_min_max(1, N_current_block), nil_index_list())),
            cholesky_decompose(
              rvalue(K_block,
                cons_list(index_min_max(1, N_current_block),
                  cons_list(index_min_max(1, N_current_block),
                    nil_index_list())), "K_block")),
            "assigning variable L_block");
          current_statement__ = 79;
          assign(L_inv_X_block,
            cons_list(index_min_max(1, N_current_block),
              cons_list(index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                nil_index_list())),
            mdivide_left_tri_low(
              rvalue(L_block,
                cons_list(index_min_max(1, N_current_block),
                  cons_list(index_min_max(1, N_current_block),
                    nil_index_list())), "L_block"),
              rvalue(X_mean,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  cons_list(
                    index_multi(rvalue(indices_X_mean_non_zero,
                                  cons_list(
                                    index_min_max(1, P_X_mean_non_zero[
                                    (i - 1)]),
                                    cons_list(index_uni(i), nil_index_list())),
                                  "indices_X_mean_non_zero")),
                    nil_index_list())), "X_mean")),
            "assigning variable L_inv_X_block");
          current_statement__ = 80;
          assign(L_inv_y_block,
            cons_list(index_min_max(1, N_current_block), nil_index_list()),
            mdivide_left_tri_low(
              rvalue(L_block,
                cons_list(index_min_max(1, N_current_block),
                  cons_list(index_min_max(1, N_current_block),
                    nil_index_list())), "L_block"),
              rvalue(y,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  nil_index_list()), "y")),
            "assigning variable L_inv_y_block");
          current_statement__ = 81;
          assign(L_inv_y_tilde_block,
            cons_list(index_min_max(1, N_current_block), nil_index_list()),
            mdivide_left_tri_low(
              rvalue(L_block,
                cons_list(index_min_max(1, N_current_block),
                  cons_list(index_min_max(1, N_current_block),
                    nil_index_list())), "L_block"),
              rvalue(y_tilde,
                cons_list(
                  index_multi(rvalue(indices_current_block,
                                cons_list(index_min_max(1, N_current_block),
                                  nil_index_list()), "indices_current_block")),
                  nil_index_list()), "y_tilde")),
            "assigning variable L_inv_y_tilde_block");
          current_statement__ = 82;
          log_det = (log_det +
                      (2 *
                        sum(
                          stan::math::log(
                            diagonal(
                              rvalue(L_block,
                                cons_list(
                                  index_min_max((N_parents_current_block + 1), N_current_block),
                                  cons_list(
                                    index_min_max((N_parents_current_block +
                                                    1), N_current_block),
                                    nil_index_list())), "L_block"))))));
          current_statement__ = 83;
          y_tildet_Q_y_tilde = (y_tildet_Q_y_tilde +
                                 sum(
                                   square(
                                     rvalue(L_inv_y_tilde_block,
                                       cons_list(
                                         index_min_max((N_parents_current_block
                                                         + 1), N_current_block),
                                         nil_index_list()),
                                       "L_inv_y_tilde_block"))));
          current_statement__ = 84;
          assign(Xt_Q_y,
            cons_list(
              index_multi(rvalue(indices_X_mean_non_zero,
                            cons_list(
                              index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                              cons_list(index_uni(i), nil_index_list())),
                            "indices_X_mean_non_zero")), nil_index_list()),
            add(
              stan::model::deep_copy(
                rvalue(Xt_Q_y,
                  cons_list(
                    index_multi(rvalue(indices_X_mean_non_zero,
                                  cons_list(
                                    index_min_max(1, P_X_mean_non_zero[
                                    (i - 1)]),
                                    cons_list(index_uni(i), nil_index_list())),
                                  "indices_X_mean_non_zero")),
                    nil_index_list()), "Xt_Q_y")),
              multiply(
                transpose(
                  rvalue(L_inv_X_block,
                    cons_list(
                      index_min_max((N_parents_current_block + 1), N_current_block),
                      cons_list(index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                        nil_index_list())), "L_inv_X_block")),
                rvalue(L_inv_y_block,
                  cons_list(
                    index_min_max((N_parents_current_block + 1), N_current_block),
                    nil_index_list()), "L_inv_y_block"))),
            "assigning variable Xt_Q_y");
          current_statement__ = 85;
          assign(Xt_Q_y_tilde,
            cons_list(
              index_multi(rvalue(indices_X_mean_non_zero,
                            cons_list(
                              index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                              cons_list(index_uni(i), nil_index_list())),
                            "indices_X_mean_non_zero")), nil_index_list()),
            add(
              stan::model::deep_copy(
                rvalue(Xt_Q_y_tilde,
                  cons_list(
                    index_multi(rvalue(indices_X_mean_non_zero,
                                  cons_list(
                                    index_min_max(1, P_X_mean_non_zero[
                                    (i - 1)]),
                                    cons_list(index_uni(i), nil_index_list())),
                                  "indices_X_mean_non_zero")),
                    nil_index_list()), "Xt_Q_y_tilde")),
              multiply(
                transpose(
                  rvalue(L_inv_X_block,
                    cons_list(
                      index_min_max((N_parents_current_block + 1), N_current_block),
                      cons_list(index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                        nil_index_list())), "L_inv_X_block")),
                rvalue(L_inv_y_tilde_block,
                  cons_list(
                    index_min_max((N_parents_current_block + 1), N_current_block),
                    nil_index_list()), "L_inv_y_tilde_block"))),
            "assigning variable Xt_Q_y_tilde");
          current_statement__ = 86;
          assign(Xt_Q_X,
            cons_list(
              index_multi(rvalue(indices_X_mean_non_zero,
                            cons_list(
                              index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                              cons_list(index_uni(i), nil_index_list())),
                            "indices_X_mean_non_zero")),
              cons_list(
                index_multi(rvalue(indices_X_mean_non_zero,
                              cons_list(
                                index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                                cons_list(index_uni(i), nil_index_list())),
                              "indices_X_mean_non_zero")), nil_index_list())),
            add(
              stan::model::deep_copy(
                rvalue(Xt_Q_X,
                  cons_list(
                    index_multi(rvalue(indices_X_mean_non_zero,
                                  cons_list(
                                    index_min_max(1, P_X_mean_non_zero[
                                    (i - 1)]),
                                    cons_list(index_uni(i), nil_index_list())),
                                  "indices_X_mean_non_zero")),
                    cons_list(
                      index_multi(rvalue(indices_X_mean_non_zero,
                                    cons_list(
                                      index_min_max(1, P_X_mean_non_zero[
                                      (i - 1)]),
                                      cons_list(index_uni(i),
                                        nil_index_list())),
                                    "indices_X_mean_non_zero")),
                      nil_index_list())), "Xt_Q_X")),
              crossprod(
                rvalue(L_inv_X_block,
                  cons_list(
                    index_min_max((N_parents_current_block + 1), N_current_block),
                    cons_list(index_min_max(1, P_X_mean_non_zero[(i - 1)]),
                      nil_index_list())), "L_inv_X_block"))),
            "assigning variable Xt_Q_X");
          current_statement__ = 87;
          current_block_start = (block_last_index[(i - 1)] + 1);}
        current_statement__ = 90;
        assign(alpha_beta_prior_precision,
          cons_list(index_min_max(1, P_mean_fixed),
            cons_list(index_min_max(1, P_mean_fixed), nil_index_list())),
          alpha_precision, "assigning variable alpha_beta_prior_precision");
        current_statement__ = 93;
        if (logical_gt(P_mean_total, P_mean_fixed)) {
          current_statement__ = 91;
          assign(alpha_beta_prior_precision,
            cons_list(index_min_max((P_mean_fixed + 1), P_mean_total),
              cons_list(index_min_max((P_mean_fixed + 1), P_mean_total),
                nil_index_list())),
            rw1d_precision(P_mean_random, tau_squared_mean_random, pstream__),
            "assigning variable alpha_beta_prior_precision");
        } 
        current_statement__ = 94;
        assign(alpha_beta_precision, nil_index_list(),
          add(Xt_Q_X, alpha_beta_prior_precision),
          "assigning variable alpha_beta_precision");
        current_statement__ = 95;
        assign(L_alpha_beta_prior_precision, nil_index_list(),
          cholesky_decompose(alpha_beta_prior_precision),
          "assigning variable L_alpha_beta_prior_precision");
        current_statement__ = 96;
        assign(L_alpha_beta_precision, nil_index_list(),
          cholesky_decompose(alpha_beta_precision),
          "assigning variable L_alpha_beta_precision");
        current_statement__ = 97;
        assign(alpha_beta_rhs, nil_index_list(), add(Xt_Q_y, alpha_Q_mu),
          "assigning variable alpha_beta_rhs");
        current_statement__ = 98;
        assign(alpha_beta_hat, nil_index_list(),
          chol_solve_L_b(L_alpha_beta_precision, alpha_beta_rhs, pstream__),
          "assigning variable alpha_beta_hat");
        current_statement__ = 99;
        log_marginal = (-0.5 *
                         (((((2 *
                               sum(
                                 stan::math::log(
                                   diagonal(L_alpha_beta_precision)))) -
                              (2 *
                                sum(
                                  stan::math::log(
                                    diagonal(L_alpha_beta_prior_precision)))))
                             + log_det) + y_tildet_Q_y_tilde) -
                           sum(
                             square(
                               mdivide_left_tri_low(L_alpha_beta_precision,
                                 Xt_Q_y_tilde)))));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= P_mean_total; ++sym1__) {
          vars__.emplace_back(alpha_beta_hat[(sym1__ - 1)]);}
        vars__.emplace_back(log_marginal);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double tau_squared_mean_random;
      tau_squared_mean_random = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      tau_squared_mean_random = context__.vals_r("tau_squared_mean_random")[
          (1 - 1)];
      double tau_squared_mean_random_free__;
      tau_squared_mean_random_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      tau_squared_mean_random_free__ = stan::math::lb_free(
                                         tau_squared_mean_random, 0);
      double sigma_squared_nugget;
      sigma_squared_nugget = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_squared_nugget = context__.vals_r("sigma_squared_nugget")[
          (1 - 1)];
      double sigma_squared_nugget_free__;
      sigma_squared_nugget_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_squared_nugget_free__ = stan::math::lb_free(sigma_squared_nugget,
                                      0);
      Eigen::Matrix<double, -1, 1> eta_deviation;
      eta_deviation = Eigen::Matrix<double, -1, 1>(P_deviation_fixed);
      stan::math::fill(eta_deviation, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_deviation_flat__;
        current_statement__ = 3;
        assign(eta_deviation_flat__, nil_index_list(),
          context__.vals_r("eta_deviation"),
          "assigning variable eta_deviation_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
          current_statement__ = 3;
          assign(eta_deviation,
            cons_list(index_uni(sym1__), nil_index_list()),
            eta_deviation_flat__[(pos__ - 1)],
            "assigning variable eta_deviation");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> zeta_deviation;
      zeta_deviation = Eigen::Matrix<double, -1, 1>(P_deviation_random);
      stan::math::fill(zeta_deviation, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> zeta_deviation_flat__;
        current_statement__ = 4;
        assign(zeta_deviation_flat__, nil_index_list(),
          context__.vals_r("zeta_deviation"),
          "assigning variable zeta_deviation_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
          current_statement__ = 4;
          assign(zeta_deviation,
            cons_list(index_uni(sym1__), nil_index_list()),
            zeta_deviation_flat__[(pos__ - 1)],
            "assigning variable zeta_deviation");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      double ell_deviation_random;
      ell_deviation_random = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      ell_deviation_random = context__.vals_r("ell_deviation_random")[
          (1 - 1)];
      double ell_deviation_random_free__;
      ell_deviation_random_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      ell_deviation_random_free__ = stan::math::lb_free(ell_deviation_random,
                                      0);
      double tau_squared_deviation_random;
      tau_squared_deviation_random = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_squared_deviation_random = context__.vals_r("tau_squared_deviation_random")[
          (1 - 1)];
      double tau_squared_deviation_random_free__;
      tau_squared_deviation_random_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_squared_deviation_random_free__ = stan::math::lb_free(
                                              tau_squared_deviation_random, 0);
      Eigen::Matrix<double, -1, 1> gamma_deviation_horizontal;
      gamma_deviation_horizontal = Eigen::Matrix<double, -1, 1>(D_horizontal_warpings);
      stan::math::fill(gamma_deviation_horizontal, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_deviation_horizontal_flat__;
        current_statement__ = 7;
        assign(gamma_deviation_horizontal_flat__, nil_index_list(),
          context__.vals_r("gamma_deviation_horizontal"),
          "assigning variable gamma_deviation_horizontal_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= D_horizontal_warpings; ++sym1__) {
          current_statement__ = 7;
          assign(gamma_deviation_horizontal,
            cons_list(index_uni(sym1__), nil_index_list()),
            gamma_deviation_horizontal_flat__[(pos__ - 1)],
            "assigning variable gamma_deviation_horizontal");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gamma_deviation_horizontal_free__;
      gamma_deviation_horizontal_free__ = Eigen::Matrix<double, -1, 1>(D_horizontal_warpings);
      stan::math::fill(gamma_deviation_horizontal_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= D_horizontal_warpings; ++sym1__) {
        current_statement__ = 7;
        assign(gamma_deviation_horizontal_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(gamma_deviation_horizontal[(sym1__ - 1)], 0),
          "assigning variable gamma_deviation_horizontal_free__");}
      Eigen::Matrix<double, -1, 1> gamma_deviation_vertical;
      gamma_deviation_vertical = Eigen::Matrix<double, -1, 1>(P_deviation_warping);
      stan::math::fill(gamma_deviation_vertical, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_deviation_vertical_flat__;
        current_statement__ = 8;
        assign(gamma_deviation_vertical_flat__, nil_index_list(),
          context__.vals_r("gamma_deviation_vertical"),
          "assigning variable gamma_deviation_vertical_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
          current_statement__ = 8;
          assign(gamma_deviation_vertical,
            cons_list(index_uni(sym1__), nil_index_list()),
            gamma_deviation_vertical_flat__[(pos__ - 1)],
            "assigning variable gamma_deviation_vertical");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gamma_deviation_vertical_free__;
      gamma_deviation_vertical_free__ = Eigen::Matrix<double, -1, 1>(P_deviation_warping);
      stan::math::fill(gamma_deviation_vertical_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
        current_statement__ = 8;
        assign(gamma_deviation_vertical_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(gamma_deviation_vertical[(sym1__ - 1)], 0),
          "assigning variable gamma_deviation_vertical_free__");}
      Eigen::Matrix<double, -1, -1> L_deviation;
      L_deviation = Eigen::Matrix<double, -1, -1>(D_geometric, D_geometric);
      stan::math::fill(L_deviation, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_deviation_flat__;
        current_statement__ = 9;
        assign(L_deviation_flat__, nil_index_list(),
          context__.vals_r("L_deviation"),
          "assigning variable L_deviation_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= D_geometric; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= D_geometric; ++sym2__) {
            current_statement__ = 9;
            assign(L_deviation,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_deviation_flat__[(pos__ - 1)],
              "assigning variable L_deviation");
            current_statement__ = 9;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_deviation_free__;
      L_deviation_free__ = Eigen::Matrix<double, -1, 1>(((D_geometric *
                                                           (D_geometric - 1))
                                                          / 2));
      stan::math::fill(L_deviation_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(L_deviation_free__, nil_index_list(),
        stan::math::cholesky_corr_free(L_deviation),
        "assigning variable L_deviation_free__");
      vars__.emplace_back(tau_squared_mean_random_free__);
      vars__.emplace_back(sigma_squared_nugget_free__);
      for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
        vars__.emplace_back(eta_deviation[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
        vars__.emplace_back(zeta_deviation[(sym1__ - 1)]);}
      vars__.emplace_back(ell_deviation_random_free__);
      vars__.emplace_back(tau_squared_deviation_random_free__);
      for (int sym1__ = 1; sym1__ <= D_horizontal_warpings; ++sym1__) {
        vars__.emplace_back(gamma_deviation_horizontal_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
        vars__.emplace_back(gamma_deviation_vertical_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((D_geometric * (D_geometric - 1)) / 2);
           ++sym1__) { vars__.emplace_back(L_deviation_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("tau_squared_mean_random");
    names__.emplace_back("sigma_squared_nugget");
    names__.emplace_back("eta_deviation");
    names__.emplace_back("zeta_deviation");
    names__.emplace_back("ell_deviation_random");
    names__.emplace_back("tau_squared_deviation_random");
    names__.emplace_back("gamma_deviation_horizontal");
    names__.emplace_back("gamma_deviation_vertical");
    names__.emplace_back("L_deviation");
    names__.emplace_back("alpha_beta_hat");
    names__.emplace_back("log_marginal");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(P_deviation_fixed)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(P_deviation_random)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(D_horizontal_warpings)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(P_deviation_warping)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(D_geometric)
                                             ,
                                             static_cast<size_t>(D_geometric)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(P_mean_total)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "tau_squared_mean_random");
    param_names__.emplace_back(std::string() + "sigma_squared_nugget");
    for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta_deviation" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zeta_deviation" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "ell_deviation_random");
    param_names__.emplace_back(std::string() + "tau_squared_deviation_random");
    for (int sym1__ = 1; sym1__ <= D_horizontal_warpings; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_deviation_horizontal" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_deviation_vertical" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= D_geometric; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= D_geometric; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_deviation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= P_mean_total; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_beta_hat" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "log_marginal");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "tau_squared_mean_random");
    param_names__.emplace_back(std::string() + "sigma_squared_nugget");
    for (int sym1__ = 1; sym1__ <= P_deviation_fixed; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta_deviation" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= P_deviation_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zeta_deviation" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "ell_deviation_random");
    param_names__.emplace_back(std::string() + "tau_squared_deviation_random");
    for (int sym1__ = 1; sym1__ <= D_horizontal_warpings; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_deviation_horizontal" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= P_deviation_warping; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_deviation_vertical" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((D_geometric * (D_geometric - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_deviation" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= P_mean_total; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_beta_hat" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "log_marginal");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"tau_squared_mean_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_squared_nugget\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta_deviation\",\"type\":{\"name\":\"vector\",\"length\":" << P_deviation_fixed << "},\"block\":\"parameters\"},{\"name\":\"zeta_deviation\",\"type\":{\"name\":\"vector\",\"length\":" << P_deviation_random << "},\"block\":\"parameters\"},{\"name\":\"ell_deviation_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_squared_deviation_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_deviation_horizontal\",\"type\":{\"name\":\"vector\",\"length\":" << D_horizontal_warpings << "},\"block\":\"parameters\"},{\"name\":\"gamma_deviation_vertical\",\"type\":{\"name\":\"vector\",\"length\":" << P_deviation_warping << "},\"block\":\"parameters\"},{\"name\":\"L_deviation\",\"type\":{\"name\":\"matrix\",\"rows\":" << D_geometric << ",\"cols\":" << D_geometric << "},\"block\":\"parameters\"},{\"name\":\"alpha_beta_hat\",\"type\":{\"name\":\"vector\",\"length\":" << P_mean_total << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_marginal\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"tau_squared_mean_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_squared_nugget\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta_deviation\",\"type\":{\"name\":\"vector\",\"length\":" << P_deviation_fixed << "},\"block\":\"parameters\"},{\"name\":\"zeta_deviation\",\"type\":{\"name\":\"vector\",\"length\":" << P_deviation_random << "},\"block\":\"parameters\"},{\"name\":\"ell_deviation_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_squared_deviation_random\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_deviation_horizontal\",\"type\":{\"name\":\"vector\",\"length\":" << D_horizontal_warpings << "},\"block\":\"parameters\"},{\"name\":\"gamma_deviation_vertical\",\"type\":{\"name\":\"vector\",\"length\":" << P_deviation_warping << "},\"block\":\"parameters\"},{\"name\":\"L_deviation\",\"type\":{\"name\":\"vector\",\"length\":" << ((D_geometric * (D_geometric - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"alpha_beta_hat\",\"type\":{\"name\":\"vector\",\"length\":" << P_mean_total << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_marginal\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_full_namespace::model_full;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_full_namespace::profiles__;
}
#endif
#endif
